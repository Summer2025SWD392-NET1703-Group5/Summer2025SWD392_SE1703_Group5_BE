// src/services/promotionExpirationService.js
const logger = require('../utils/logger');
const { Promotion, PromotionUsage, TicketBooking, sequelize } = require('../models');
const { Op } = require('sequelize');

/**
 * Background Service ƒë·ªÉ t·ª± ƒë·ªông ·∫©n promotion h·∫øt h·∫°n
 * Chuy·ªÉn promotion t·ª´ 'Active' th√†nh 'Expired' khi qua End_Date
 */
class PromotionExpirationService {
    constructor() {
        this.logger = logger;
        // üîß TEMP: Gi·∫£m th·ªùi gian ch·∫°y ƒë·ªÉ test (5 ph√∫t m·ªôt l·∫ßn thay v√¨ 6 gi·ªù)
        this.checkInterval = 1 * 60 * 1000; // 5 ph√∫t = 300000ms (thay v√¨ 6 gi·ªù)

        // Bi·∫øn ƒë·ªÉ l∆∞u tr·ªØ interval ID
        this.intervalId = null;

        // Bi·∫øn ƒë·ªÉ l∆∞u tr·ªØ timeout ID cho l·∫ßn ch·∫°y ƒë·∫ßu ti√™n
        this.timeoutId = null;

        // Bi·∫øn ƒë·ªÉ ki·ªÉm so√°t vi·ªác d·ª´ng service
        this.isRunning = false;

        // ƒê·∫øm s·ªë l·∫ßn ki·ªÉm tra
        this.totalChecks = 0;
        this.totalExpiredPromotions = 0;

        // T√≠nh to√°n th·ªùi gian ƒë·∫øn 00:00 ti·∫øp theo ƒë·ªÉ ch·∫°y v√†o n·ª≠a ƒë√™m
        this.calculateTimeToNextMidnight = () => {
            const now = new Date();
            const nextMidnight = new Date();
            nextMidnight.setHours(24, 0, 0, 0); // Set to next midnight (00:00)
            return nextMidnight - now;
        };
    }

    /**
     * B·∫Øt ƒë·∫ßu background service
     */
    async start() {
        if (this.isRunning) {
            this.logger.warn('[PromotionExpirationService] Service ƒë√£ ƒëang ch·∫°y');
            return;
        }

        try {
            this.logger.info('[PromotionExpirationService] ƒêang kh·ªüi ƒë·ªông service ·∫©n promotion h·∫øt h·∫°n...');
            
            // üîß TEMP: Ch·∫°y l·∫ßn ƒë·∫ßu ti√™n ngay l·∫≠p t·ª©c v√† thi·∫øt l·∫≠p interval ngay
            await this.executeCheck();

            // üîß TEMP: Thi·∫øt l·∫≠p interval ƒë·ªÉ ch·∫°y ƒë·ªãnh k·ª≥ m·ªói 5 ph√∫t (thay v√¨ ch·ªù ƒë·∫øn n·ª≠a ƒë√™m)
            this.logger.info(`[PromotionExpirationService] S·∫Ω ch·∫°y l·∫°i sau m·ªói ${this.checkInterval / (60 * 1000)} ph√∫t`);

            this.intervalId = setInterval(async () => {
                await this.executeCheck();
            }, this.checkInterval);

            this.isRunning = true;
            this.logger.info(`[PromotionExpirationService] ‚úÖ Service ƒë√£ kh·ªüi ƒë·ªông th√†nh c√¥ng!`);
            
        } catch (error) {
            this.logger.error('[PromotionExpirationService] ‚ùå L·ªói khi kh·ªüi ƒë·ªông service:', error);
            this.isRunning = false;
        }
    }

    /**
     * D·ª´ng background service
     */
    stop() {
        if (!this.isRunning) {
            this.logger.warn('[PromotionExpirationService] Service kh√¥ng ƒëang ch·∫°y');
            return;
        }

        try {
            if (this.intervalId) {
                clearInterval(this.intervalId);
                this.intervalId = null;
            }

            if (this.timeoutId) {
                clearTimeout(this.timeoutId);
                this.timeoutId = null;
            }

            this.isRunning = false;
            this.logger.info('[PromotionExpirationService] ‚úÖ Service ƒë√£ d·ª´ng th√†nh c√¥ng');
            
        } catch (error) {
            this.logger.error('[PromotionExpirationService] ‚ùå L·ªói khi d·ª´ng service:', error);
        }
    }

    /**
     * Th·ª±c hi·ªán ki·ªÉm tra v√† ·∫©n promotion h·∫øt h·∫°n
     */
    async executeCheck() {
        const startTime = new Date();
        this.totalChecks++;

        try {
            // L·∫•y ng√†y hi·ªán t·∫°i (ch·ªâ ng√†y, kh√¥ng c√≥ gi·ªù)
            const today = new Date();
            today.setHours(0, 0, 0, 0);

            this.logger.info(`[PromotionExpirationService] üîç B·∫Øt ƒë·∫ßu ki·ªÉm tra promotion h·∫øt h·∫°n l·∫ßn th·ª© ${this.totalChecks} - ${today.toISOString().split('T')[0]}`);

            // Ki·ªÉm tra xem models c√≥ t·ªìn t·∫°i kh√¥ng
            if (!Promotion) {
                this.logger.warn('[PromotionExpirationService] Model Promotion ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o, b·ªè qua l·∫ßn ki·ªÉm tra n√†y');
                return {
                    message: 'Model Promotion ch∆∞a s·∫µn s√†ng',
                    currentTime: startTime,
                    totalChecks: this.totalChecks
                };
            }

            // üîß DEBUG: Ki·ªÉm tra t·∫•t c·∫£ promotion Active tr∆∞·ªõc
            const [allActivePromotions] = await sequelize.query(`
                SELECT
                    p.Promotion_ID,
                    p.Title,
                    p.Promotion_Code,
                    p.Status,
                    p.End_Date,
                    CAST(GETDATE() AS DATE) as CurrentDate,
                    CASE
                        WHEN CAST(p.End_Date AS DATE) < CAST(GETDATE() AS DATE) THEN 'SHOULD_EXPIRE'
                        ELSE 'VALID'
                    END as ShouldExpire
                FROM ksf00691_team03.Promotions p
                WHERE p.Status = 'Active'
                ORDER BY p.End_Date ASC
            `);

            this.logger.info(`[PromotionExpirationService] üìä T·ªïng c·ªông ${allActivePromotions.length} promotion Active:`);
            allActivePromotions.forEach(promo => {
                this.logger.info(`   - ID: ${promo.Promotion_ID} | Code: ${promo.Promotion_Code} | End: ${promo.End_Date} | ${promo.ShouldExpire}`);
            });

            // T√¨m c√°c promotion c·∫ßn expire b·∫±ng SQL tr·ª±c ti·∫øp
            const [expiredPromotionsFromSQL] = await sequelize.query(`
                SELECT 
                    p.Promotion_ID,
                    p.Title,
                    p.Promotion_Code,
                    p.Status,
                    p.End_Date,
                    CAST(GETDATE() AS DATE) as CurrentDate,
                    DATEDIFF(day, p.End_Date, CAST(GETDATE() AS DATE)) as DaysOverdue
                FROM ksf00691_team03.Promotions p
                WHERE p.Status = 'Active'
                    AND CAST(p.End_Date AS DATE) < CAST(GETDATE() AS DATE)
            `);

            this.logger.info(`[PromotionExpirationService] SQL t√¨m th·∫•y ${expiredPromotionsFromSQL.length} promotion c·∫ßn expire`);

            if (expiredPromotionsFromSQL.length === 0) {
                this.logger.info('[PromotionExpirationService] ‚úÖ Kh√¥ng c√≥ promotion n√†o c·∫ßn expire');
                return {
                    message: 'Kh√¥ng c√≥ promotion h·∫øt h·∫°n',
                    currentTime: startTime,
                    totalChecks: this.totalChecks,
                    totalExpiredPromotions: this.totalExpiredPromotions
                };
            }

            // X·ª≠ l√Ω t·ª´ng promotion h·∫øt h·∫°n
            let expiredCount = 0;
            const expiredPromotions = [];

            for (const sqlPromotion of expiredPromotionsFromSQL) {
                try {
                    this.logger.warn(`[PromotionExpirationService] Promotion "${sqlPromotion.Title}" (${sqlPromotion.Promotion_Code}) ƒë√£ h·∫øt h·∫°n ${sqlPromotion.DaysOverdue} ng√†y`);

                    const result = await this.expirePromotion(sqlPromotion);
                    if (result.success) {
                        expiredCount++;
                        expiredPromotions.push({
                            id: sqlPromotion.Promotion_ID,
                            title: sqlPromotion.Title,
                            code: sqlPromotion.Promotion_Code
                        });
                        this.totalExpiredPromotions++;
                    }

                } catch (error) {
                    this.logger.error(`[PromotionExpirationService] L·ªói khi expire promotion #${sqlPromotion.Promotion_ID}:`, error);
                }
            }

            const endTime = new Date();
            const duration = endTime - startTime;

            this.logger.info(`[PromotionExpirationService] ‚úÖ Ho√†n th√†nh ki·ªÉm tra: ${expiredCount}/${expiredPromotionsFromSQL.length} promotion ƒë√£ ƒë∆∞·ª£c expire trong ${duration}ms`);

            return {
                message: `ƒê√£ expire ${expiredCount} promotion h·∫øt h·∫°n`,
                expiredPromotions,
                totalProcessed: expiredPromotionsFromSQL.length,
                totalExpired: expiredCount,
                duration: `${duration}ms`,
                totalChecks: this.totalChecks,
                totalExpiredPromotions: this.totalExpiredPromotions
            };

        } catch (error) {
            this.logger.error('[PromotionExpirationService] ‚ùå L·ªói trong qu√° tr√¨nh ki·ªÉm tra:', error);
            throw error;
        }
    }

    /**
     * Expire m·ªôt promotion h·∫øt h·∫°n
     */
    async expirePromotion(promotionData) {
        const transaction = await sequelize.transaction();

        try {
            // Ki·ªÉm tra xem promotion c√≥ ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng trong booking active kh√¥ng
            const activeUsage = await PromotionUsage.count({
                include: [{
                    model: TicketBooking,
                    as: 'TicketBooking',
                    where: {
                        Status: { [Op.in]: ['Pending', 'Confirmed'] }
                    },
                    required: true
                }],
                where: {
                    Promotion_ID: promotionData.Promotion_ID,
                    HasUsed: true
                },
                transaction
            });

            if (activeUsage > 0) {
                this.logger.warn(`[PromotionExpirationService] Promotion #${promotionData.Promotion_ID} ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng trong ${activeUsage} booking active, ch·ªâ ƒë√°nh d·∫•u expired`);
            }

            // C·∫≠p nh·∫≠t tr·∫°ng th√°i promotion th√†nh 'Expired'
            const [updatedRows] = await Promotion.update(
                { 
                    Status: 'Expired',
                    Updated_At: new Date()
                },
                { 
                    where: { 
                        Promotion_ID: promotionData.Promotion_ID,
                        Status: 'Active'
                    },
                    transaction 
                }
            );

            if (updatedRows === 0) {
                await transaction.rollback();
                return {
                    success: false,
                    message: `Promotion #${promotionData.Promotion_ID} kh√¥ng th·ªÉ expire (c√≥ th·ªÉ ƒë√£ ƒë∆∞·ª£c expire tr∆∞·ªõc ƒë√≥)`
                };
            }

            // Log chi ti·∫øt
            this.logger.info(`[PromotionExpirationService] ‚úÖ ƒê√£ expire promotion #${promotionData.Promotion_ID} - "${promotionData.Title}" (${promotionData.Promotion_Code})`);

            await transaction.commit();

            return {
                success: true,
                message: `ƒê√£ expire promotion #${promotionData.Promotion_ID}`,
                promotionId: promotionData.Promotion_ID,
                title: promotionData.Title,
                code: promotionData.Promotion_Code,
                endDate: promotionData.End_Date,
                activeUsage: activeUsage
            };

        } catch (error) {
            await transaction.rollback();
            this.logger.error(`[PromotionExpirationService] L·ªói khi expire promotion #${promotionData.Promotion_ID}:`, error);
            throw error;
        }
    }

    /**
     * L·∫•y th·ªëng k√™ service
     */
    getStats() {
        return {
            isRunning: this.isRunning,
            totalChecks: this.totalChecks,
            totalExpiredPromotions: this.totalExpiredPromotions,
            checkInterval: this.checkInterval,
            nextMidnight: this.calculateTimeToNextMidnight(),
            nextCheckIn: this.intervalId ? 'Running' : 'Scheduled for midnight'
        };
    }

    /**
     * Force check m·ªôt promotion c·ª• th·ªÉ
     */
    async forceCheckPromotion(promotionId) {
        try {
            this.logger.info(`[PromotionExpirationService] Force check promotion #${promotionId}...`);

            // Ki·ªÉm tra promotion b·∫±ng SQL
            const [sqlCheck] = await sequelize.query(`
                SELECT 
                    p.Promotion_ID,
                    p.Title,
                    p.Promotion_Code,
                    p.Status,
                    p.End_Date,
                    CAST(GETDATE() AS DATE) as CurrentDate,
                    CASE WHEN CAST(p.End_Date AS DATE) < CAST(GETDATE() AS DATE)
                         THEN 1 ELSE 0 END as IsExpired
                FROM ksf00691_team03.Promotions p
                WHERE p.Promotion_ID = ${promotionId}
            `);

            if (!sqlCheck || sqlCheck.length === 0) {
                return {
                    success: false,
                    message: `Kh√¥ng t√¨m th·∫•y promotion #${promotionId}`
                };
            }

            const promotionInfo = sqlCheck[0];

            if (promotionInfo.Status !== 'Active') {
                return {
                    success: false,
                    message: `Promotion #${promotionId} ƒë√£ c√≥ tr·∫°ng th√°i: ${promotionInfo.Status}`
                };
            }

            if (!promotionInfo.IsExpired) {
                return {
                    success: false,
                    message: `Promotion #${promotionId} ch∆∞a h·∫øt h·∫°n. End_Date: ${promotionInfo.End_Date}`
                };
            }

            // Promotion ƒë√£ h·∫øt h·∫°n, ti·∫øn h√†nh expire
            const result = await this.expirePromotion(promotionInfo);

            return {
                success: true,
                message: `ƒê√£ force expire promotion #${promotionId}`,
                result
            };

        } catch (error) {
            this.logger.error(`[PromotionExpirationService] L·ªói khi force check promotion #${promotionId}:`, error);
            throw error;
        }
    }

    /**
     * L·∫•y danh s√°ch promotion s·∫Øp h·∫øt h·∫°n (trong v√≤ng N ng√†y)
     */
    async getPromotionsNearExpiration(daysAhead = 7) {
        try {
            const [results] = await sequelize.query(`
                SELECT 
                    p.Promotion_ID,
                    p.Title,
                    p.Promotion_Code,
                    p.End_Date,
                    DATEDIFF(day, CAST(GETDATE() AS DATE), CAST(p.End_Date AS DATE)) as DaysLeft
                FROM ksf00691_team03.Promotions p
                WHERE p.Status = 'Active'
                    AND CAST(p.End_Date AS DATE) >= CAST(GETDATE() AS DATE)
                    AND DATEDIFF(day, CAST(GETDATE() AS DATE), CAST(p.End_Date AS DATE)) <= ${daysAhead}
                ORDER BY p.End_Date ASC
            `);

            return results || [];

        } catch (error) {
            this.logger.error(`[PromotionExpirationService] L·ªói khi l·∫•y promotion s·∫Øp h·∫øt h·∫°n:`, error);
            throw error;
        }
    }
}

module.exports = new PromotionExpirationService();
