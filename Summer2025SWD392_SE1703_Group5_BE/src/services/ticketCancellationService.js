// src/services/ticketCancellationService.js
const logger = require('../utils/logger');
const { Ticket, TicketBooking, Showtime, Movie, User, sequelize } = require('../models');
const { Op } = require('sequelize');

/**
 * Background Service ƒë·ªÉ t·ª± ƒë·ªông h·ªßy v√© qu√° h·∫°n
 * H·ªßy c√°c v√© ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n nh∆∞ng su·∫•t chi·∫øu ƒë√£ qua
 */
class TicketCancellationService {
    constructor() {
        this.logger = logger;
        // Kho·∫£ng th·ªùi gian ch·∫°y (m·∫∑c ƒë·ªãnh l√† 2 gi·ªù m·ªôt l·∫ßn)
        this.checkInterval = 2 * 60 * 60 * 1000; // 2 gi·ªù = 7200000ms

        // Bi·∫øn ƒë·ªÉ l∆∞u tr·ªØ interval ID
        this.intervalId = null;

        // Bi·∫øn ƒë·ªÉ l∆∞u tr·ªØ timeout ID cho l·∫ßn ch·∫°y ƒë·∫ßu ti√™n
        this.timeoutId = null;

        // Bi·∫øn ƒë·ªÉ ki·ªÉm so√°t vi·ªác d·ª´ng service
        this.isRunning = false;

        // ƒê·∫øm s·ªë l·∫ßn ki·ªÉm tra
        this.totalChecks = 0;
        this.totalCancelledTickets = 0;

        // Th·ªùi gian delay sau khi su·∫•t chi·∫øu k·∫øt th√∫c m·ªõi h·ªßy v√© (ph√∫t)
        this.gracePeriodMinutes = 30;
    }

    /**
     * B·∫Øt ƒë·∫ßu background service
     */
    async start() {
        if (this.isRunning) {
            this.logger.warn('[TicketCancellationService] Service ƒë√£ ƒëang ch·∫°y');
            return;
        }

        try {
            this.logger.info('[TicketCancellationService] ƒêang kh·ªüi ƒë·ªông service h·ªßy v√© qu√° h·∫°n...');
            
            // Ch·∫°y l·∫ßn ƒë·∫ßu ti√™n ngay l·∫≠p t·ª©c
            await this.executeCheck();
            
            // Thi·∫øt l·∫≠p interval ƒë·ªÉ ch·∫°y ƒë·ªãnh k·ª≥
            this.intervalId = setInterval(async () => {
                await this.executeCheck();
            }, this.checkInterval);

            this.isRunning = true;
            this.logger.info(`[TicketCancellationService] ‚úÖ Service ƒë√£ kh·ªüi ƒë·ªông th√†nh c√¥ng! S·∫Ω ch·∫°y m·ªói ${this.checkInterval / (60 * 1000)} ph√∫t`);
            
        } catch (error) {
            this.logger.error('[TicketCancellationService] ‚ùå L·ªói khi kh·ªüi ƒë·ªông service:', error);
            this.isRunning = false;
        }
    }

    /**
     * D·ª´ng background service
     */
    stop() {
        if (!this.isRunning) {
            this.logger.warn('[TicketCancellationService] Service kh√¥ng ƒëang ch·∫°y');
            return;
        }

        try {
            if (this.intervalId) {
                clearInterval(this.intervalId);
                this.intervalId = null;
            }

            if (this.timeoutId) {
                clearTimeout(this.timeoutId);
                this.timeoutId = null;
            }

            this.isRunning = false;
            this.logger.info('[TicketCancellationService] ‚úÖ Service ƒë√£ d·ª´ng th√†nh c√¥ng');
            
        } catch (error) {
            this.logger.error('[TicketCancellationService] ‚ùå L·ªói khi d·ª´ng service:', error);
        }
    }

    /**
     * Th·ª±c hi·ªán ki·ªÉm tra v√† h·ªßy v√© qu√° h·∫°n
     */
    async executeCheck() {
        const startTime = new Date();
        this.totalChecks++;

        try {
            this.logger.info(`[TicketCancellationService] üîç B·∫Øt ƒë·∫ßu ki·ªÉm tra v√© qu√° h·∫°n l·∫ßn th·ª© ${this.totalChecks} - ${startTime.toISOString()}`);

            // Ki·ªÉm tra xem models c√≥ t·ªìn t·∫°i kh√¥ng
            if (!Ticket || !TicketBooking || !Showtime) {
                this.logger.warn('[TicketCancellationService] Models ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o, b·ªè qua l·∫ßn ki·ªÉm tra n√†y');
                return {
                    message: 'Models ch∆∞a s·∫µn s√†ng',
                    currentTime: startTime,
                    totalChecks: this.totalChecks
                };
            }

            // T√¨m c√°c v√© c·∫ßn h·ªßy b·∫±ng c√°ch join manual ƒë·ªÉ tr√°nh l·ªói associations
            const expiredTickets = await sequelize.query(`
                SELECT
                    t.Ticket_ID,
                    t.Booking_ID,
                    s.Showtime_ID,
                    s.Show_Date,
                    s.Start_Time,
                    s.End_Time,
                    m.Movie_Name,
                    m.Duration
                FROM ksf00691_team03.Tickets t
                INNER JOIN ksf00691_team03.Ticket_Bookings tb ON t.Booking_ID = tb.Booking_ID
                INNER JOIN ksf00691_team03.Showtimes s ON tb.Showtime_ID = s.Showtime_ID
                INNER JOIN ksf00691_team03.Movies m ON s.Movie_ID = m.Movie_ID
                WHERE t.Status = 'Active'
                    AND tb.Status = 'Confirmed'
            `, {
                type: sequelize.QueryTypes.SELECT
            });

            // Filter expired tickets in JavaScript ƒë·ªÉ tr√°nh SQL date conversion issues
            const now = new Date();
            const expiredTicketsFromSQL = [];

            for (const ticket of expiredTickets) {
                try {
                    // Parse show date and time safely
                    let showDateTime;

                    // Handle different date formats
                    if (ticket.Show_Date && ticket.Start_Time) {
                        // Convert Show_Date to proper date format
                        const showDate = new Date(ticket.Show_Date);

                        // Parse Start_Time (could be HH:mm:ss or HH:mm format)
                        const timeStr = ticket.Start_Time.toString();
                        const timeParts = timeStr.split(':');
                        const hours = parseInt(timeParts[0]) || 0;
                        const minutes = parseInt(timeParts[1]) || 0;
                        const seconds = parseInt(timeParts[2]) || 0;

                        // Create combined datetime
                        showDateTime = new Date(showDate);
                        showDateTime.setHours(hours, minutes, seconds, 0);
                    } else {
                        this.logger.warn(`[TicketCancellationService] Invalid date/time for ticket ${ticket.Ticket_ID}`);
                        continue;
                    }

                    // Calculate expected end time (movie duration + grace period)
                    const durationMinutes = parseInt(ticket.Duration) || 0;
                    const expectedEndTime = new Date(showDateTime.getTime() + (durationMinutes + this.gracePeriodMinutes) * 60000);

                    // Check if ticket is expired
                    if (expectedEndTime < now) {
                        const minutesOverdue = Math.floor((now - expectedEndTime) / 60000);

                        expiredTicketsFromSQL.push({
                            Ticket_ID: ticket.Ticket_ID,
                            Booking_ID: ticket.Booking_ID,
                            Showtime_ID: ticket.Showtime_ID,
                            Show_Date: ticket.Show_Date,
                            Start_Time: ticket.Start_Time,
                            End_Time: ticket.End_Time,
                            Movie_Name: ticket.Movie_Name,
                            Duration: ticket.Duration,
                            ExpectedEndTime: expectedEndTime,
                            CurrentTime: now,
                            MinutesOverdue: minutesOverdue
                        });
                    }
                } catch (error) {
                    this.logger.warn(`[TicketCancellationService] L·ªói khi x·ª≠ l√Ω ticket ${ticket.Ticket_ID}:`, error.message);
                }
            }

            this.logger.info(`[TicketCancellationService] T√¨m th·∫•y ${expiredTicketsFromSQL.length} v√© c·∫ßn h·ªßy`);

            if (expiredTicketsFromSQL.length === 0) {
                this.logger.info('[TicketCancellationService] ‚úÖ Kh√¥ng c√≥ v√© n√†o c·∫ßn h·ªßy');
                return {
                    message: 'Kh√¥ng c√≥ v√© qu√° h·∫°n',
                    currentTime: startTime,
                    totalChecks: this.totalChecks,
                    totalCancelledTickets: this.totalCancelledTickets
                };
            }

            // X·ª≠ l√Ω t·ª´ng v√© qu√° h·∫°n
            let cancelledCount = 0;
            const cancelledTickets = [];

            for (const sqlTicket of expiredTicketsFromSQL) {
                try {
                    this.logger.warn(`[TicketCancellationService] V√© #${sqlTicket.Ticket_ID} ƒë√£ qu√° h·∫°n ${sqlTicket.MinutesOverdue} ph√∫t (Phim: ${sqlTicket.Movie_Name})`);

                    const result = await this.cancelExpiredTicket(sqlTicket);
                    if (result.success) {
                        cancelledCount++;
                        cancelledTickets.push(sqlTicket.Ticket_ID);
                        this.totalCancelledTickets++;
                    }

                } catch (error) {
                    this.logger.error(`[TicketCancellationService] L·ªói khi h·ªßy v√© #${sqlTicket.Ticket_ID}:`, error);
                }
            }

            const endTime = new Date();
            const duration = endTime - startTime;

            this.logger.info(`[TicketCancellationService] ‚úÖ Ho√†n th√†nh ki·ªÉm tra: ${cancelledCount}/${expiredTicketsFromSQL.length} v√© ƒë√£ ƒë∆∞·ª£c h·ªßy trong ${duration}ms`);

            return {
                message: `ƒê√£ h·ªßy ${cancelledCount} v√© qu√° h·∫°n`,
                cancelledTickets,
                totalProcessed: expiredTicketsFromSQL.length,
                totalCancelled: cancelledCount,
                duration: `${duration}ms`,
                totalChecks: this.totalChecks,
                totalCancelledTickets: this.totalCancelledTickets
            };

        } catch (error) {
            this.logger.error('[TicketCancellationService] ‚ùå L·ªói trong qu√° tr√¨nh ki·ªÉm tra:', error);
            throw error;
        }
    }

    /**
     * H·ªßy m·ªôt v√© qu√° h·∫°n
     */
    async cancelExpiredTicket(ticketData) {
        const transaction = await sequelize.transaction();

        try {
            // C·∫≠p nh·∫≠t tr·∫°ng th√°i v√© th√†nh 'Cancelled'
            const [updatedRows] = await Ticket.update(
                { 
                    Status: 'Cancelled',
                    Updated_At: new Date()
                },
                { 
                    where: { 
                        Ticket_ID: ticketData.Ticket_ID,
                        Status: 'Active'
                    },
                    transaction 
                }
            );

            if (updatedRows === 0) {
                await transaction.rollback();
                return {
                    success: false,
                    message: `V√© #${ticketData.Ticket_ID} kh√¥ng th·ªÉ h·ªßy (c√≥ th·ªÉ ƒë√£ ƒë∆∞·ª£c h·ªßy tr∆∞·ªõc ƒë√≥)`
                };
            }

            // Log chi ti·∫øt
            this.logger.info(`[TicketCancellationService] ‚úÖ ƒê√£ h·ªßy v√© #${ticketData.Ticket_ID} - Phim: ${ticketData.Movie_Name}, Su·∫•t chi·∫øu: ${ticketData.Show_Date} ${ticketData.Start_Time}`);

            await transaction.commit();

            return {
                success: true,
                message: `ƒê√£ h·ªßy v√© #${ticketData.Ticket_ID}`,
                ticketId: ticketData.Ticket_ID,
                movieName: ticketData.Movie_Name,
                showtime: `${ticketData.Show_Date} ${ticketData.Start_Time}`
            };

        } catch (error) {
            await transaction.rollback();
            this.logger.error(`[TicketCancellationService] L·ªói khi h·ªßy v√© #${ticketData.Ticket_ID}:`, error);
            throw error;
        }
    }

    /**
     * L·∫•y th·ªëng k√™ service
     */
    getStats() {
        return {
            isRunning: this.isRunning,
            totalChecks: this.totalChecks,
            totalCancelledTickets: this.totalCancelledTickets,
            checkInterval: this.checkInterval,
            gracePeriodMinutes: this.gracePeriodMinutes,
            nextCheckIn: this.intervalId ? 'Running' : 'Stopped'
        };
    }

    /**
     * Force check m·ªôt v√© c·ª• th·ªÉ
     */
    async forceCheckTicket(ticketId) {
        try {
            this.logger.info(`[TicketCancellationService] Force check v√© #${ticketId}...`);

            // Ki·ªÉm tra v√© b·∫±ng SQL
            const [sqlCheck] = await sequelize.query(`
                SELECT 
                    t.Ticket_ID,
                    t.Status as Ticket_Status,
                    tb.Status as Booking_Status,
                    s.Show_Date,
                    s.Start_Time,
                    m.Duration,
                    m.Movie_Name,
                    DATEADD(MINUTE, m.Duration + ${this.gracePeriodMinutes}, 
                           CAST(CONCAT(s.Show_Date, ' ', s.Start_Time) AS DATETIME)) as ExpectedEndTime,
                    GETDATE() as CurrentTime,
                    CASE WHEN DATEADD(MINUTE, m.Duration + ${this.gracePeriodMinutes}, 
                                     CAST(CONCAT(s.Show_Date, ' ', s.Start_Time) AS DATETIME)) < GETDATE()
                         THEN 1 ELSE 0 END as IsExpired
                FROM ksf00691_team03.Tickets t
                INNER JOIN ksf00691_team03.Ticket_Bookings tb ON t.Booking_ID = tb.Booking_ID
                INNER JOIN ksf00691_team03.Showtimes s ON tb.Showtime_ID = s.Showtime_ID
                INNER JOIN ksf00691_team03.Movies m ON s.Movie_ID = m.Movie_ID
                WHERE t.Ticket_ID = ${ticketId}
            `);

            if (!sqlCheck || sqlCheck.length === 0) {
                return {
                    success: false,
                    message: `Kh√¥ng t√¨m th·∫•y v√© #${ticketId}`
                };
            }

            const ticketInfo = sqlCheck[0];

            if (ticketInfo.Ticket_Status !== 'Active') {
                return {
                    success: false,
                    message: `V√© #${ticketId} ƒë√£ c√≥ tr·∫°ng th√°i: ${ticketInfo.Ticket_Status}`
                };
            }

            if (ticketInfo.Booking_Status !== 'Confirmed') {
                return {
                    success: false,
                    message: `Booking c·ªßa v√© #${ticketId} ch∆∞a ƒë∆∞·ª£c x√°c nh·∫≠n: ${ticketInfo.Booking_Status}`
                };
            }

            if (!ticketInfo.IsExpired) {
                return {
                    success: false,
                    message: `V√© #${ticketId} ch∆∞a qu√° h·∫°n. Su·∫•t chi·∫øu k·∫øt th√∫c l√∫c: ${ticketInfo.ExpectedEndTime}`
                };
            }

            // V√© ƒë√£ qu√° h·∫°n, ti·∫øn h√†nh h·ªßy
            const result = await this.cancelExpiredTicket(ticketInfo);

            return {
                success: true,
                message: `ƒê√£ force h·ªßy v√© #${ticketId}`,
                result
            };

        } catch (error) {
            this.logger.error(`[TicketCancellationService] L·ªói khi force check v√© #${ticketId}:`, error);
            throw error;
        }
    }
}

module.exports = new TicketCancellationService();
