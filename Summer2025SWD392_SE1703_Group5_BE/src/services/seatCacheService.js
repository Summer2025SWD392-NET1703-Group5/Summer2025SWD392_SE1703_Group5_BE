// src/services/seatCacheService.js
// Service qu·∫£n l√Ω cache Redis cho tr·∫°ng th√°i gh·∫ø t·∫°m th·ªùi

const Redis = require('redis');

class SeatCacheService {
    constructor() {
        // üîß REDIS MODE: S·ª≠ d·ª•ng Redis cache cho production
        // ƒê·ªÉ enable Redis: set USE_REDIS=true trong .env

        const useRedis = process.env.USE_REDIS === 'true' || true; // üîß FIX: Force enable Redis

        if (useRedis) {
            console.log('üîÑ [CACHE] ƒêang k·∫øt n·ªëi Redis...');

            // Kh·ªüi t·∫°o Redis client (s·ª≠ d·ª•ng redis package v5)
            this.redis = Redis.createClient({
                socket: {
                    host: process.env.REDIS_HOST || 'localhost',
                    port: process.env.REDIS_PORT || 6379,
                    connectTimeout: 5000
                },
                password: process.env.REDIS_PASSWORD || undefined,
                database: process.env.REDIS_DB || 0
            });

            this.redis.on('connect', () => {
                console.log('‚úÖ [CACHE] ƒê√£ k·∫øt n·ªëi Redis th√†nh c√¥ng!');
                this.redisAvailable = true;
            });

            this.redis.on('ready', () => {
                console.log('üöÄ [CACHE] Redis s·∫µn s√†ng nh·∫≠n l·ªánh');
                this.redisAvailable = true;

                // Broadcast l·∫°i tr·∫°ng th√°i gh·∫ø cho t·∫•t c·∫£ clients khi Redis reconnect
                this.broadcastSeatsStateAfterReconnect();
            });

            this.redis.on('error', (err) => {
                console.error('‚ùå [CACHE] L·ªói Redis:', err.message || err.code || 'Unknown error');
                this.redisAvailable = false;
            });

            this.redis.on('end', () => {
                console.log('‚ö†Ô∏è [CACHE] K·∫øt n·ªëi Redis ƒë√£ ƒë√≥ng');
                this.redisAvailable = false;
            });

            // Th·ª≠ k·∫øt n·ªëi Redis v√† ƒë·ª£i k·∫øt n·ªëi th√†nh c√¥ng
            this.connectRedis();
        } else {
            console.log('üîß [CACHE] Ch·∫ø ƒë·ªô development: Ch·ªâ s·ª≠ d·ª•ng memory cache');
            this.redis = null;
        }

        // Memory cache cho development ho·∫∑c fallback
        this.memoryCache = new Map(); // { showtimeId: { seatId: seatData } }
        this.userSeats = new Map(); // { userId: Set<seatKey> }
        this.redisAvailable = false; // M·∫∑c ƒë·ªãnh false, ch·ªâ true khi Redis connect th√†nh c√¥ng

        // Timeout cho vi·ªác gi·ªØ gh·∫ø (5 ph√∫t)
        this.SEAT_HOLD_TIMEOUT = 5 * 60; // 5 minutes in seconds

        console.log('‚úÖ SeatCacheService ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o v·ªõi Memory cache');
    }

    /**
     * K·∫øt n·ªëi Redis v·ªõi retry logic
     */
    async connectRedis() {
        if (!this.redis) return;

        try {
            console.log('üîÑ [CACHE] ƒêang k·∫øt n·ªëi Redis...');
            await this.redis.connect();
            console.log('‚úÖ [CACHE] Redis ƒë√£ k·∫øt n·ªëi th√†nh c√¥ng!');
            this.redisAvailable = true;
        } catch (err) {
            console.error('‚ùå [CACHE] Kh√¥ng th·ªÉ k·∫øt n·ªëi Redis:', err.message);
            console.log('üîß [CACHE] S·∫Ω s·ª≠ d·ª•ng memory cache thay th·∫ø');
            this.redisAvailable = false;

            // Retry sau 5 gi√¢y
            setTimeout(() => {
                if (!this.redisAvailable) {
                    console.log('üîÑ [CACHE] Th·ª≠ k·∫øt n·ªëi l·∫°i Redis...');
                    this.connectRedis();
                }
            }, 5000);
        }
    }

    /**
     * Broadcast l·∫°i tr·∫°ng th√°i gh·∫ø sau khi Redis reconnect
     */
    async broadcastSeatsStateAfterReconnect() {
        try {
            // L·∫•y danh s√°ch t·∫•t c·∫£ c√°c showtime ƒëang c√≥ gh·∫ø ƒë∆∞·ª£c ch·ªçn
            const pattern = 'seat:*';
            const keys = await this.redis.keys(pattern);

            if (keys.length > 0) {
                console.log(`üîÑ [CACHE] Redis reconnect - Broadcasting l·∫°i tr·∫°ng th√°i ${keys.length} gh·∫ø`);

                // L·∫•y danh s√°ch showtimes unique
                const showtimes = new Set();
                keys.forEach(key => {
                    const parts = key.split(':');
                    if (parts.length >= 2) {
                        showtimes.add(parts[1]); // showtimeId
                    }
                });

                // Broadcast cho t·ª´ng showtime (n·∫øu c√≥ WebSocket instance)
                if (global.io) {
                    for (const showtimeId of showtimes) {
                        const roomName = `showtime-${showtimeId}`;
                        console.log(`üì° [CACHE] Broadcasting seats-state cho room ${roomName}`);

                        // Trigger refresh cho room n√†y
                        global.io.to(roomName).emit('redis-reconnected', {
                            message: 'Redis ƒë√£ k·∫øt n·ªëi l·∫°i, ƒëang c·∫≠p nh·∫≠t tr·∫°ng th√°i gh·∫ø...'
                        });
                    }
                }
            }
        } catch (error) {
            console.error('‚ùå [CACHE] L·ªói khi broadcast sau Redis reconnect:', error);
        }
    }

    /**
     * T·∫°o key cho gh·∫ø trong Redis
     */
    getSeatKey(showtimeId, seatId) {
        return `seat:${showtimeId}:${seatId}`;
    }

    /**
     * T·∫°o key cho danh s√°ch gh·∫ø c·ªßa user
     */
    getUserSeatsKey(userId) {
        return `user_seats:${userId}`;
    }

    /**
     * Memory fallback methods
     */
    memorySelectSeat(showtimeId, seatId, userId, socketId) {
        if (!this.memoryCache.has(showtimeId)) {
            this.memoryCache.set(showtimeId, new Map());
        }

        const showtimeSeats = this.memoryCache.get(showtimeId);

        // Ki·ªÉm tra conflict
        if (showtimeSeats.has(seatId)) {
            const existingSeat = showtimeSeats.get(seatId);
            if (existingSeat.userId !== userId) {
                return {
                    success: false,
                    message: 'Gh·∫ø ƒëang ƒë∆∞·ª£c ch·ªçn b·ªüi ng∆∞·ªùi d√πng kh√°c',
                    conflictUserId: existingSeat.userId
                };
            }
        }

        const seatData = {
            showtimeId: showtimeId,
            seatId: seatId,
            userId: userId,
            socketId: socketId,
            timestamp: Date.now(),
            status: 'selecting'
        };

        // L∆∞u v√†o memory
        showtimeSeats.set(seatId, seatData);

        // L∆∞u v√†o user seats
        const seatKey = this.getSeatKey(showtimeId, seatId);
        if (!this.userSeats.has(userId)) {
            this.userSeats.set(userId, new Set());
        }
        this.userSeats.get(userId).add(seatKey);

        // console.log(`‚úÖ Memory fallback: ƒê√£ l∆∞u gh·∫ø ${seatId} cho user ${userId}`);
        return {
            success: true,
            seatId: seatId,
            status: 'selecting',
            userId: userId,
            timestamp: seatData.timestamp,
            expiresAt: Date.now() + (this.SEAT_HOLD_TIMEOUT * 1000)
        };
    }

    memoryDeselectSeat(showtimeId, seatId, userId) {
        if (!this.memoryCache.has(showtimeId)) {
            return { success: false, message: 'Showtime kh√¥ng t·ªìn t·∫°i' };
        }

        const showtimeSeats = this.memoryCache.get(showtimeId);

        if (!showtimeSeats.has(seatId)) {
            return { success: false, message: 'Gh·∫ø kh√¥ng t·ªìn t·∫°i' };
        }

        const seatData = showtimeSeats.get(seatId);
        if (seatData.userId !== userId) {
            return { success: false, message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn b·ªè ch·ªçn gh·∫ø n√†y' };
        }

        // X√≥a kh·ªèi memory
        showtimeSeats.delete(seatId);

        // X√≥a kh·ªèi user seats
        const seatKey = this.getSeatKey(showtimeId, seatId);
        if (this.userSeats.has(userId)) {
            this.userSeats.get(userId).delete(seatKey);
            if (this.userSeats.get(userId).size === 0) {
                this.userSeats.delete(userId);
            }
        }

        return {
            success: true,
            seatId: seatId,
            status: 'available'
        };
    }

    memoryReleaseUserSelectingSeats(userId) {
        if (!this.userSeats.has(userId)) {
            return [];
        }

        const userSeatKeys = this.userSeats.get(userId);
        const releasedSeats = [];
        const remainingSeats = [];

        userSeatKeys.forEach(seatKey => {
            const [, showtimeId, seatId] = seatKey.split(':');

            if (this.memoryCache.has(showtimeId)) {
                const showtimeSeats = this.memoryCache.get(showtimeId);
                if (showtimeSeats.has(seatId)) {
                    const seatData = showtimeSeats.get(seatId);

                    // ‚úÖ CH·ªà gi·∫£i ph√≥ng gh·∫ø ƒëang selecting
                    if (seatData.status === 'selecting') {
                        releasedSeats.push({
                            showtimeId: showtimeId,
                            seatId: seatId,
                            userId: seatData.userId,
                            reason: 'user_disconnect_selecting_only'
                        });
                        showtimeSeats.delete(seatId);
                        console.log(`üîÑ Memory: Gi·∫£i ph√≥ng gh·∫ø selecting: ${seatId}`);
                    } else {
                        remainingSeats.push(seatKey);
                        console.log(`üîí Memory: Gi·ªØ nguy√™n gh·∫ø ƒë√£ booked: ${seatId} (status: ${seatData.status})`);
                    }
                }
            }
        });

        // C·∫≠p nh·∫≠t l·∫°i danh s√°ch gh·∫ø c·ªßa user (ch·ªâ gi·ªØ l·∫°i gh·∫ø ƒë√£ booked)
        if (remainingSeats.length > 0) {
            this.userSeats.set(userId, remainingSeats);
        } else {
            this.userSeats.delete(userId);
        }

        return releasedSeats;
    }

    memoryReleaseUserSeats(userId) {
        if (!this.userSeats.has(userId)) {
            return [];
        }

        const userSeatKeys = this.userSeats.get(userId);
        const releasedSeats = [];

        userSeatKeys.forEach(seatKey => {
            const [, showtimeId, seatId] = seatKey.split(':');

            if (this.memoryCache.has(showtimeId)) {
                const showtimeSeats = this.memoryCache.get(showtimeId);
                if (showtimeSeats.has(seatId)) {
                    const seatData = showtimeSeats.get(seatId);
                    releasedSeats.push({
                        showtimeId: showtimeId,
                        seatId: seatId,
                        userId: seatData.userId,
                        reason: 'user_disconnect'
                    });
                    showtimeSeats.delete(seatId);
                }
            }
        });

        // X√≥a user seats
        this.userSeats.delete(userId);

        // console.log(`Memory fallback: ƒê√£ gi·∫£i ph√≥ng ${releasedSeats.length} gh·∫ø cho user ${userId}`);
        return releasedSeats;
    }

    memoryMarkSeatAsBooked(showtimeId, seatId, userId) {
        // console.log(`üîí Memory fallback: ƒê√°nh d·∫•u gh·∫ø ${seatId} l√† booked cho user ${userId}`);

        if (!this.memoryCache.has(showtimeId)) {
            // console.log(`‚ö†Ô∏è Memory: Showtime ${showtimeId} kh√¥ng t·ªìn t·∫°i`);
            return { success: false, message: 'Showtime not found' };
        }

        const showtimeSeats = this.memoryCache.get(showtimeId);
        if (!showtimeSeats.has(seatId)) {
            // console.log(`‚ö†Ô∏è Memory: Gh·∫ø ${seatId} kh√¥ng t·ªìn t·∫°i`);
            return { success: false, message: 'Seat not found' };
        }

        const seatData = showtimeSeats.get(seatId);

        // Ki·ªÉm tra ownership
        if (seatData.userId !== userId) {
            console.log(`‚ùå Memory: User ${userId} kh√¥ng c√≥ quy·ªÅn mark gh·∫ø ${seatId} (owner: ${seatData.userId})`);
            return { success: false, message: 'Not seat owner' };
        }

        // C·∫≠p nh·∫≠t status th√†nh 'booked'
        const updatedSeatData = {
            ...seatData,
            status: 'booked',
            bookedAt: Date.now()
        };

        showtimeSeats.set(seatId, updatedSeatData);

        console.log(`‚úÖ Memory: ƒê√£ ƒë√°nh d·∫•u gh·∫ø ${seatId} l√† booked cho user ${userId}`);
        return { success: true, seatId, status: 'booked', userId };
    }

    /**
     * Memory fallback ƒë·ªÉ l·∫•y tr·∫°ng th√°i gh·∫ø t·ª´ memory cache
     */
    memoryGetShowtimeSeats(showtimeId) {
        if (!this.memoryCache.has(showtimeId)) {
            return {};
        }

        const showtimeSeats = this.memoryCache.get(showtimeId);
        const result = {};

        // Convert Map to object
        showtimeSeats.forEach((value, key) => {
            result[key] = value;
            
            // ƒê·∫£m b·∫£o c√°c thu·ªôc t√≠nh isBooked v√† isAvailable ƒë∆∞·ª£c thi·∫øt l·∫≠p ƒë√∫ng
            if (value.status === 'booked') {
                result[key].isBooked = true;
                result[key].isAvailable = false;
            } else if (value.status === 'selecting') {
                result[key].isSelecting = true;
                result[key].isAvailable = false;
            } else {
                result[key].isAvailable = true;
                result[key].isBooked = false;
                result[key].isSelecting = false;
            }
        });

        return result;
    }

    /**
     * Ch·ªçn gh·∫ø - l∆∞u v√†o Redis v·ªõi TTL
     */
    async selectSeat(showtimeId, seatId, userId, socketId) {
        // Ki·ªÉm tra Redis c√≥ kh·∫£ d·ª•ng kh√¥ng
        if (!this.redisAvailable) {
            return this.memorySelectSeat(showtimeId, seatId, userId, socketId);
        }

        try {
            console.log(`üéØ User ${userId} ch·ªçn gh·∫ø ${seatId} trong su·∫•t chi·∫øu ${showtimeId} (Redis)`);

            const seatKey = this.getSeatKey(showtimeId, seatId);
            const userSeatsKey = this.getUserSeatsKey(userId);

            // Ki·ªÉm tra gh·∫ø ƒë√£ ƒë∆∞·ª£c ch·ªçn ch∆∞a
            const existingSeat = await this.redis.get(seatKey);
            if (existingSeat) {
                const seatData = JSON.parse(existingSeat);
                if (seatData.userId !== userId) {
                    return {
                        success: false,
                        message: 'Gh·∫ø ƒëang ƒë∆∞·ª£c ch·ªçn b·ªüi ng∆∞·ªùi d√πng kh√°c',
                        conflictUserId: seatData.userId
                    };
                }
            }

            // L∆∞u th√¥ng tin gh·∫ø v·ªõi TTL
            const seatData = {
                status: 'selecting',
                userId: userId,
                socketId: socketId,
                timestamp: Date.now(),
                showtimeId: showtimeId,
                seatId: seatId
            };

            // S·ª≠ d·ª•ng c√°c l·ªánh ri√™ng l·∫ª (Redis package v5 API)
            await this.redis.setEx(seatKey, this.SEAT_HOLD_TIMEOUT, JSON.stringify(seatData));
            await this.redis.sAdd(userSeatsKey, seatKey);
            await this.redis.expire(userSeatsKey, this.SEAT_HOLD_TIMEOUT);

            console.log(`‚úÖ Gh·∫ø ${seatId} ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o Redis v·ªõi TTL ${this.SEAT_HOLD_TIMEOUT}s`);
            return {
                success: true,
                seatId: seatId,
                status: 'selecting',
                userId: userId,
                timestamp: seatData.timestamp,
                expiresAt: Date.now() + (this.SEAT_HOLD_TIMEOUT * 1000)
            };

        } catch (error) {
            console.error(`‚ùå L·ªói khi ch·ªçn gh·∫ø trong Redis:`, error);
            // console.log('Redis kh√¥ng kh·∫£ d·ª•ng, s·ª≠ d·ª•ng memory fallback ƒë·ªÉ ch·ªçn gh·∫ø');
            this.redisAvailable = false;
            return this.memorySelectSeat(showtimeId, seatId, userId, socketId);
        }
    }

    /**
     * B·ªè ch·ªçn gh·∫ø - x√≥a kh·ªèi Redis
     */
    async deselectSeat(showtimeId, seatId, userId) {
        // Ki·ªÉm tra Redis c√≥ kh·∫£ d·ª•ng kh√¥ng
        if (!this.redisAvailable) {
            return this.memoryDeselectSeat(showtimeId, seatId, userId);
        }

        try {
            console.log(`üîÑ User ${userId} b·ªè ch·ªçn gh·∫ø ${seatId} trong su·∫•t chi·∫øu ${showtimeId} (Redis)`);

            const seatKey = this.getSeatKey(showtimeId, seatId);
            const userSeatsKey = this.getUserSeatsKey(userId);

            // Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu gh·∫ø
            const existingSeat = await this.redis.get(seatKey);
            if (!existingSeat) {
                return {
                    success: true,
                    message: 'Gh·∫ø kh√¥ng trong tr·∫°ng th√°i ƒë∆∞·ª£c ch·ªçn'
                };
            }

            const seatData = JSON.parse(existingSeat);
            
            // FIX: Cho ph√©p force deselect khi c·∫ßn thi·∫øt
            const isAdmin = userId === 'admin' || userId === 'system';
            if (seatData.userId !== userId && !isAdmin) {
                console.log(`‚ö†Ô∏è T·ª´ ch·ªëi b·ªè ch·ªçn: User ${userId} kh√¥ng s·ªü h·ªØu gh·∫ø ${seatId} (s·ªü h·ªØu b·ªüi ${seatData.userId})`);
                return {
                    success: false,
                    message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn b·ªè ch·ªçn gh·∫ø n√†y'
                };
            }

            // X√≥a gh·∫ø kh·ªèi Redis (s·ª≠ d·ª•ng c√°c l·ªánh ri√™ng l·∫ª)
            await this.redis.del(seatKey);

            // N·∫øu l√† ch√≠nh ch·ªß gh·∫ø, x√≥a kh·ªèi danh s√°ch c·ªßa h·ªç
            if (seatData.userId === userId) {
                await this.redis.sRem(userSeatsKey, seatKey);
            } else if (isAdmin) {
                // N·∫øu l√† admin/system force deselect, x√≥a kh·ªèi danh s√°ch c·ªßa ch·ªß gh·∫ø
                const ownerSeatsKey = this.getUserSeatsKey(seatData.userId);
                await this.redis.sRem(ownerSeatsKey, seatKey);
                console.log(`üîÑ Admin/system force deselect gh·∫ø ${seatId} c·ªßa user ${seatData.userId}`);
            }

            console.log(`‚úÖ Gh·∫ø ${seatId} ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi Redis`);
            return {
                success: true,
                seatId: seatId,
                status: 'available'
            };

        } catch (error) {
            console.error(`‚ùå L·ªói khi b·ªè ch·ªçn gh·∫ø trong Redis:`, error);
            // console.log('Redis kh√¥ng kh·∫£ d·ª•ng, s·ª≠ d·ª•ng memory fallback ƒë·ªÉ b·ªè ch·ªçn gh·∫ø');
            this.redisAvailable = false;
            return this.memoryDeselectSeat(showtimeId, seatId, userId);
        }
    }

    /**
     * ƒê√°nh d·∫•u gh·∫ø l√† ƒë√£ booked (sau khi booking th√†nh c√¥ng)
     */
    async markSeatAsBooked(showtimeId, seatId, userId) {
        // Ki·ªÉm tra Redis c√≥ kh·∫£ d·ª•ng kh√¥ng
        if (!this.redisAvailable) {
            // console.log('Redis kh√¥ng kh·∫£ d·ª•ng, s·ª≠ d·ª•ng memory fallback ƒë·ªÉ mark seat as booked');
            return this.memoryMarkSeatAsBooked(showtimeId, seatId, userId);
        }

        try {
            console.log(`üîí ƒê√°nh d·∫•u gh·∫ø ${seatId} l√† ƒë√£ booked cho user ${userId}`);

            const seatKey = this.getSeatKey(showtimeId, seatId);
            const userSeatsKey = this.getUserSeatsKey(userId);

            // L·∫•y th√¥ng tin gh·∫ø hi·ªán t·∫°i
            const existingSeat = await this.redis.get(seatKey);
            if (!existingSeat) {
                console.log(`‚ö†Ô∏è Gh·∫ø ${seatId} kh√¥ng t·ªìn t·∫°i trong Redis`);
                return { success: false, message: 'Seat not found' };
            }

            const seatData = JSON.parse(existingSeat);

            // Ki·ªÉm tra ownership
            if (seatData.userId !== userId) {
                console.log(`‚ùå User ${userId} kh√¥ng c√≥ quy·ªÅn mark gh·∫ø ${seatId} (owner: ${seatData.userId})`);
                return { success: false, message: 'Not seat owner' };
            }

            // C·∫≠p nh·∫≠t status th√†nh 'booked' v√† remove TTL (gh·∫ø booked kh√¥ng expire)
            const updatedSeatData = {
                ...seatData,
                status: 'booked',
                bookedAt: Date.now()
            };

            // S·ª≠ d·ª•ng c√°c l·ªánh ri√™ng l·∫ª ƒë·ªÉ c·∫≠p nh·∫≠t
            // L∆∞u gh·∫ø v·ªõi status 'booked' KH√îNG c√≥ TTL (persist forever)
            await this.redis.set(seatKey, JSON.stringify(updatedSeatData));

            // Gh·∫ø booked v·∫´n thu·ªôc v·ªÅ user nh∆∞ng kh√¥ng expire
            await this.redis.persist(userSeatsKey);

            console.log(`‚úÖ ƒê√£ ƒë√°nh d·∫•u gh·∫ø ${seatId} l√† booked cho user ${userId}`);
            return { success: true, seatId, status: 'booked', userId };

        } catch (error) {
            console.error(`‚ùå L·ªói khi mark seat as booked trong Redis:`, error);
            // console.log('Redis kh√¥ng kh·∫£ d·ª•ng, s·ª≠ d·ª•ng memory fallback ƒë·ªÉ mark seat as booked');
            this.redisAvailable = false;
            return this.memoryMarkSeatAsBooked(showtimeId, seatId, userId);
        }
    }

    /**
     * L·∫•y tr·∫°ng th√°i gh·∫ø t·ª´ cache Redis
     * @param {string} showtimeId - ID c·ªßa su·∫•t chi·∫øu
     * @returns {Object} - ƒê·ªëi t∆∞·ª£ng ch·ª©a th√¥ng tin gh·∫ø ƒëang ƒë∆∞·ª£c ch·ªçn
     */
    async getShowtimeSeats(showtimeId) {
        try {
            console.log(`üîÑ [CACHE] L·∫•y tr·∫°ng th√°i gh·∫ø cho showtime ${showtimeId}`);

            // N·∫øu Redis kh√¥ng kh·∫£ d·ª•ng, d√πng memory cache
            if (!this.redisAvailable) {
                console.log(`üîß [CACHE] S·ª≠ d·ª•ng memory cache`);
                return this.memoryGetShowtimeSeats(showtimeId);
            }

            // L·∫•y t·∫•t c·∫£ gh·∫ø c·ªßa showtime t·ª´ Redis
            const pattern = `seat:${showtimeId}:*`;
            console.log(`üîß [CACHE] ƒêang t√¨m keys v·ªõi pattern: ${pattern}`);
            const keys = await this.redis.keys(pattern);
            console.log(`üîß [CACHE] T√¨m th·∫•y ${keys ? keys.length : 0} keys`);

            // N·∫øu kh√¥ng c√≥ gh·∫ø n√†o trong Redis, ki·ªÉm tra database
            if (!keys || keys.length === 0) {
                console.log(`‚ö†Ô∏è [CACHE] Kh√¥ng c√≥ gh·∫ø n√†o trong Redis cho showtime ${showtimeId}, ki·ªÉm tra database...`);
                
                // ‚úÖ S·ª¨A: S·ª≠ d·ª•ng mssql connection tr·ª±c ti·∫øp thay v√¨ Sequelize
                try {
                    console.log(`üîß [CACHE] Truy v·∫•n database cho showtime ${showtimeId}...`);
                    const { getConnection } = require('../config/database');

                    // S·ª≠ d·ª•ng mssql connection tr·ª±c ti·∫øp
                    const pool = await getConnection();
                    const request = pool.request();
                    request.input('showtimeId', showtimeId);

                    // ‚úÖ S·ª¨A: Query t·ª´ b·∫£ng Tickets thay v√¨ Seats v√¨ Seats kh√¥ng c√≥ User_ID, Status, Showtime_ID
                    const result = await request.query(`
                        SELECT
                            t.Ticket_ID,
                            t.Seat_ID,
                            s.Layout_ID,
                            s.Seat_Number,
                            tb.Status,
                            tb.User_ID,
                            sl.Row_Label,
                            sl.Column_Number
                        FROM [ksf00691_team03].[Tickets] t
                        INNER JOIN [ksf00691_team03].[Ticket_Bookings] tb ON t.Booking_ID = tb.Booking_ID
                        INNER JOIN [ksf00691_team03].[Seats] s ON t.Seat_ID = s.Seat_ID
                        LEFT JOIN [ksf00691_team03].[Seat_Layout] sl ON s.Layout_ID = sl.Layout_ID
                        WHERE t.Showtime_ID = @showtimeId
                        AND tb.Status IN ('Confirmed', 'Pending')
                    `);

                    const bookedSeats = result.recordset;
                    console.log(`‚úÖ [CACHE] Database query th√†nh c√¥ng, t√¨m th·∫•y ${bookedSeats.length} gh·∫ø ƒë√£ ƒë·∫∑t`);
                    
                    // T·∫°o ƒë·ªëi t∆∞·ª£ng l∆∞u tr·ªØ gh·∫ø ƒë√£ ƒë·∫∑t
                    const databaseSeats = {};
                    
                    // Th√™m gh·∫ø t·ª´ database v√†o ƒë·ªëi t∆∞·ª£ng k·∫øt qu·∫£
                    bookedSeats.forEach(seat => {
                        if (seat.Row_Label && seat.Column_Number) {
                            const seatId = `${seat.Row_Label}${seat.Column_Number}`;
                            const status = seat.Status === 'Pending' ? 'pending' : 'booked';

                            console.log(`‚úÖ [CACHE] Gh·∫ø ${seatId} c√≥ tr·∫°ng th√°i ${status} trong database`);

                            databaseSeats[seatId] = {
                                status: status,
                                userId: seat.User_ID || 'system',
                                timestamp: Date.now(),
                                isBooked: status === 'booked',
                                isPending: status === 'pending',
                                isAvailable: false
                            };
                        }
                    });
                    
                    // L∆∞u k·∫øt qu·∫£ v√†o Redis ƒë·ªÉ s·ª≠ d·ª•ng l·∫ßn sau
                    if (Object.keys(databaseSeats).length > 0) {
                        await this.redis.setEx(`showtime:${showtimeId}:seats`, 300, JSON.stringify(databaseSeats)); // Cache 5 ph√∫t
                        console.log(`üíæ [CACHE] ƒê√£ l∆∞u ${Object.keys(databaseSeats).length} gh·∫ø v√†o Redis`);
                    }
                    
                    return databaseSeats;
                } catch (dbError) {
                    console.error(`‚ùå [CACHE] L·ªói khi truy v·∫•n database:`, {
                        message: dbError.message,
                        name: dbError.name,
                        sql: dbError.sql,
                        stack: dbError.stack
                    });
                    console.log(`üîß [CACHE] Fallback: Tr·∫£ v·ªÅ empty object cho showtime ${showtimeId}`);
                    // Tr·∫£ v·ªÅ empty object thay v√¨ throw error ƒë·ªÉ kh√¥ng l√†m crash app
                    return {};
                }
            }

            // L·∫•y d·ªØ li·ªáu c·ªßa t·∫•t c·∫£ gh·∫ø
            const seatData = await Promise.all(keys.map(async (key) => {
                try {
                    const result = await this.redis.get(key);
                    if (result) {
                        const data = JSON.parse(result);
                        return { key, data };
                    } else {
                        return { key, data: null };
                    }
                } catch (e) {
                    return { key, data: null };
                }
            }));

            // T·∫°o object k·∫øt qu·∫£
            const result = {};
            seatData.forEach(({ key, data }) => {
                if (data) {
                    const seatId = key.split(':')[2]; // L·∫•y seatId t·ª´ key
                    
                    result[seatId] = data;
                    
                    // ƒê·∫£m b·∫£o c√°c thu·ªôc t√≠nh isBooked v√† isAvailable ƒë∆∞·ª£c thi·∫øt l·∫≠p ƒë√∫ng
                    if (data.status === 'booked') {
                        result[seatId].isBooked = true;
                        result[seatId].isAvailable = false;
                    } else if (data.status === 'pending') {
                        result[seatId].isPending = true;
                        result[seatId].isAvailable = false;
                    } else if (data.status === 'selecting') {
                        result[seatId].isSelecting = true;
                        result[seatId].isAvailable = false;
                    } else {
                        result[seatId].isAvailable = true;
                        result[seatId].isBooked = false;
                        result[seatId].isSelecting = false;
                        result[seatId].isPending = false;
                    }
                }
            });

            return result;

        } catch (error) {
            console.error(`‚ùå [CACHE] L·ªói khi l·∫•y tr·∫°ng th√°i gh·∫ø:`, error);
            
            // Fallback v·ªÅ memory cache n·∫øu Redis l·ªói
            console.warn(`‚ö†Ô∏è [CACHE] Fallback v·ªÅ memory cache`);
            return this.memoryGetShowtimeSeats(showtimeId);
        }
    }

    /**
     * Gi·∫£i ph√≥ng CH·ªà gh·∫ø ƒëang selecting c·ªßa user (KH√îNG gi·∫£i ph√≥ng gh·∫ø ƒë√£ booked)
     */
    async releaseUserSelectingSeats(userId) {
        // Ki·ªÉm tra Redis c√≥ kh·∫£ d·ª•ng kh√¥ng
        if (!this.redisAvailable) {
            // console.log('Redis kh√¥ng kh·∫£ d·ª•ng, s·ª≠ d·ª•ng memory fallback ƒë·ªÉ gi·∫£i ph√≥ng gh·∫ø selecting');
            return this.memoryReleaseUserSelectingSeats(userId);
        }

        try {
            console.log(`üîÑ Redis: Gi·∫£i ph√≥ng CH·ªà gh·∫ø ƒëang selecting c·ªßa user ${userId}`);

            // L·∫•y danh s√°ch gh·∫ø c·ªßa user
            const userSeatsKey = `user_seats:${userId}`;
            const seatIds = await this.redis.sMembers(userSeatsKey);

            if (seatIds.length === 0) {
                console.log(`üìù User ${userId} kh√¥ng c√≥ gh·∫ø n√†o ƒëang selecting`);
                return [];
            }

            console.log(`üìù User ${userId} c√≥ ${seatIds.length} gh·∫ø: ${seatIds.join(', ')}`);

            // T·∫°o keys cho t·∫•t c·∫£ gh·∫ø
            const seatKeys = seatIds.map(seatId => `seat:${seatId}`);

            // L·∫•y th√¥ng tin gh·∫ø tr∆∞·ªõc khi x√≥a
            const seatDataArray = await this.redis.mGet(seatKeys);
            const releasedSeats = [];

            // CH·ªà x√≥a gh·∫ø c√≥ status = 'selecting', KH√îNG x√≥a gh·∫ø 'booked'
            for (let index = 0; index < seatKeys.length; index++) {
                const seatKey = seatKeys[index];
                if (seatDataArray[index]) {
                    try {
                        const seatData = JSON.parse(seatDataArray[index]);

                        // ‚úÖ CH·ªà gi·∫£i ph√≥ng gh·∫ø ƒëang selecting
                        if (seatData.status === 'selecting') {
                            await this.redis.del(seatKey);
                            await this.redis.sRem(userSeatsKey, seatIds[index]);

                            releasedSeats.push({
                                showtimeId: seatData.showtimeId,
                                seatId: seatData.seatId,
                                userId: seatData.userId,
                                reason: 'user_disconnect_selecting_only'
                            });

                            console.log(`üîÑ Gi·∫£i ph√≥ng gh·∫ø selecting: ${seatData.seatId}`);
                        } else {
                            console.log(`üîí Gi·ªØ nguy√™n gh·∫ø ƒë√£ booked: ${seatData.seatId} (status: ${seatData.status})`);
                        }
                    } catch (parseError) {
                        console.error(`‚ùå L·ªói parse d·ªØ li·ªáu gh·∫ø ${seatKey}:`, parseError);
                    }
                }
            }

            console.log(`‚úÖ ƒê√£ gi·∫£i ph√≥ng ${releasedSeats.length} gh·∫ø selecting cho user ${userId} t·ª´ Redis`);
            return releasedSeats;

        } catch (error) {
            console.error(`‚ùå L·ªói khi gi·∫£i ph√≥ng gh·∫ø selecting t·ª´ Redis:`, error);
            console.log('Redis kh√¥ng kh·∫£ d·ª•ng, s·ª≠ d·ª•ng memory fallback ƒë·ªÉ gi·∫£i ph√≥ng gh·∫ø selecting');
            this.redisAvailable = false;
            return this.memoryReleaseUserSelectingSeats(userId);
        }
    }

    /**
     * Gi·∫£i ph√≥ng t·∫•t c·∫£ gh·∫ø c·ªßa m·ªôt user (bao g·ªìm c·∫£ booked - CH·ªà d√πng cho admin)
     */
    async releaseUserSeats(userId) {
        // Ki·ªÉm tra Redis c√≥ kh·∫£ d·ª•ng kh√¥ng
        if (!this.redisAvailable) {
            console.log('Redis kh√¥ng kh·∫£ d·ª•ng, s·ª≠ d·ª•ng memory fallback ƒë·ªÉ gi·∫£i ph√≥ng gh·∫ø user');
            return this.memoryReleaseUserSeats(userId);
        }

        try {
            console.log(`üîÑ Gi·∫£i ph√≥ng t·∫•t c·∫£ gh·∫ø c·ªßa user ${userId} t·ª´ Redis`);

            const userSeatsKey = this.getUserSeatsKey(userId);

            // L·∫•y danh s√°ch t·∫•t c·∫£ gh·∫ø c·ªßa user
            const seatKeys = await this.redis.sMembers(userSeatsKey);

            if (seatKeys.length === 0) {
                console.log(`‚ÑπÔ∏è User ${userId} kh√¥ng c√≥ gh·∫ø n√†o ƒë·ªÉ gi·∫£i ph√≥ng`);
                return [];
            }

            // L·∫•y th√¥ng tin gh·∫ø tr∆∞·ªõc khi x√≥a
            const seatDataArray = await this.redis.mGet(seatKeys);
            const releasedSeats = [];

            // X√≥a t·∫•t c·∫£ gh·∫ø (s·ª≠ d·ª•ng c√°c l·ªánh ri√™ng l·∫ª)
            for (let index = 0; index < seatKeys.length; index++) {
                const seatKey = seatKeys[index];
                await this.redis.del(seatKey);

                if (seatDataArray[index]) {
                    try {
                        const seatData = JSON.parse(seatDataArray[index]);
                        releasedSeats.push({
                            showtimeId: seatData.showtimeId,
                            seatId: seatData.seatId,
                            userId: seatData.userId,
                            reason: 'user_disconnect'
                        });
                    } catch (parseError) {
                        console.error(`‚ùå L·ªói parse d·ªØ li·ªáu gh·∫ø ${seatKey}:`, parseError);
                    }
                }
            }

            // X√≥a danh s√°ch gh·∫ø c·ªßa user
            await this.redis.del(userSeatsKey);

            console.log(`‚úÖ ƒê√£ gi·∫£i ph√≥ng ${releasedSeats.length} gh·∫ø cho user ${userId} t·ª´ Redis`);
            return releasedSeats;

        } catch (error) {
            console.error(`‚ùå L·ªói khi gi·∫£i ph√≥ng gh·∫ø user t·ª´ Redis:`, error);
            console.log('Redis kh√¥ng kh·∫£ d·ª•ng, s·ª≠ d·ª•ng memory fallback ƒë·ªÉ gi·∫£i ph√≥ng gh·∫ø user');
            this.redisAvailable = false;
            return this.memoryReleaseUserSeats(userId);
        }
    }

    /**
     * X√≥a gh·∫ø booked kh·ªèi cache (d√πng khi h·ªßy booking)
     * @param {string} showtimeId - ID c·ªßa su·∫•t chi·∫øu
     * @param {string} seatId - ID c·ªßa gh·∫ø
     * @param {string} userId - ID c·ªßa user
     * @returns {Object} - K·∫øt qu·∫£ x√≥a gh·∫ø
     */
    async removeBookedSeat(showtimeId, seatId, userId) {
        try {
            console.log(`üóëÔ∏è [CACHE] X√≥a gh·∫ø booked ${seatId} c·ªßa user ${userId} t·ª´ showtime ${showtimeId}`);

            // N·∫øu Redis kh√¥ng kh·∫£ d·ª•ng, d√πng memory cache
            if (!this.redisAvailable) {
                return this.memoryRemoveBookedSeat(showtimeId, seatId, userId);
            }

            const seatKey = `seat:${showtimeId}:${seatId}`;
            const userSeatsKey = `user_seats:${userId}`;

            // Ki·ªÉm tra gh·∫ø c√≥ t·ªìn t·∫°i v√† thu·ªôc v·ªÅ user kh√¥ng
            const seatData = await this.redis.get(seatKey);
            if (!seatData) {
                console.log(`‚ö†Ô∏è [CACHE] Gh·∫ø ${seatId} kh√¥ng t·ªìn t·∫°i trong cache`);
                return { success: false, reason: 'seat_not_found' };
            }

            const parsedSeatData = JSON.parse(seatData);
            if (parsedSeatData.userId !== userId) {
                console.log(`‚ö†Ô∏è [CACHE] Gh·∫ø ${seatId} kh√¥ng thu·ªôc v·ªÅ user ${userId}`);
                return { success: false, reason: 'not_owner' };
            }

            // X√≥a gh·∫ø kh·ªèi Redis
            await this.redis.del(seatKey);
            await this.redis.sRem(userSeatsKey, `seat:${showtimeId}:${seatId}`);

            console.log(`‚úÖ [CACHE] ƒê√£ x√≥a gh·∫ø booked ${seatId} kh·ªèi Redis`);
            return {
                success: true,
                seatId: seatId,
                userId: userId,
                showtimeId: showtimeId,
                status: 'removed'
            };

        } catch (error) {
            console.error(`‚ùå [CACHE] L·ªói khi x√≥a gh·∫ø booked t·ª´ Redis:`, error);
            this.redisAvailable = false;
            return this.memoryRemoveBookedSeat(showtimeId, seatId, userId);
        }
    }

    /**
     * Memory fallback: X√≥a gh·∫ø booked kh·ªèi memory cache
     */
    memoryRemoveBookedSeat(showtimeId, seatId, userId) {
        try {
            console.log(`üóëÔ∏è [MEMORY] X√≥a gh·∫ø booked ${seatId} c·ªßa user ${userId} t·ª´ showtime ${showtimeId}`);

            if (!this.memoryCache.has(showtimeId)) {
                return { success: false, reason: 'showtime_not_found' };
            }

            const showtimeSeats = this.memoryCache.get(showtimeId);
            if (!showtimeSeats.has(seatId)) {
                return { success: false, reason: 'seat_not_found' };
            }

            const seatData = showtimeSeats.get(seatId);
            if (seatData.userId !== userId) {
                return { success: false, reason: 'not_owner' };
            }

            // X√≥a gh·∫ø kh·ªèi memory
            showtimeSeats.delete(seatId);

            // X√≥a kh·ªèi user seats
            if (this.userSeats.has(userId)) {
                const userSeatKeys = this.userSeats.get(userId);
                const seatKey = `seat:${showtimeId}:${seatId}`;
                const updatedUserSeats = userSeatKeys.filter(key => key !== seatKey);

                if (updatedUserSeats.length > 0) {
                    this.userSeats.set(userId, updatedUserSeats);
                } else {
                    this.userSeats.delete(userId);
                }
            }

            console.log(`‚úÖ [MEMORY] ƒê√£ x√≥a gh·∫ø booked ${seatId} kh·ªèi memory`);
            return {
                success: true,
                seatId: seatId,
                userId: userId,
                showtimeId: showtimeId,
                status: 'removed'
            };

        } catch (error) {
            console.error(`‚ùå [MEMORY] L·ªói khi x√≥a gh·∫ø booked t·ª´ memory:`, error);
            return { success: false, reason: 'memory_error' };
        }
    }

    /**
     * Extend th·ªùi gian gi·ªØ gh·∫ø
     */
    async extendSeatHold(showtimeId, seatId, userId, extensionSeconds = 300) {
        try {
            const seatKey = this.getSeatKey(showtimeId, seatId);
            const userSeatsKey = this.getUserSeatsKey(userId);
            
            // Ki·ªÉm tra gh·∫ø t·ªìn t·∫°i v√† quy·ªÅn s·ªü h·ªØu
            const existingSeat = await this.redis.get(seatKey);
            if (!existingSeat) {
                return {
                    success: false,
                    message: 'Gh·∫ø kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ h·∫øt h·∫°n'
                };
            }

            const seatData = JSON.parse(existingSeat);
            if (seatData.userId !== userId) {
                return {
                    success: false,
                    message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn extend gh·∫ø n√†y'
                };
            }

            // Extend TTL (s·ª≠ d·ª•ng c√°c l·ªánh ri√™ng l·∫ª)
            await this.redis.expire(seatKey, this.SEAT_HOLD_TIMEOUT + extensionSeconds);
            await this.redis.expire(userSeatsKey, this.SEAT_HOLD_TIMEOUT + extensionSeconds);

            console.log(`‚è∞ Extended seat hold: User ${userId}, Seat ${seatId}, Extension: ${extensionSeconds}s`);
            return {
                success: true,
                newExpiryTime: Date.now() + ((this.SEAT_HOLD_TIMEOUT + extensionSeconds) * 1000),
                message: `ƒê√£ gia h·∫°n gh·∫ø th√™m ${extensionSeconds/60} ph√∫t`
            };

        } catch (error) {
            console.error(`‚ùå L·ªói khi extend seat hold trong Redis:`, error);
            return {
                success: false,
                message: 'L·ªói khi gia h·∫°n gh·∫ø'
            };
        }
    }

    /**
     * L·∫•y th·ªëng k√™ Redis
     */
    async getStatistics() {
        try {
            const seatKeys = await this.redis.keys('seat:*');
            const userKeys = await this.redis.keys('user_seats:*');
            
            return {
                totalSeatsInCache: seatKeys.length,
                totalUsersWithSeats: userKeys.length,
                redisMemoryUsage: await this.redis.memory('usage'),
                cacheTimeout: this.SEAT_HOLD_TIMEOUT
            };
        } catch (error) {
            console.error(`‚ùå L·ªói khi l·∫•y th·ªëng k√™ Redis:`, error);
            return {
                totalSeatsInCache: 0,
                totalUsersWithSeats: 0,
                error: error.message
            };
        }
    }

    /**
     * ƒê√≥ng k·∫øt n·ªëi Redis
     */
    async disconnect() {
        try {
            await this.redis.quit();
            console.log('‚úÖ ƒê√£ ƒë√≥ng k·∫øt n·ªëi Redis');
        } catch (error) {
            console.error('‚ùå L·ªói khi ƒë√≥ng k·∫øt n·ªëi Redis:', error);
        }
    }
}

// Export singleton instance
module.exports = new SeatCacheService();