const { SeatLayout, Seat, Ticket, TicketBooking, sequelize } = require('../models');
const { Op } = require('sequelize');
const logger = require('../utils/logger');

/**
 * SEAT BOOKING RULES SERVICE
 * X·ª≠ l√Ω c√°c quy t·∫Øc nghi·ªáp v·ª• khi ƒë·∫∑t gh·∫ø r·∫°p chi·∫øu phim
 * 
 * PRIORITY 1 RULES:
 * 1. Adjacent Seat Rule - Gh·∫ø ph·∫£i li·ªÅn k·ªÅ nhau
 * 2. Gap Prevention Rule - Kh√¥ng ƒë·ªÉ tr·ªëng gh·∫ø l·∫ª
 */
class SeatBookingRulesService {

    /**
     * üî¥ PRIORITY 1: ADJACENT SEAT RULE
     * Validate gh·∫ø ph·∫£i li·ªÅn k·ªÅ nhau khi ƒë·∫∑t >= 2 gh·∫ø
     */
    async validateAdjacentSeats(selectedLayoutIds, showtimeId, transaction = null) {
        try {
            logger.info(`[validateAdjacentSeats] Ki·ªÉm tra gh·∫ø li·ªÅn k·ªÅ cho ${selectedLayoutIds.length} gh·∫ø`);

            // N·∫øu ch·ªâ ƒë·∫∑t 1 gh·∫ø, kh√¥ng c·∫ßn ki·ªÉm tra li·ªÅn k·ªÅ
            if (selectedLayoutIds.length <= 1) {
                return {
                    valid: true,
                    message: 'Ch·ªâ 1 gh·∫ø ƒë∆∞·ª£c ch·ªçn, kh√¥ng c·∫ßn ki·ªÉm tra li·ªÅn k·ªÅ'
                };
            }

            // L·∫•y th√¥ng tin layout c·ªßa c√°c gh·∫ø ƒë∆∞·ª£c ch·ªçn
            const selectedLayouts = await SeatLayout.findAll({
                where: {
                    Layout_ID: { [Op.in]: selectedLayoutIds },
                    Is_Active: true
                },
                attributes: ['Layout_ID', 'Row_Label', 'Column_Number', 'Cinema_Room_ID'],
                transaction
            });

            if (selectedLayouts.length !== selectedLayoutIds.length) {
                throw new Error('M·ªôt s·ªë gh·∫ø kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng ho·∫°t ƒë·ªông');
            }

            // Ki·ªÉm tra t·∫•t c·∫£ gh·∫ø c√πng ph√≤ng chi·∫øu
            const roomIds = [...new Set(selectedLayouts.map(l => l.Cinema_Room_ID))];
            if (roomIds.length > 1) {
                return {
                    valid: false,
                    errorCode: 'DIFFERENT_ROOMS',
                    message: 'T·∫•t c·∫£ gh·∫ø ph·∫£i trong c√πng m·ªôt ph√≤ng chi·∫øu'
                };
            }

            // Nh√≥m gh·∫ø theo h√†ng
            const seatsByRow = this._groupSeatsByRow(selectedLayouts);

            // Validate t·ª´ng h√†ng
            for (const [rowLabel, seats] of Object.entries(seatsByRow)) {
                const rowValidation = this._validateSingleRowAdjacency(seats, rowLabel);
                if (!rowValidation.valid) {
                    return rowValidation;
                }
            }

            // Ki·ªÉm tra multiple rows (n·∫øu c√≥)
            if (Object.keys(seatsByRow).length > 1) {
                const multiRowValidation = this._validateMultipleRowsAdjacency(seatsByRow);
                if (!multiRowValidation.valid) {
                    return multiRowValidation;
                }
            }

            logger.info(`[validateAdjacentSeats] ‚úÖ T·∫•t c·∫£ gh·∫ø ƒë·ªÅu li·ªÅn k·ªÅ h·ª£p l·ªá`);
            return {
                valid: true,
                message: 'T·∫•t c·∫£ gh·∫ø ƒë∆∞·ª£c ch·ªçn ƒë·ªÅu li·ªÅn k·ªÅ nhau'
            };

        } catch (error) {
            logger.error(`[validateAdjacentSeats] L·ªói:`, error);
            throw error;
        }
    }

    /**
     * üî¥ PRIORITY 1: GAP PREVENTION RULE  
     * Validate kh√¥ng ƒë∆∞·ª£c t·∫°o ra gh·∫ø tr·ªëng l·∫ª (orphaned seats)
     */
    async validateGapPrevention(selectedLayoutIds, showtimeId, transaction = null) {
        try {
            logger.info(`[validateGapPrevention] Ki·ªÉm tra ngƒÉn ch·∫∑n kho·∫£ng tr·ªëng cho showtime ${showtimeId}`);

            // L·∫•y th√¥ng tin layout c·ªßa gh·∫ø ƒë∆∞·ª£c ch·ªçn
            const selectedLayouts = await SeatLayout.findAll({
                where: {
                    Layout_ID: { [Op.in]: selectedLayoutIds },
                    Is_Active: true
                },
                attributes: ['Layout_ID', 'Row_Label', 'Column_Number', 'Cinema_Room_ID'],
                transaction
            });

            if (selectedLayouts.length === 0) {
                throw new Error('Kh√¥ng t√¨m th·∫•y gh·∫ø ƒë∆∞·ª£c ch·ªçn');
            }

            const cinemaRoomId = selectedLayouts[0].Cinema_Room_ID;

            // L·∫•y t·∫•t c·∫£ gh·∫ø trong ph√≤ng chi·∫øu
            const allLayouts = await SeatLayout.findAll({
                where: {
                    Cinema_Room_ID: cinemaRoomId,
                    Is_Active: true
                },
                attributes: ['Layout_ID', 'Row_Label', 'Column_Number'],
                order: [['Row_Label', 'ASC'], ['Column_Number', 'ASC']],
                transaction
            });

            // L·∫•y gh·∫ø ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t trong su·∫•t chi·∫øu n√†y
            const bookedLayouts = await this._getBookedLayoutIds(showtimeId, cinemaRoomId, transaction);

            // M√¥ ph·ªèng tr·∫°ng th√°i sau khi ƒë·∫∑t gh·∫ø
            const futureBookedLayouts = new Set([...bookedLayouts, ...selectedLayoutIds]);

            // Ki·ªÉm tra gap prevention cho t·ª´ng h√†ng
            const seatsByRow = this._groupAllSeatsByRow(allLayouts);
            
            for (const [rowLabel, seats] of Object.entries(seatsByRow)) {
                const gapValidation = this._validateRowGapPrevention(
                    seats, 
                    futureBookedLayouts, 
                    selectedLayoutIds,
                    rowLabel
                );
                
                if (!gapValidation.valid) {
                    return gapValidation;
                }
            }

            logger.info(`[validateGapPrevention] ‚úÖ Kh√¥ng t·∫°o ra kho·∫£ng tr·ªëng kh√¥ng h·ª£p l·ªá`);
            return {
                valid: true,
                message: 'Vi·ªác ƒë·∫∑t gh·∫ø kh√¥ng t·∫°o ra kho·∫£ng tr·ªëng kh√¥ng h·ª£p l·ªá'
            };

        } catch (error) {
            logger.error(`[validateGapPrevention] L·ªói:`, error);
            throw error;
        }
    }

    /**
     * MASTER VALIDATION FUNCTION
     * G·ªçi t·∫•t c·∫£ validation rules cho seat booking
     */
    async validateSeatBookingRules(selectedLayoutIds, showtimeId, transaction = null) {
        try {
            logger.info(`[validateSeatBookingRules] B·∫Øt ƒë·∫ßu validate rules cho ${selectedLayoutIds.length} gh·∫ø`);

            // 1. Validate Adjacent Seats
            const adjacentResult = await this.validateAdjacentSeats(selectedLayoutIds, showtimeId, transaction);
            if (!adjacentResult.valid) {
                return {
                    valid: false,
                    rule: 'ADJACENT_SEATS',
                    ...adjacentResult
                };
            }

            // 2. Validate Gap Prevention
            const gapResult = await this.validateGapPrevention(selectedLayoutIds, showtimeId, transaction);
            if (!gapResult.valid) {
                return {
                    valid: false,
                    rule: 'GAP_PREVENTION',
                    ...gapResult
                };
            }

            logger.info(`[validateSeatBookingRules] ‚úÖ T·∫•t c·∫£ rules ƒë·ªÅu PASS`);
            return {
                valid: true,
                message: 'T·∫•t c·∫£ quy t·∫Øc ƒë·∫∑t gh·∫ø ƒë·ªÅu h·ª£p l·ªá',
                rulesChecked: ['ADJACENT_SEATS', 'GAP_PREVENTION']
            };

        } catch (error) {
            logger.error(`[validateSeatBookingRules] L·ªói:`, error);
            return {
                valid: false,
                rule: 'SYSTEM_ERROR',
                errorCode: 'VALIDATION_ERROR',
                message: `L·ªói khi ki·ªÉm tra quy t·∫Øc ƒë·∫∑t gh·∫ø: ${error.message}`
            };
        }
    }

    // =================== HELPER METHODS ===================

    /**
     * Nh√≥m gh·∫ø theo h√†ng (Row_Label)
     */
    _groupSeatsByRow(layouts) {
        const seatsByRow = {};
        layouts.forEach(layout => {
            if (!seatsByRow[layout.Row_Label]) {
                seatsByRow[layout.Row_Label] = [];
            }
            seatsByRow[layout.Row_Label].push(layout);
        });

        // S·∫Øp x·∫øp gh·∫ø trong m·ªói h√†ng theo Column_Number
        Object.keys(seatsByRow).forEach(row => {
            seatsByRow[row].sort((a, b) => a.Column_Number - b.Column_Number);
        });

        return seatsByRow;
    }

    /**
     * Nh√≥m t·∫•t c·∫£ gh·∫ø theo h√†ng (cho gap prevention)
     */
    _groupAllSeatsByRow(allLayouts) {
        const seatsByRow = {};
        allLayouts.forEach(layout => {
            if (!seatsByRow[layout.Row_Label]) {
                seatsByRow[layout.Row_Label] = [];
            }
            seatsByRow[layout.Row_Label].push(layout);
        });

        // S·∫Øp x·∫øp gh·∫ø trong m·ªói h√†ng theo Column_Number
        Object.keys(seatsByRow).forEach(row => {
            seatsByRow[row].sort((a, b) => a.Column_Number - b.Column_Number);
        });

        return seatsByRow;
    }

    /**
     * Validate gh·∫ø li·ªÅn k·ªÅ trong 1 h√†ng
     */
    _validateSingleRowAdjacency(seats, rowLabel) {
        if (seats.length <= 1) return { valid: true };

        const columns = seats.map(s => s.Column_Number).sort((a, b) => a - b);
        
        // Ki·ªÉm tra c√°c gh·∫ø c√≥ li√™n ti·∫øp kh√¥ng
        for (let i = 1; i < columns.length; i++) {
            const gap = columns[i] - columns[i-1];
            if (gap > 1) {
                const missingSeats = [];
                for (let col = columns[i-1] + 1; col < columns[i]; col++) {
                    missingSeats.push(`${rowLabel}${col}`);
                }
                
                return {
                    valid: false,
                    errorCode: 'NOT_ADJACENT',
                    message: `Gh·∫ø trong h√†ng ${rowLabel} kh√¥ng li·ªÅn k·ªÅ. Thi·∫øu gh·∫ø: ${missingSeats.join(', ')}`,
                    suggestedSeats: missingSeats,
                    rowLabel
                };
            }
        }

        return { valid: true };
    }

    /**
     * Validate gh·∫ø li·ªÅn k·ªÅ gi·ªØa nhi·ªÅu h√†ng
     */
    _validateMultipleRowsAdjacency(seatsByRow) {
        const rowLabels = Object.keys(seatsByRow).sort();
        
        // Ki·ªÉm tra c√°c h√†ng c√≥ li·ªÅn k·ªÅ nhau kh√¥ng (A, B, C...)
        for (let i = 1; i < rowLabels.length; i++) {
            const currentRow = rowLabels[i];
            const prevRow = rowLabels[i-1];
            
            // Ki·ªÉm tra c√°c h√†ng c√≥ li√™n ti·∫øp trong alphabet kh√¥ng
            if (currentRow.charCodeAt(0) - prevRow.charCodeAt(0) > 1) {
                return {
                    valid: false,
                    errorCode: 'NON_ADJACENT_ROWS',
                    message: `H√†ng ${prevRow} v√† ${currentRow} kh√¥ng li·ªÅn k·ªÅ. Nh√≥m gh·∫ø n√™n ·ªü c√°c h√†ng li·ªÅn k·ªÅ nhau.`,
                    suggestion: 'Vui l√≤ng ch·ªçn gh·∫ø trong c√πng m·ªôt h√†ng ho·∫∑c c√°c h√†ng li·ªÅn k·ªÅ'
                };
            }
        }

        // Ki·ªÉm tra s·ªë l∆∞·ª£ng gh·∫ø ·ªü m·ªói h√†ng h·ª£p l√Ω
        for (const [rowLabel, seats] of Object.entries(seatsByRow)) {
            if (seats.length > 8) {
                return {
                    valid: false,
                    errorCode: 'TOO_MANY_SEATS_PER_ROW',
                    message: `H√†ng ${rowLabel} c√≥ ${seats.length} gh·∫ø ƒë∆∞·ª£c ch·ªçn (t·ªëi ƒëa 8 gh·∫ø/h√†ng)`,
                    suggestion: 'Vui l√≤ng gi·∫£m s·ªë gh·∫ø trong m·ªói h√†ng'
                };
            }
        }

        return { valid: true };
    }

    /**
     * L·∫•y danh s√°ch Layout_ID ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t
     */
    async _getBookedLayoutIds(showtimeId, cinemaRoomId, transaction) {
        try {
            const bookedTickets = await Ticket.findAll({
                where: {
                    Showtime_ID: showtimeId,
                    Status: { [Op.notIn]: ['Cancelled', 'Expired'] }
                },
                include: [{
                    model: Seat,
                    as: 'Seat',
                    include: [{
                        model: SeatLayout,
                        as: 'SeatLayout',
                        where: {
                            Cinema_Room_ID: cinemaRoomId,
                            Is_Active: true
                        }
                    }]
                }],
                transaction
            });

            return bookedTickets
                .filter(ticket => ticket.Seat && ticket.Seat.SeatLayout)
                .map(ticket => ticket.Seat.SeatLayout.Layout_ID);

        } catch (error) {
            logger.error('[_getBookedLayoutIds] L·ªói:', error);
            return [];
        }
    }

    /**
     * Validate gap prevention cho 1 h√†ng
     */
    _validateRowGapPrevention(rowSeats, futureBookedLayouts, selectedLayoutIds, rowLabel) {
        // T·∫°o array tr·∫°ng th√°i gh·∫ø trong h√†ng
        const seatStatuses = rowSeats.map(seat => ({
            layoutId: seat.Layout_ID,
            column: seat.Column_Number,
            willBeBooked: futureBookedLayouts.has(seat.Layout_ID),
            isSelected: selectedLayoutIds.includes(seat.Layout_ID)
        }));

        // T√¨m c√°c kho·∫£ng tr·ªëng (gaps)
        const gaps = this._findGapsInRow(seatStatuses);
        
        // Ki·ªÉm tra c√°c gap c√≥ h·ª£p l·ªá kh√¥ng
        for (const gap of gaps) {
            if (gap.size === 1) {
                // Orphaned seat - kh√¥ng ƒë∆∞·ª£c ph√©p
                return {
                    valid: false,
                    errorCode: 'ORPHANED_SEAT',
                    message: `Kh√¥ng th·ªÉ ƒë·ªÉ gh·∫ø ${rowLabel}${gap.columns[0]} tr·ªëng l·∫ª. Vui l√≤ng ch·ªçn th√™m gh·∫ø n√†y.`,
                    suggestedSeats: [`${rowLabel}${gap.columns[0]}`],
                    rowLabel,
                    gapSize: gap.size
                };
            } else if (gap.size === 2) {
                // 2 gh·∫ø tr·ªëng gi·ªØa c√°c nh√≥m - c·∫£nh b√°o
                logger.warn(`[Gap Detection] H√†ng ${rowLabel} c√≥ 2 gh·∫ø tr·ªëng li·ªÅn k·ªÅ: ${gap.columns.map(c => `${rowLabel}${c}`).join(', ')}`);
                // Cho ph√©p nh∆∞ng g·ª£i √Ω
                // return {
                //     valid: false,
                //     errorCode: 'SMALL_GAP',
                //     message: `N√™n ƒë·∫∑t th√™m 2 gh·∫ø ${gap.columns.map(c => `${rowLabel}${c}`).join(', ')} ƒë·ªÉ tr√°nh kho·∫£ng tr·ªëng`,
                //     suggestedSeats: gap.columns.map(c => `${rowLabel}${c}`),
                //     rowLabel,
                //     gapSize: gap.size,
                //     isWarning: true
                // };
            }
        }

        return { valid: true };
    }

    /**
     * T√¨m c√°c kho·∫£ng tr·ªëng trong 1 h√†ng
     */
    _findGapsInRow(seatStatuses) {
        const gaps = [];
        let currentGap = null;

        for (let i = 0; i < seatStatuses.length; i++) {
            const seat = seatStatuses[i];
            
            if (!seat.willBeBooked) {
                // Gh·∫ø tr·ªëng - b·∫Øt ƒë·∫ßu ho·∫∑c ti·∫øp t·ª•c gap
                if (!currentGap) {
                    currentGap = {
                        columns: [seat.column],
                        size: 1
                    };
                } else {
                    currentGap.columns.push(seat.column);
                    currentGap.size++;
                }
            } else {
                // Gh·∫ø ƒë√£ ƒë·∫∑t - k·∫øt th√∫c gap (n·∫øu c√≥)
                if (currentGap) {
                    gaps.push(currentGap);
                    currentGap = null;
                }
            }
        }

        // Th√™m gap cu·ªëi c√πng (n·∫øu c√≥)
        if (currentGap) {
            gaps.push(currentGap);
        }

        return gaps;
    }

    /**
     * G·ª£i √Ω gh·∫ø t·ªët nh·∫•t cho user
     */
    async getSeatRecommendations(showtimeId, requestedSeatCount, transaction = null) {
        try {
            logger.info(`[getSeatRecommendations] G·ª£i √Ω ${requestedSeatCount} gh·∫ø cho showtime ${showtimeId}`);

            // Implementation cho smart seat recommendations
            // TODO: Implement trong phase 2
            
            return {
                recommendations: [],
                message: 'T√≠nh nƒÉng g·ª£i √Ω gh·∫ø s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn trong giai ƒëo·∫°n ti·∫øp theo'
            };

        } catch (error) {
            logger.error(`[getSeatRecommendations] L·ªói:`, error);
            return {
                recommendations: [],
                error: error.message
            };
        }
    }
}

module.exports = new SeatBookingRulesService(); 