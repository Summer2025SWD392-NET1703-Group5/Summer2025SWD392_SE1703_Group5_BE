// src/services/seatSelectionService.js
// Service qu·∫£n l√Ω tr·∫°ng th√°i gh·∫ø real-time cho h·ªá th·ªëng ƒë·∫∑t v√©

const { SeatLayout, Showtime, TicketBooking, Ticket } = require('../models');
const { Op } = require('sequelize');
const pricingService = require('./pricingService');

class SeatSelectionService {
    constructor() {
        // In-memory storage cho tr·∫°ng th√°i gh·∫ø real-time
        // C·∫•u tr√∫c: { showtimeId: { seatId: { status, userId, timestamp, socketId } } }
        this.seatStates = new Map();
        
        // Timeout cho vi·ªác gi·ªØ gh·∫ø (15 ph√∫t)
        this.SEAT_HOLD_TIMEOUT = 15 * 60 * 1000; // 15 minutes
        
        // Cleanup interval (m·ªói 30 gi√¢y)
        this.CLEANUP_INTERVAL = 30 * 1000; // 30 seconds

        // Cleanup timer s·∫Ω ƒë∆∞·ª£c start t·ª´ WebSocket handler v·ªõi io instance
        this.cleanupTimer = null;

        // Kh·ªüi t·∫°o d·ªØ li·ªáu t·ª´ database khi service ƒë∆∞·ª£c t·∫°o
        this.initializeFromDatabase();
    }

    /**
     * ƒê·∫£m b·∫£o showtimeId l√† s·ªë
     * @param {*} showtimeId - ID su·∫•t chi·∫øu (c√≥ th·ªÉ l√† s·ªë, chu·ªói, ho·∫∑c object)
     * @returns {number|string} - ID su·∫•t chi·∫øu ƒë√£ ƒë∆∞·ª£c chuy·ªÉn ƒë·ªïi th√†nh s·ªë ho·∫∑c chu·ªói
     */
    ensureNumericShowtimeId(showtimeId) {
        if (!showtimeId) {
            console.warn(`‚ö†Ô∏è showtimeId l√† null ho·∫∑c undefined`);
            return null;
        }
        
        if (typeof showtimeId === 'object') {
            console.log(`‚ö†Ô∏è showtimeId l√† object, chuy·ªÉn ƒë·ªïi th√†nh chu·ªói`);
            
            try {
                // Th·ª≠ c√°c thu·ªôc t√≠nh ph·ªï bi·∫øn c√≥ th·ªÉ ch·ª©a ID
                const possibleIds = [
                    showtimeId.showtimeId, 
                    showtimeId.id, 
                    showtimeId.showtime_id, 
                    showtimeId.Showtime_ID,
                    showtimeId.showtimeID,
                    showtimeId.data?.showtimeId,
                    showtimeId.data?.id,
                    showtimeId.data?.Showtime_ID
                ];
                
                // T√¨m gi√° tr·ªã ƒë·∫ßu ti√™n kh√¥ng ph·∫£i null/undefined
                for (const id of possibleIds) {
                    if (id !== null && id !== undefined) {
                        return this.ensureNumericShowtimeId(id); // ƒê·ªá quy ƒë·ªÉ x·ª≠ l√Ω tr∆∞·ªùng h·ª£p id l√† object
                    }
                }
                
                // N·∫øu kh√¥ng t√¨m th·∫•y ID trong c√°c thu·ªôc t√≠nh, th·ª≠ JSON.stringify
                console.warn(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ID trong object, chuy·ªÉn ƒë·ªïi to√†n b·ªô object th√†nh chu·ªói`);
                const stringified = JSON.stringify(showtimeId);
                
                // Th·ª≠ t√¨m s·ªë trong chu·ªói JSON
                const matches = stringified.match(/"(showtime|Showtime)(_)?[Ii][Dd]":\s*(\d+)/);
                if (matches && matches[3]) {
                    return Number(matches[3]);
                }
                
                // Fallback: Tr·∫£ v·ªÅ timestamp hi·ªán t·∫°i ƒë·ªÉ tr√°nh l·ªói
                console.error(`‚ùå Kh√¥ng th·ªÉ x√°c ƒë·ªãnh showtimeId t·ª´ object, s·ª≠ d·ª•ng fallback`);
                return Date.now();
            } catch (error) {
                console.error(`‚ùå L·ªói khi x·ª≠ l√Ω showtimeId object: ${error.message}`);
                return Date.now(); // Fallback ƒë·ªÉ tr√°nh l·ªói
            }
        }
        
        // N·∫øu l√† chu·ªói, th·ª≠ chuy·ªÉn th√†nh s·ªë
        if (typeof showtimeId === 'string') {
            // Lo·∫°i b·ªè c√°c k√Ω t·ª± kh√¥ng ph·∫£i s·ªë
            const numericPart = showtimeId.replace(/\D/g, '');
            if (numericPart) {
                return Number(numericPart);
            }
            return showtimeId; // Tr·∫£ v·ªÅ chu·ªói g·ªëc n·∫øu kh√¥ng th·ªÉ chuy·ªÉn ƒë·ªïi
        }
        
        // N·∫øu ƒë√£ l√† s·ªë, tr·∫£ v·ªÅ lu√¥n
        return showtimeId;
    }

    /**
     * Kh·ªüi t·∫°o tr·∫°ng th√°i gh·∫ø t·ª´ database khi service ƒë∆∞·ª£c t·∫°o
     */
    async initializeFromDatabase() {
        try {
            console.log('üîÑ ƒêang kh·ªüi t·∫°o tr·∫°ng th√°i gh·∫ø t·ª´ database...');
            
            // T√¨m t·∫•t c·∫£ c√°c Tickets c√≥ tr·∫°ng th√°i "Selecting"
            const selectingTickets = await Ticket.findAll({
                where: {
                    Status: 'Selecting',
                },
                include: [
                    {
                        model: TicketBooking,
                        as: 'TicketBooking',
                        attributes: ['User_ID']
                    }
                ]
            });

            if (selectingTickets.length > 0) {
                console.log(`üìã ƒê√£ t√¨m th·∫•y ${selectingTickets.length} gh·∫ø ƒëang ƒë∆∞·ª£c ch·ªçn trong database`);

                // Gom nh√≥m theo showtimeId
                for (const ticket of selectingTickets) {
                    const showtimeId = ticket.Showtime_ID;
                    const seatId = ticket.Seat_ID;
                    const userId = ticket.TicketBooking?.User_ID || 'anonymous';
                    
                    // Ki·ªÉm tra xem v√© ƒë√£ h·∫øt th·ªùi gian gi·ªØ ch∆∞a
                    const createdAt = new Date(ticket.createdAt || ticket.Created_At || Date.now());
                    const now = Date.now();
                    const elapsedTime = now - createdAt.getTime();
                    
                    // N·∫øu ƒë√£ h·∫øt th·ªùi gian gi·ªØ, b·ªè qua v√† x√≥a kh·ªèi database
                    if (elapsedTime > this.SEAT_HOLD_TIMEOUT) {
                        this.removeFromDatabase(showtimeId, seatId);
                        continue;
                    }

                    // Kh·ªüi t·∫°o showtime state n·∫øu ch∆∞a c√≥
                    if (!this.seatStates.has(showtimeId)) {
                        this.seatStates.set(showtimeId, {});
                    }

                    const showtimeSeats = this.seatStates.get(showtimeId);
                    
                    // L∆∞u th√¥ng tin v√†o memory cache
                    showtimeSeats[seatId] = {
                        status: 'selecting',
                        userId: userId,
                        socketId: null,
                        timestamp: createdAt.getTime()
                    };
                }

                console.log('‚úÖ ƒê√£ kh·ªüi t·∫°o tr·∫°ng th√°i gh·∫ø t·ª´ database th√†nh c√¥ng');
            } else {
                console.log('‚ÑπÔ∏è Kh√¥ng c√≥ tr·∫°ng th√°i gh·∫ø n√†o ƒë·ªÉ kh·ªüi t·∫°o t·ª´ database');
            }
        } catch (error) {
            console.error('‚ùå L·ªói khi kh·ªüi t·∫°o tr·∫°ng th√°i gh·∫ø t·ª´ database:', error);
        }
    }

    /**
     * L·∫•y tr·∫°ng th√°i gh·∫ø cho m·ªôt su·∫•t chi·∫øu
     */
    async getShowtimeSeats(showtimeId) {
        try {
            // ƒê·∫£m b·∫£o showtimeId l√† s·ªë
            showtimeId = this.ensureNumericShowtimeId(showtimeId);
            console.log(`üîÑ [BACKEND] L·∫•y tr·∫°ng th√°i gh·∫ø cho su·∫•t chi·∫øu ${showtimeId}`);

            // ‚ùå T·∫†MTH·ªúI COMMENT OUT API CALL ƒê·ªÇ TR√ÅNH V√íNG L·∫∂P 401
            // L√Ω do: Service ƒëang g·ªçi API c·ªßa ch√≠nh n√≥ m√† kh√¥ng c√≥ auth token
            // TODO: C·∫ßn implement proper API authentication ho·∫∑c g·ªçi tr·ª±c ti·∫øp database

            /*
            const axios = require('axios');
            const apiUrl = process.env.SEAT_API_URL || 'http://localhost:3000/api/seats';

            try {
                const response = await axios.get(`${apiUrl}/showtime/${showtimeId}`);
                if (response.data && response.data.success && response.data.data && Array.isArray(response.data.data.Seats)) {
                    console.log(`‚úÖ [BACKEND] L·∫•y th√†nh c√¥ng ${response.data.data.Seats.length} gh·∫ø t·ª´ API`);
                    // ... API processing code ...
                    return seats;
                }
            } catch (apiError) {
                console.error(`‚ùå [BACKEND] L·ªói khi l·∫•y d·ªØ li·ªáu t·ª´ API: ${apiError.message}`);
                // Fallback sang database
            }
            */

            console.log(`üîÑ [BACKEND] S·ª≠ d·ª•ng database tr·ª±c ti·∫øp cho su·∫•t chi·∫øu ${showtimeId}`);

            // T√¨m th√¥ng tin su·∫•t chi·∫øu
            let showtime = null;
            try {
                showtime = await Showtime.findByPk(showtimeId);
            if (!showtime) {
                    console.warn(`‚ö†Ô∏è [BACKEND] Kh√¥ng t√¨m th·∫•y su·∫•t chi·∫øu ${showtimeId}`);
                    return await this._createSampleSeatMap(showtimeId); // Tr·∫£ v·ªÅ s∆° ƒë·ªì gh·∫ø ƒë·ªông
                }
            } catch (error) {
                console.error(`‚ùå [BACKEND] L·ªói khi truy v·∫•n Showtime: ${error.message}`);
                return await this._createSampleSeatMap(showtimeId); // Tr·∫£ v·ªÅ s∆° ƒë·ªì gh·∫ø ƒë·ªông
            }

            // L·∫•y th√¥ng tin layout gh·∫ø t·ª´ database
            let seatLayouts = [];
            try {
                seatLayouts = await SeatLayout.findAll({
                where: {
                    Cinema_Room_ID: showtime.Cinema_Room_ID,
                    Is_Active: true
                },
                order: [['Row_Label', 'ASC'], ['Column_Number', 'ASC']]
            });
                
                if (seatLayouts.length === 0) {
                    console.warn(`‚ö†Ô∏è [BACKEND] Kh√¥ng t√¨m th·∫•y layout gh·∫ø cho ph√≤ng ${showtime.Cinema_Room_ID}`);
                    return await this._createSampleSeatMap(showtimeId); // Tr·∫£ v·ªÅ s∆° ƒë·ªì gh·∫ø ƒë·ªông
                }
            } catch (error) {
                console.error(`‚ùå [BACKEND] L·ªói khi l·∫•y layout gh·∫ø: ${error.message}`);
                // Ti·∫øp t·ª•c v·ªõi s∆° ƒë·ªì gh·∫ø ƒë·ªông
                return await this._createSampleSeatMap(showtimeId);
            }

            // Kh·ªüi t·∫°o danh s√°ch gh·∫ø ƒë√£ ƒë·∫∑t
            let bookedTickets = [];
            const bookedSeatMap = new Map();

            try {
                try {
                    // S·ª≠ d·ª•ng truy v·∫•n ƒë∆°n gi·∫£n h∆°n ƒë·ªÉ tr√°nh l·ªói c·ªôt kh√¥ng t·ªìn t·∫°i
                bookedTickets = await Ticket.findAll({
                    where: {
                            Showtime_ID: showtimeId
                        },
                        attributes: ['Ticket_ID', 'Booking_ID', 'Seat_ID', 'Status'],
                        raw: true
                    });

                    console.log(`‚úÖ [BACKEND] T√¨m th·∫•y ${bookedTickets.length} v√© ƒë√£ ƒë·∫∑t cho su·∫•t chi·∫øu ${showtimeId}`);
                    
                    // X·ª≠ l√Ω t·ª´ng v√© ƒë·ªÉ l·∫•y th√¥ng tin gh·∫ø
                    for (const ticket of bookedTickets) {
                        try {
                            if (!ticket.Seat_ID) continue;
                            
                            // ‚úÖ S·ª¨A: L·∫•y th√¥ng tin gh·∫ø b·∫±ng raw SQL thay v√¨ Sequelize
                            const { getConnection } = require('../config/database');
                            const pool = await getConnection();
                            const request = pool.request();
                            request.input('seatId', ticket.Seat_ID);

                            const seatResult = await request.query(`
                                SELECT
                                    s.Seat_ID,
                                    s.Layout_ID,
                                    s.Seat_Number,
                                    sl.Row_Label,
                                    sl.Column_Number,
                                    sl.Seat_Type,
                                    sl.Layout_ID as SeatLayout_Layout_ID
                                FROM [ksf00691_team03].[Seats] s
                                LEFT JOIN [ksf00691_team03].[Seat_Layout] sl ON s.Layout_ID = sl.Layout_ID
                                WHERE s.Seat_ID = @seatId
                            `);

                            const seat = seatResult.recordset[0];
                            if (seat) {
                                // T·∫°o c·∫•u tr√∫c t∆∞∆°ng t·ª± nh∆∞ Sequelize
                                seat.SeatLayout = {
                                    Row_Label: seat.Row_Label,
                                    Column_Number: seat.Column_Number,
                                    Seat_Type: seat.Seat_Type,
                                    Layout_ID: seat.SeatLayout_Layout_ID
                                };
                            }

                            if (seat && seat.SeatLayout) {
                                const rowLabel = seat.SeatLayout.Row_Label;
                                const columnNumber = seat.SeatLayout.Column_Number;
                                const layoutId = seat.SeatLayout.Layout_ID;
                    const seatNumber = `${rowLabel}${columnNumber}`;
                                
                                // L·∫•y th√¥ng tin booking n·∫øu c·∫ßn
                                let userId = null;
                                let bookingStatus = null;
                                
                                if (ticket.Booking_ID) {
                                    const booking = await TicketBooking.findByPk(ticket.Booking_ID, {
                                        attributes: ['User_ID', 'Status'],
                                        raw: true
                                    });
                                    
                                    if (booking) {
                                        userId = booking.User_ID;
                                        bookingStatus = booking.Status;
                                    }
                                }
                    
                                console.log(`‚úÖ [BACKEND] Gh·∫ø ${seatNumber} ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t b·ªüi user ${userId || 'N/A'}`);
                    
                                // L∆∞u th√¥ng tin gh·∫ø ƒë√£ ƒë·∫∑t
                    bookedSeatMap.set(seatNumber, {
                                    layoutId: layoutId || 0,
                                    userId: userId,
                                    status: (ticket.Status === 'Pending') ? 'pending' : 'booked',
                                    bookingId: ticket.Booking_ID,
                                    bookingStatus: bookingStatus || 'Unknown'
                    });
                }
                        } catch (seatError) {
                            console.error(`‚ùå [BACKEND] L·ªói khi x·ª≠ l√Ω th√¥ng tin gh·∫ø cho v√© ${ticket.Ticket_ID}:`, seatError);
                        }
                    }
                } catch (ticketError) {
                    console.error(`‚ùå [BACKEND] L·ªói khi truy v·∫•n Ticket:`, ticketError);
                    // Ghi log chi ti·∫øt v·ªÅ l·ªói ƒë·ªÉ debug
                    if (ticketError.parent) {
                        console.error(`‚ùå [BACKEND] Chi ti·∫øt l·ªói SQL:`, {
                            message: ticketError.parent.message,
                            code: ticketError.parent.code,
                            state: ticketError.parent.state,
                            class: ticketError.parent.class,
                            errors: ticketError.parent.errors ? ticketError.parent.errors.map(e => e.message).join(', ') : 'None'
            });
                    }
                }
            } catch (dbError) {
                console.error(`‚ùå [BACKEND] L·ªói khi truy v·∫•n Ticket:`, dbError);
                // Ghi log chi ti·∫øt v·ªÅ l·ªói ƒë·ªÉ debug
                if (dbError.parent) {
                    console.error(`‚ùå [BACKEND] Chi ti·∫øt l·ªói SQL:`, {
                        message: dbError.parent.message,
                        code: dbError.parent.code,
                        state: dbError.parent.state,
                        class: dbError.parent.class,
                        errors: dbError.parent.errors ? dbError.parent.errors.map(e => e.message).join(', ') : 'None'
            });
                }
                // Kh√¥ng return ·ªü ƒë√¢y, ti·∫øp t·ª•c v·ªõi bookedSeatMap r·ªóng - kh√¥ng l√†m gi√°n ƒëo·∫°n lu·ªìng
            }

            // üîß FIX: L·∫•y T·∫§T C·∫¢ tr·∫°ng th√°i gh·∫ø t·ª´ Redis (selecting, selected, booked)
            let cachedSeats = {};
            try {
                const seatCacheService = require('./seatCacheService');
                const allCachedSeats = await seatCacheService.getShowtimeSeats(showtimeId);

                // üîß FIX: L·∫•y T·∫§T C·∫¢ gh·∫ø t·ª´ Redis, kh√¥ng ch·ªâ selecting
                cachedSeats = allCachedSeats || {};
                console.log(`üîß [BACKEND] L·∫•y ƒë∆∞·ª£c ${Object.keys(cachedSeats).length} gh·∫ø t·ª´ Redis cache`);

                // Log chi ti·∫øt c√°c gh·∫ø t·ª´ Redis
                Object.keys(cachedSeats).forEach(seatId => {
                    const seat = cachedSeats[seatId];
                    console.log(`üîß [REDIS_SEAT] ${seatId}: status=${seat.status}, userId=${seat.userId}`);
                });
            } catch (cacheError) {
                console.error(`‚ùå [BACKEND] L·ªói khi l·∫•y gh·∫ø t·ª´ cache:`, cacheError);
                // Ti·∫øp t·ª•c v·ªõi cachedSeats r·ªóng
            }

            // T·∫°o danh s√°ch t·∫•t c·∫£ gh·∫ø v·ªõi tr·∫°ng th√°i
            const allSeats = [];

            // L·∫•y th√¥ng tin ph√≤ng chi·∫øu ƒë·ªÉ x√°c ƒë·ªãnh lo·∫°i ph√≤ng
            const roomType = showtime?.Room_Type || '2D'; // M·∫∑c ƒë·ªãnh l√† 2D n·∫øu kh√¥ng c√≥
            const showDate = showtime?.Show_Date;
            const startTime = showtime?.Start_Time;



            // T·∫°o gh·∫ø t·ª´ layout
            for (const layout of seatLayouts) {
                const rowLabel = layout.Row_Label;
                const columnNumber = layout.Column_Number;
                const seatId = `${rowLabel}${columnNumber}`;
                const seatType = layout.Seat_Type || 'Regular';
                
                // üîß FIX: Ki·ªÉm tra gh·∫ø t·ª´ Redis cache (selecting/selected/booked)
                const cachedSeat = cachedSeats && cachedSeats[seatId];

                // Ki·ªÉm tra xem gh·∫ø ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t trong database ch∆∞a
                const bookedInfo = bookedSeatMap.get(seatId);
                const isBooked = !!bookedInfo;

                // X√°c ƒë·ªãnh tr·∫°ng th√°i cu·ªëi c√πng c·ªßa gh·∫ø
                let status = 'available';
                let userId = null;

                if (isBooked) {
                    // Gh·∫ø ƒë√£ booked trong database - ∆∞u ti√™n cao nh·∫•t
                    status = bookedInfo.status;
                    userId = bookedInfo.userId;
                } else if (cachedSeat) {
                    // üîß FIX: Gh·∫ø c√≥ trong Redis cache - map status cho frontend
                    if (cachedSeat.status === 'selecting') {
                        status = 'selected'; // Map 'selecting' t·ª´ Redis th√†nh 'selected' cho frontend
                    } else {
                        status = cachedSeat.status; // Gi·ªØ nguy√™n status kh√°c (selected, booked)
                    }
                    userId = cachedSeat.userId;
                    console.log(`üîß [SEAT_STATUS] ${seatId}: Redis=${cachedSeat.status} ‚Üí Frontend=${status}, userId=${userId}`);
                }
                
                // T√≠nh gi√° v√© d·ª±a tr√™n lo·∫°i gh·∫ø v√† su·∫•t chi·∫øu
                let price = 81000; // Gi√° m·∫∑c ƒë·ªãnh
                try {
                    const priceInfo = pricingService.calculateTicketPrice({
                        roomType,
                        seatType,
                        showDate,
                        startTime
                    });
                    price = priceInfo.finalPrice;


                } catch (error) {
                    console.error(`‚ùå [BACKEND] L·ªói khi t√≠nh gi√° v√© cho gh·∫ø ${seatId}:`, error.message);
                }
                
                // Debug log ƒë·ªÉ ki·ªÉm tra Layout_ID
                if (seatId === 'C9') {
                    console.log(`üîç [DEBUG] Gh·∫ø C9 - Layout_ID: ${layout.Layout_ID}, Row: ${rowLabel}, Column: ${columnNumber}`);
                }

                // Th√™m gh·∫ø v√†o danh s√°ch k·∫øt qu·∫£
                allSeats.push({
                    seatId,
                    row: rowLabel,        // ‚úÖ FIX: Frontend expect 'row'
                    column: columnNumber, // ‚úÖ FIX: Frontend expect 'column'
                    rowLabel,            // Keep for backward compatibility
                    columnNumber,        // Keep for backward compatibility
                    status,
                    userId,
                    seatType,
                    price,
                    isBooked: status === 'booked',
                    isSelecting: status === 'selected', // üîÑ Fix: 'selected' thay v√¨ 'selecting'
                    isPending: status === 'pending',
                    isAvailable: status === 'available',
                    layoutId: layout.Layout_ID
                });
            }

            // Debug logging removed for cleaner console output

            console.log(`‚úÖ [BACKEND] ƒê√£ t·∫°o s∆° ƒë·ªì gh·∫ø cho su·∫•t chi·∫øu ${showtimeId} v·ªõi ${allSeats.length} gh·∫ø`);
            return allSeats;
        } catch (error) {
            console.error(`‚ùå [BACKEND] L·ªói khi l·∫•y tr·∫°ng th√°i gh·∫ø:`, error);
            // Tr·∫£ v·ªÅ s∆° ƒë·ªì gh·∫ø ƒë·ªông trong tr∆∞·ªùng h·ª£p l·ªói ƒë·ªÉ tr√°nh crash
            return await this._createSampleSeatMap(showtimeId);
        }
    }

    /**
     * L·∫•y th√¥ng tin gh·∫ø t·ª´ database ho·∫∑c API
     * @private
     * @param {number|string} showtimeId - ID c·ªßa su·∫•t chi·∫øu
     * @returns {Array} M·∫£ng gh·∫ø
     */
    async _createSampleSeatMap(showtimeId) {
        console.log(`üîÑ [BACKEND] ƒêang l·∫•y layout gh·∫ø t·ª´ API cho su·∫•t chi·∫øu ${showtimeId}`);
        
        try {
            // ‚ùå T·∫†MTH·ªúI COMMENT OUT API CALL ƒê·ªÇ TR√ÅNH V√íNG L·∫∂P 401
            // L√Ω do: Service ƒëang g·ªçi API c·ªßa ch√≠nh n√≥ m√† kh√¥ng c√≥ auth token
            /*
            const axios = require('axios');
            const apiUrl = process.env.SEAT_API_URL || 'http://localhost:3000/api/seats';

            try {
                const response = await axios.get(`${apiUrl}/showtime/${showtimeId}`);
                if (response.data && response.data.success && response.data.data && Array.isArray(response.data.data.Seats)) {
                    console.log(`‚úÖ [BACKEND] L·∫•y th√†nh c√¥ng ${response.data.data.Seats.length} gh·∫ø t·ª´ API`);
                    // ... API processing code ...
                    return seats;
                }
            } catch (apiError) {
                console.error(`‚ùå [BACKEND] L·ªói khi l·∫•y d·ªØ li·ªáu t·ª´ API: ${apiError.message}`);
            }
            */

            console.log(`üîÑ [BACKEND] S·ª≠ d·ª•ng database tr·ª±c ti·∫øp cho layout gh·∫ø su·∫•t chi·∫øu ${showtimeId}`);
            
            // N·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c t·ª´ API, th·ª≠ l·∫•y t·ª´ database
            let cinemaRoomId = null;
            try {
                const showtime = await Showtime.findByPk(showtimeId);
                if (showtime) {
                    cinemaRoomId = showtime.Cinema_Room_ID;
                    console.log(`‚úÖ [BACKEND] T√¨m th·∫•y ph√≤ng ${cinemaRoomId} cho su·∫•t chi·∫øu ${showtimeId}`);
                }
            } catch (error) {
                console.error(`‚ùå [BACKEND] L·ªói khi l·∫•y th√¥ng tin su·∫•t chi·∫øu: ${error.message}`);
            }
            
            // N·∫øu c√≥ th√¥ng tin ph√≤ng, th·ª≠ l·∫•y layout t·ª´ database
            if (cinemaRoomId) {
                try {
                    const layouts = await SeatLayout.findAll({
                        where: {
                            Cinema_Room_ID: cinemaRoomId,
                            Is_Active: true
                        },
                        order: [['Row_Label', 'ASC'], ['Column_Number', 'ASC']]
                    });
                    
                    if (layouts && layouts.length > 0) {
                        console.log(`‚úÖ [BACKEND] T√¨m th·∫•y ${layouts.length} gh·∫ø trong layout cho ph√≤ng ${cinemaRoomId}`);
                        
                        // T·∫°o danh s√°ch gh·∫ø t·ª´ layout th·ª±c t·∫ø
                        const seats = layouts.map(layout => {
                            const rowLabel = layout.Row_Label;
                            const columnNumber = layout.Column_Number;
                            const seatId = `${rowLabel}${columnNumber}`;
                            const seatType = layout.Seat_Type || 'Regular';

                            // T√≠nh gi√° v√© d·ª±a tr√™n lo·∫°i gh·∫ø v√† su·∫•t chi·∫øu (th·ªëng nh·∫•t v·ªõi WebSocket)
                            let price = 81000; // Gi√° m·∫∑c ƒë·ªãnh
                            try {
                                const priceInfo = pricingService.calculateTicketPrice({
                                    roomType,
                                    seatType,
                                    showDate,
                                    startTime
                                });
                                price = priceInfo.finalPrice;
                            } catch (error) {
                                console.error(`‚ùå [BACKEND] L·ªói khi t√≠nh gi√° v√© cho gh·∫ø ${seatId}:`, error.message);
                                // Fallback: s·ª≠ d·ª•ng gi√° c≈©
                                price = seatType === 'VIP' ? 120000 : 81000;
                            }
                            
                            return {
                                seatId,
                                rowLabel,
                                columnNumber,
                                status: 'available',
                                userId: null,
                                seatType,
                                price,
                                isBooked: false,
                                isSelecting: false,
                                isPending: false,
                                isAvailable: true,
                                layoutId: layout.Layout_ID
                            };
                        });
                        
                        return seats;
                    }
                } catch (dbError) {
                    console.error(`‚ùå [BACKEND] L·ªói khi l·∫•y layout gh·∫ø t·ª´ database: ${dbError.message}`);
                }
            }
            
            // N·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c t·ª´ database, t·∫°o layout ƒë·ªông ƒë∆°n gi·∫£n
            console.warn(`‚ö†Ô∏è [BACKEND] Kh√¥ng th·ªÉ l·∫•y layout gh·∫ø t·ª´ API ho·∫∑c database, t·∫°o layout ƒë·ªông ƒë∆°n gi·∫£n`);
            
            // T·∫°o layout ƒë∆°n gi·∫£n v·ªõi 5 h√†ng, 9 c·ªôt (b·ªè c·ªôt 5 l√†m l·ªëi ƒëi)
            const rows = ['A', 'B', 'C', 'D', 'E'];
            const columns = [1, 2, 3, 4, 6, 7, 8, 9, 10];
            const seats = [];
            
            let seatId = 1;
            for (const rowLabel of rows) {
                for (const columnNumber of columns) {
                    const seatNumber = `${rowLabel}${columnNumber}`;
                    seats.push({
                        seatId: seatNumber,
                        rowLabel,
                        columnNumber,
                        status: 'available',
                        userId: null,
                        seatType: 'Regular',
                        price: 81000,
                        isBooked: false,
                        isSelecting: false,
                        isPending: false,
                        isAvailable: true,
                        layoutId: seatId++
                    });
                }
            }
            
            console.log(`‚úÖ [BACKEND] ƒê√£ t·∫°o layout gh·∫ø ƒë·ªông v·ªõi ${seats.length} gh·∫ø`);
            return seats;
        } catch (error) {
            console.error(`‚ùå [BACKEND] L·ªói khi t·∫°o layout gh·∫ø: ${error.message}`);
            
            // Tr·∫£ v·ªÅ m·∫£ng r·ªóng ƒë·ªÉ tr√°nh crash
            return [];
        }
    }

    /**
     * Ki·ªÉm tra xem gh·∫ø ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t trong database ch∆∞a
     */
    async checkSeatConflictInDatabase(showtimeId, seatId) {
        try {
            // ‚úÖ Validation: Ki·ªÉm tra seatId h·ª£p l·ªá
            if (!seatId || seatId === 'undefined' || seatId === 'undefinedundefined' || typeof seatId !== 'string') {
                console.error(`‚ùå [BACKEND] seatId kh√¥ng h·ª£p l·ªá: ${seatId}`);
                return false; // Tr·∫£ v·ªÅ false ƒë·ªÉ kh√¥ng block vi·ªác ch·ªçn gh·∫ø
            }

            // Logic: Gh·∫ø ch·ªâ t·ªìn t·∫°i trong b·∫£ng Seats khi ƒë√£ booking th√†nh c√¥ng
            // L·∫•y th√¥ng tin layout t·ª´ seatId (A6 -> Row_Label = A, Column_Number = 6)
            const rowLabel = seatId.charAt(0);
            const columnNumber = parseInt(seatId.substring(1));

            // ‚úÖ Validation: Ki·ªÉm tra parse th√†nh c√¥ng
            if (!rowLabel || isNaN(columnNumber) || columnNumber <= 0) {
                console.error(`‚ùå [BACKEND] Kh√¥ng th·ªÉ parse seatId "${seatId}" -> rowLabel: "${rowLabel}", columnNumber: ${columnNumber}`);
                return false;
            }

            console.log(`üîç [BACKEND] Ki·ªÉm tra conflict cho gh·∫ø ${seatId} trong showtime ${showtimeId}`);

            // üîß FIX: B·ªè qua vi·ªác ki·ªÉm tra SeatLayout v√¨ logic m·ªõi
            // Ch·ªâ c·∫ßn ki·ªÉm tra gh·∫ø ƒë√£ booking trong showtime hi·ªán t·∫°i

            // 2. üîß FIX: Ki·ªÉm tra gh·∫ø ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t trong SHOWTIME HI·ªÜN T·∫†I
            // Logic: M·ªói showtime t·∫°o ra Seat records ri√™ng t·ª´ c√πng 1 layout
            // C·∫ßn ki·ªÉm tra Tickets c·ªßa showtime n√†y, kh√¥ng ph·∫£i t·∫•t c·∫£ Seats c√≥ c√πng layout
            const { getConnection } = require('../config/database');
            const pool = await getConnection();
            const request = pool.request();
            request.input('showtimeId', showtimeId);
            request.input('rowLabel', rowLabel);
            request.input('columnNumber', columnNumber);

            const bookedSeatResult = await request.query(`
                SELECT t.Ticket_ID, t.Seat_ID, s.Layout_ID, tb.Status as BookingStatus
                FROM [ksf00691_team03].[Tickets] t
                INNER JOIN [ksf00691_team03].[Seats] s ON t.Seat_ID = s.Seat_ID
                INNER JOIN [ksf00691_team03].[Seat_Layout] sl ON s.Layout_ID = sl.Layout_ID
                INNER JOIN [ksf00691_team03].[Ticket_Bookings] tb ON t.Booking_ID = tb.Booking_ID
                WHERE t.Showtime_ID = @showtimeId
                AND sl.Row_Label = @rowLabel
                AND sl.Column_Number = @columnNumber
                AND tb.Status IN ('Pending', 'Confirmed')
                AND t.Status = 'Active'
            `);

            const isBooked = bookedSeatResult.recordset.length > 0;

            if (isBooked) {
                console.log(`üö´ [BACKEND] Gh·∫ø ${seatId} ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t trong showtime ${showtimeId} (Status: ${bookedSeatResult.recordset[0].BookingStatus})`);
                return true; // C√≥ conflict - gh·∫ø ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t trong showtime n√†y
            }

            console.log(`‚úÖ [BACKEND] Gh·∫ø ${seatId} ch∆∞a ƒë∆∞·ª£c ƒë·∫∑t trong showtime ${showtimeId}, c√≥ th·ªÉ ch·ªçn`);
            return false; // Kh√¥ng c√≥ conflict - gh·∫ø ch∆∞a ƒë∆∞·ª£c ƒë·∫∑t trong showtime n√†y
        } catch (error) {
            console.error(`‚ùå [BACKEND] L·ªói khi ki·ªÉm tra gh·∫ø ${seatId} trong database:`, error);
            // N·∫øu c√≥ l·ªói, m·∫∑c ƒë·ªãnh l√† gh·∫ø ch∆∞a ƒë∆∞·ª£c ƒë·∫∑t
            return false;
        }
    }

    /**
     * L∆∞u booking ƒë√£ confirmed v√†o database (ch·ªâ khi user x√°c nh·∫≠n ƒë·∫∑t v√©)
     */
    async saveConfirmedBookingToDatabase(showtimeId, seatIds, userId, totalAmount = 0) {
        try {
            console.log(`üíæ L∆∞u booking ƒë√£ confirmed v√†o database cho user ${userId}`);

            // T·∫°o TicketBooking m·ªõi v·ªõi status Pending
            const booking = await TicketBooking.create({
                User_ID: userId,
                Showtime_ID: showtimeId,
                Status: 'Pending',
                Booking_Date: new Date(),
                Payment_Deadline: new Date(Date.now() + (30 * 60 * 1000)), // 30 ph√∫t ƒë·ªÉ thanh to√°n
                Total_Amount: totalAmount,
                Created_By: userId
            });

            const createdTickets = [];

            // T·∫°o tickets cho t·ª´ng gh·∫ø
            for (const seatId of seatIds) {
                // Ki·ªÉm tra format seatId
                if (typeof seatId === 'string' && /^[A-Z]\d+$/.test(seatId)) {
                    const row = seatId.charAt(0);
                    const column = parseInt(seatId.slice(1), 10);

                    // T√¨m Layout_ID t·ª´ Row_Label v√† Column_Number
                    const seatLayout = await SeatLayout.findOne({
                        where: {
                            Row_Label: row,
                            Column_Number: column,
                            Is_Active: true
                        }
                    });

                    if (!seatLayout) {
                        console.error(`‚ùå Kh√¥ng t√¨m th·∫•y SeatLayout cho gh·∫ø ${seatId}`);
                        continue;
                    }

                    // ‚úÖ S·ª¨A: S·ª≠ d·ª•ng raw SQL thay v√¨ Sequelize ƒë·ªÉ t√¨m Seat
                    const { getConnection } = require('../config/database');
                    const pool = await getConnection();
                    const request = pool.request();
                    request.input('layoutId', seatLayout.Layout_ID);

                    const seatResult = await request.query(`
                        SELECT TOP 1 Seat_ID, Layout_ID, Seat_Number, Is_Active, Status, User_ID
                        FROM [ksf00691_team03].[Seats]
                        WHERE Layout_ID = @layoutId AND Is_Active = 1
                    `);

                    const seat = seatResult.recordset[0];

                    if (!seat) {
                        console.error(`‚ùå Kh√¥ng t√¨m th·∫•y Seat cho SeatLayout v·ªõi ID ${seatLayout.Layout_ID}`);
                        continue;
                    }

                    // Ki·ªÉm tra conflict m·ªôt l·∫ßn n·ªØa tr∆∞·ªõc khi t·∫°o
                    const hasConflict = await this.checkSeatConflictInDatabase(showtimeId, seatId);
                    if (hasConflict) {
                        console.error(`‚ùå Gh·∫ø ${seatId} ƒë√£ b·ªã conflict, kh√¥ng th·ªÉ t·∫°o ticket`);
                        continue;
                    }

                    // T·∫°o Ticket v·ªõi status Pending
                    const ticket = await Ticket.create({
                        Booking_ID: booking.Booking_ID,
                        Seat_ID: seat.Seat_ID,
                        Showtime_ID: showtimeId,
                        Status: 'Pending',
                        Base_Price: totalAmount / seatIds.length, // Chia ƒë·ªÅu gi√° cho c√°c gh·∫ø
                        Final_Price: totalAmount / seatIds.length,
                        Ticket_Code: `TKT-${Date.now()}-${Math.floor(Math.random() * 10000)}`
                    });

                    createdTickets.push({
                        seatId: seatId,
                        ticketId: ticket.Ticket_ID
                    });
                }
            }

            console.log(`‚úÖ ƒê√£ t·∫°o booking ${booking.Booking_ID} v·ªõi ${createdTickets.length} tickets`);
            return {
                success: true,
                bookingId: booking.Booking_ID,
                tickets: createdTickets
            };

        } catch (error) {
            console.error(`‚ùå L·ªói khi l∆∞u confirmed booking v√†o database:`, error);
            return {
                success: false,
                error: error.message
            };
        }
    }

    /**
     * Ch·ªçn gh·∫ø (ƒë√°nh d·∫•u ƒëang ch·ªçn) - L∆ØU V√ÄO REDIS
     */
    async selectSeat(showtimeId, seatId, userId, socketId) {
        try {


            // Ki·ªÉm tra conflict trong database tr∆∞·ªõc (ch·ªâ check gh·∫ø ƒë√£ confirmed)
            const hasConflict = await this.checkSeatConflictInDatabase(showtimeId, seatId);
            if (hasConflict) {
                return {
                    success: false,
                    message: 'Gh·∫ø ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t b·ªüi ng∆∞·ªùi kh√°c',
                    reason: 'database_conflict'
                };
            }

            // ‚úÖ S·ª≠ d·ª•ng Redis thay v√¨ memory cache
            const seatCacheService = require('./seatCacheService');
            const result = await seatCacheService.selectSeat(showtimeId, seatId, userId, socketId);

            if (result.success) {
                // console.log(`‚úÖ Gh·∫ø ${seatId} ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o Redis b·ªüi user ${userId}`);
            } else {
                // console.log(`‚ùå Kh√¥ng th·ªÉ ch·ªçn gh·∫ø ${seatId}: ${result.message}`);
            }

            return result;

        } catch (error) {
            console.error(`‚ùå L·ªói khi ch·ªçn gh·∫ø:`, error);
            throw error;
        }
    }

    /**
     * B·ªè ch·ªçn gh·∫ø - X√ìA KH·ªéI REDIS
     */
    async deselectSeat(showtimeId, seatId, userId) {
        try {


            // ‚úÖ S·ª≠ d·ª•ng Redis thay v√¨ memory cache
            const seatCacheService = require('./seatCacheService');
            const result = await seatCacheService.deselectSeat(showtimeId, seatId, userId);

            if (result.success) {
                console.log(`‚úÖ Gh·∫ø ${seatId} ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi Redis b·ªüi user ${userId}`);
            } else {
                console.log(`‚ùå Kh√¥ng th·ªÉ b·ªè ch·ªçn gh·∫ø ${seatId}: ${result.message}`);
            }

            return result;

        } catch (error) {
            console.error(`‚ùå L·ªói khi b·ªè ch·ªçn gh·∫ø:`, error);
            throw error;
        }
    }

    /**
     * L·∫•y tr·∫°ng th√°i hi·ªán t·∫°i c·ªßa t·∫•t c·∫£ gh·∫ø (alias cho getShowtimeSeats)
     */
    async getCurrentSeats(showtimeId) {
        return await this.getShowtimeSeats(showtimeId);
    }

    /**
     * Clear t·∫•t c·∫£ gh·∫ø ƒë√£ ch·ªçn c·ªßa user trong showtime (force clear server state)
     */
    async clearAllUserSeats(showtimeId, userId) {
        try {
            // ƒê·∫£m b·∫£o showtimeId l√† s·ªë
            showtimeId = this.ensureNumericShowtimeId(showtimeId);
            console.log(`üßπ [CLEAR_ALL_USER_SEATS] Clearing all seats for user ${userId} in showtime ${showtimeId}`);

            const seatCacheService = require('./seatCacheService');

            // L·∫•y t·∫•t c·∫£ gh·∫ø ƒë√£ ch·ªçn c·ªßa user t·ª´ Redis
            let allSeats = await this.getCurrentSeats(showtimeId);
            
            // ƒê·∫£m b·∫£o allSeats l√† m·ªôt m·∫£ng
            if (!allSeats || !Array.isArray(allSeats)) {
                console.warn(`‚ö†Ô∏è [CLEAR_ALL_USER_SEATS] allSeats kh√¥ng ph·∫£i l√† m·∫£ng ho·∫∑c null/undefined, ƒëang t·∫°o m·∫£ng r·ªóng`);
                
                return {
                    success: true,
                    clearedSeats: [],
                    message: `Kh√¥ng t√¨m th·∫•y gh·∫ø n√†o cho user ${userId} trong showtime ${showtimeId}`
                };
            }
            
            console.log(`üßπ [CLEAR_ALL_USER_SEATS] Total seats in showtime: ${allSeats.length}`);
            
            // T√¨m c√°c gh·∫ø c·ªßa user c·∫ßn clear
            const userSeats = allSeats.filter(seat => {
                if (!seat) return false;

                // üîß FIX: Bao g·ªìm c·∫£ 'selecting' v√† 'selected' status
                const isUserSeat = (seat.status === 'selecting' || seat.status === 'selected') &&
                                  String(seat.userId) === String(userId);

                if (isUserSeat) {
                    console.log(`üéØ [CLEAR_ALL_USER_SEATS] Found user seat: ${seat.seatId} (status: ${seat.status}, userId: ${seat.userId})`);
                }

                return isUserSeat;
            });

            if (!userSeats || userSeats.length === 0) {
                console.log(`‚ÑπÔ∏è [CLEAR_ALL_USER_SEATS] Kh√¥ng t√¨m th·∫•y gh·∫ø n√†o c·ªßa user ${userId} c·∫ßn clear`);
                return {
                    success: true,
                    clearedSeats: [],
                    message: `Kh√¥ng c√≥ gh·∫ø n√†o c·∫ßn clear cho user ${userId}`
                };
            }

            console.log(`üßπ [CLEAR_ALL_USER_SEATS] Found ${userSeats.length} seats to clear:`,
                userSeats.map(s => s.seatId));

            // Clear t·ª´ng gh·∫ø
            const clearedSeats = [];
            for (const seat of userSeats) {
                if (!seat || !seat.seatId) {
                    console.warn(`‚ö†Ô∏è [CLEAR_ALL_USER_SEATS] B·ªè qua gh·∫ø kh√¥ng h·ª£p l·ªá:`, seat);
                    continue;
                }
                
                const seatId = seat.seatId; // S·ª≠ d·ª•ng ƒë√∫ng thu·ªôc t√≠nh seatId
                console.log(`üîÑ [CLEAR_ALL_USER_SEATS] Deselecting seat ${seatId}...`);
                
                try {
                const result = await seatCacheService.deselectSeat(showtimeId, seatId, userId);
                
                if (result.success) {
                    clearedSeats.push(seatId);
                    console.log(`‚úÖ [CLEAR_ALL_USER_SEATS] Cleared seat ${seatId}`);
                } else {
                    console.error(`‚ùå [CLEAR_ALL_USER_SEATS] Failed to clear seat ${seatId}: ${result.message}`);
                    }
                } catch (seatError) {
                    console.error(`‚ùå [CLEAR_ALL_USER_SEATS] Error clearing seat ${seatId}:`, seatError);
                }
            }

            console.log(`‚úÖ [CLEAR_ALL_USER_SEATS] Successfully cleared ${clearedSeats.length}/${userSeats.length} seats for user ${userId}`);

            return {
                success: true,
                clearedSeats: clearedSeats,
                message: `ƒê√£ x√≥a ${clearedSeats.length} gh·∫ø c·ªßa user ${userId}`
            };
        } catch (error) {
            console.error(`‚ùå [CLEAR_ALL_USER_SEATS] L·ªói khi x√≥a gh·∫ø:`, error);
            return {
                success: false,
                error: error.message
            };
                }
    }

    /**
     * Kh·ªüi ƒë·ªông cleanup timer ƒë·ªÉ t·ª± ƒë·ªông x√≥a gh·∫ø h·∫øt h·∫°n
     * @param {Object} io - Socket.IO server instance
     */
    startCleanupTimer(io) {
        if (this.cleanupTimer) {
            console.log('‚ö†Ô∏è Cleanup timer ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông tr∆∞·ªõc ƒë√≥');
            return;
        }

        console.log('üîÑ Kh·ªüi ƒë·ªông cleanup timer cho expired seats...');

        this.cleanupTimer = setInterval(async () => {
            try {
                await this.cleanupExpiredSeats(io);
            } catch (error) {
                console.error('‚ùå L·ªói trong cleanup timer:', error);
            }
        }, this.CLEANUP_INTERVAL);

        console.log(`‚úÖ Cleanup timer ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông (interval: ${this.CLEANUP_INTERVAL / 1000}s)`);
    }

    /**
     * D·ª´ng cleanup timer
     */
    stopCleanupTimer() {
        if (this.cleanupTimer) {
            clearInterval(this.cleanupTimer);
            this.cleanupTimer = null;
            console.log('‚úÖ Cleanup timer ƒë√£ ƒë∆∞·ª£c d·ª´ng');
        }
    }

    /**
     * X√≥a c√°c gh·∫ø ƒë√£ h·∫øt h·∫°n
     * @param {Object} io - Socket.IO server instance ƒë·ªÉ broadcast updates
     */
    async cleanupExpiredSeats(io) {
        const now = Date.now();
        let totalCleaned = 0;
        const affectedShowtimes = new Set();

        try {
            // Duy·ªát qua t·∫•t c·∫£ showtime states
            for (const [showtimeId, seats] of this.seatStates.entries()) {
                let showtimeCleaned = 0;

                for (const [seatId, seatState] of seats.entries()) {
                    // Ki·ªÉm tra n·∫øu gh·∫ø ƒë√£ h·∫øt h·∫°n
                    if (seatState.status === 'selecting' &&
                        seatState.timestamp &&
                        (now - seatState.timestamp) > this.SEAT_HOLD_TIMEOUT) {

                        // X√≥a gh·∫ø h·∫øt h·∫°n
                        seats.delete(seatId);
                        showtimeCleaned++;
                        totalCleaned++;
                        affectedShowtimes.add(showtimeId);

                        console.log(`üßπ Cleaned expired seat ${seatId} in showtime ${showtimeId} (held for ${Math.round((now - seatState.timestamp) / 1000)}s)`);
                    }
                }

                // N·∫øu showtime kh√¥ng c√≤n gh·∫ø n√†o, x√≥a lu√¥n showtime
                if (seats.size === 0) {
                    this.seatStates.delete(showtimeId);
                }
            }

            // Broadcast updates cho c√°c showtime b·ªã ·∫£nh h∆∞·ªüng
            if (affectedShowtimes.size > 0) {
                for (const showtimeId of affectedShowtimes) {
                    try {
                        const seats = await this.getShowtimeSeats(showtimeId);
                        const roomName = `showtime-${showtimeId}`;
                        io.to(roomName).emit('seats-state', seats);
                    } catch (error) {
                        console.error(`‚ùå L·ªói khi broadcast update cho showtime ${showtimeId}:`, error);
                    }
                }
            }

            if (totalCleaned > 0) {
                console.log(`üßπ Cleanup completed: ${totalCleaned} expired seats cleaned from ${affectedShowtimes.size} showtimes`);
            }

        } catch (error) {
            console.error('‚ùå L·ªói trong qu√° tr√¨nh cleanup expired seats:', error);
        }
    }

    /**
     * Gi·∫£i ph√≥ng t·∫•t c·∫£ gh·∫ø c·ªßa m·ªôt user khi disconnect
     * @param {number} userId - ID c·ªßa user
     * @param {string} socketId - Socket ID c·ªßa user
     */
    async releaseUserSeats(userId, socketId) {
        let totalReleased = 0;
        const affectedShowtimes = new Set();

        try {
            // Duy·ªát qua t·∫•t c·∫£ showtime states
            for (const [showtimeId, seats] of this.seatStates.entries()) {
                for (const [seatId, seatState] of seats.entries()) {
                    // Ki·ªÉm tra n·∫øu gh·∫ø thu·ªôc v·ªÅ user n√†y
                    if (seatState.userId === userId &&
                        (seatState.socketId === socketId || !seatState.socketId)) {

                        // Ch·ªâ release gh·∫ø ƒëang selecting, kh√¥ng touch gh·∫ø ƒë√£ booked
                        if (seatState.status === 'selecting') {
                            // üîß FIX: Ki·ªÉm tra xem c√≥ booking ƒëang ƒë∆∞·ª£c t·∫°o kh√¥ng
                            // N·∫øu gh·∫ø ƒë∆∞·ª£c ch·ªçn trong v√≤ng 10 gi√¢y qua, c√≥ th·ªÉ ƒëang booking
                            const timeSinceSelection = Date.now() - (seatState.timestamp || 0);
                            const isRecentSelection = timeSinceSelection < 10000; // 10 gi√¢y

                            if (isRecentSelection) {
                                console.log(`‚è≥ [DELAYED_RELEASE] Skipping release of recently selected seat ${seatId} (${timeSinceSelection}ms ago) - might be booking in progress`);
                                continue;
                            }

                            seats.delete(seatId);
                            totalReleased++;
                            affectedShowtimes.add(showtimeId);

                            console.log(`üîì Released seat ${seatId} for disconnected user ${userId}`);
                        }
                    }
                }

                // N·∫øu showtime kh√¥ng c√≤n gh·∫ø n√†o, x√≥a lu√¥n showtime
                if (seats.size === 0) {
                    this.seatStates.delete(showtimeId);
                }
            }

            console.log(`üîì Released ${totalReleased} seats for user ${userId} (socket: ${socketId})`);
            return totalReleased;

        } catch (error) {
            console.error(`‚ùå L·ªói khi release seats cho user ${userId}:`, error);
            return 0;
        }
    }
}

module.exports = new SeatSelectionService();    