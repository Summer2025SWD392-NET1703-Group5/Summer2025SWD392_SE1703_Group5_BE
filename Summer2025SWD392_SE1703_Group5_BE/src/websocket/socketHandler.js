// src/websocket/socketHandler.js
// WebSocket event handlers cho real-time seat selection

const seatSelectionService = require('../services/seatSelectionService');
const jwt = require('jsonwebtoken');

// Bi·∫øn global ƒë·ªÉ l∆∞u tr·ªØ Socket.IO instance
let io;

/**
 * Middleware x√°c th·ª±c JWT cho WebSocket
 */
const authenticateSocket = (socket, next) => {
    try {
        const token = socket.handshake.auth.token || socket.handshake.headers.authorization?.replace('Bearer ', '');
        
        if (!token) {
            console.log('‚ùå WebSocket connection rejected: No token provided');
            return next(new Error('Authentication error: No token provided'));
        }

        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        socket.user = {
            id: decoded.userId,
            role: decoded.role
        };
        console.log(`‚úÖ WebSocket authenticated: User ${decoded.userId} (${decoded.role})`);
        next();
    } catch (error) {
        console.log('‚ùå WebSocket connection rejected: Invalid token');
        next(new Error('Authentication error: Invalid token'));
    }
};

/**
 * ƒê·∫£m b·∫£o showtimeId l√† s·ªë
 */
const ensureNumericShowtimeId = (showtimeId) => {
    if (!showtimeId) {
        console.warn('‚ö†Ô∏è showtimeId l√† null ho·∫∑c undefined');
        return null;
    }
    
    if (typeof showtimeId === 'object') {
        console.log('‚ö†Ô∏è showtimeId l√† object, chuy·ªÉn ƒë·ªïi th√†nh chu·ªói');
        // Th·ª≠ c√°c thu·ªôc t√≠nh ph·ªï bi·∫øn c√≥ th·ªÉ ch·ª©a ID
        const possibleIds = [
            showtimeId.showtimeId, 
            showtimeId.id, 
            showtimeId.showtime_id, 
            showtimeId.Showtime_ID
        ];
        
        // L·∫•y gi√° tr·ªã ƒë·∫ßu ti√™n kh√¥ng null/undefined
        for (const id of possibleIds) {
            if (id !== null && id !== undefined) {
                // Chuy·ªÉn ƒë·ªïi th√†nh s·ªë n·∫øu c√≥ th·ªÉ
                const numericId = Number(id);
                return isNaN(numericId) ? String(id) : numericId;
            }
        }
        
        // N·∫øu kh√¥ng t√¨m th·∫•y ID h·ª£p l·ªá, chuy·ªÉn ƒë·ªïi to√†n b·ªô object th√†nh string
        return String(showtimeId);
    }
    
    // Chuy·ªÉn ƒë·ªïi th√†nh s·ªë n·∫øu l√† chu·ªói
    const numericId = Number(showtimeId);
    return isNaN(numericId) ? showtimeId : numericId;
};

/**
 * Kh·ªüi t·∫°o WebSocket handlers
 */
const initSocketHandlers = (io) => {
    console.log('üîÑ ƒêang kh·ªüi t·∫°o WebSocket handlers...');

    // √Åp d·ª•ng middleware x√°c th·ª±c cho t·∫•t c·∫£ connections
    io.use(authenticateSocket);

    // Kh·ªüi ƒë·ªông cleanup timer cho expired seats
    try {
        seatSelectionService.startCleanupTimer(io);
        console.log('‚úÖ Cleanup timer ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông th√†nh c√¥ng');
    } catch (error) {
        console.error('‚ùå L·ªói khi kh·ªüi ƒë·ªông cleanup timer:', error);
    }

    io.on('connection', (socket) => {
        const userId = socket.user?.id;
        console.log(`üîå User ${userId} connected (Socket: ${socket.id})`);

        // X·ª≠ l√Ω khi client ng·∫Øt k·∫øt n·ªëi
        socket.on('disconnect', (reason) => {
            console.log(`üîå User ${userId} disconnected (${reason})`);

            // üîß FIX: Delay release ƒë·ªÉ tr√°nh conflict v·ªõi booking process
            // N·∫øu user ƒëang trong qu√° tr√¨nh booking, delay 3 gi√¢y ƒë·ªÉ booking ho√†n th√†nh
            setTimeout(() => {
                console.log(`üîÑ [DELAYED_RELEASE] Checking if should release seats for user ${userId} after disconnect`);

                // Gi·∫£i ph√≥ng gh·∫ø ƒëang ch·ªçn khi ng∆∞·ªùi d√πng ng·∫Øt k·∫øt n·ªëi
                seatSelectionService.releaseUserSeats(userId, socket.id)
                    .then(releasedCount => {
                        console.log(`‚úÖ Released ${releasedCount} seats for disconnected user ${userId}`);
                    })
                    .catch(error => {
                        console.error(`‚ùå Error releasing seats for user ${userId}:`, error);
                    });
            }, 3000); // Delay 3 gi√¢y
        });

        // Tham gia v√†o room c·ªßa m·ªôt su·∫•t chi·∫øu
        socket.on('join-showtime', async (data) => {
            try {
                // Chuy·ªÉn ƒë·ªïi showtimeId th√†nh s·ªë
                const showtimeId = ensureNumericShowtimeId(data.showtimeId || data);
                
                if (!showtimeId) {
                    throw new Error('ID su·∫•t chi·∫øu kh√¥ng h·ª£p l·ªá');
                }
                
                console.log(`üîÑ User ${userId} joining showtime ${showtimeId}`);
                
                // R·ªùi kh·ªèi t·∫•t c·∫£ rooms hi·ªán t·∫°i
                Object.keys(socket.rooms).forEach(room => {
                    if (room !== socket.id) {
                        socket.leave(room);
                    }
                });

                // Tham gia v√†o room m·ªõi
                const roomName = `showtime-${showtimeId}`;
                socket.join(roomName);

                // üîß DEBUG: Ki·ªÉm tra room membership
                const roomClients = io.sockets.adapter.rooms.get(roomName);
                const clientCount = roomClients ? roomClients.size : 0;
                console.log(`‚úÖ User ${userId} (Socket: ${socket.id}) joined ${roomName}`);
                console.log(`üìä Room ${roomName} hi·ªán c√≥ ${clientCount} clients:`, roomClients ? Array.from(roomClients) : []);

                // üîß REMOVED: Auto-clear seats when joining room
                // This was causing cross-tab sync issues where joining a room would clear all user seats
                // Users should manually clear seats if needed

                // G·ª≠i tr·∫°ng th√°i gh·∫ø hi·ªán t·∫°i
                try {
                    const seats = await seatSelectionService.getShowtimeSeats(showtimeId);

                    // ƒê·∫£m b·∫£o seats l√† m·ªôt m·∫£ng
                    const validSeats = Array.isArray(seats) ? seats : [];

                    console.log(`üì° [JOIN_SHOWTIME] Sending ${validSeats.length} seats to user ${userId}`);

                    socket.emit('seats-state', validSeats);
                } catch (seatsError) {
                    console.error(`‚ùå Error getting seats for showtime ${showtimeId}:`, seatsError);
                    socket.emit('error', { message: `Kh√¥ng th·ªÉ l·∫•y th√¥ng tin gh·∫ø: ${seatsError.message}` });
                    socket.emit('seats-state', []); // G·ª≠i m·∫£ng r·ªóng ƒë·ªÉ client kh√¥ng b·ªã l·ªói
                }
            } catch (error) {
                console.error(`‚ùå Error handling join-showtime:`, error);
                socket.emit('error', { message: `Kh√¥ng th·ªÉ tham gia su·∫•t chi·∫øu: ${error.message}` });
            }
        });

        // Ch·ªçn gh·∫ø
        socket.on('select-seat', async (data) => {
            console.log(`üîß [DEBUG] Backend nh·∫≠n event select-seat:`, data);
            console.log(`üîß [DEBUG] Socket ID: ${socket.id}, User ID: ${userId}`);
            console.log(`üîß [DEBUG] data.seatId type: ${typeof data.seatId}, value: "${data.seatId}"`);
            try {
                let { showtimeId, seatId } = data;

                // Chuy·ªÉn ƒë·ªïi showtimeId th√†nh s·ªë
                showtimeId = ensureNumericShowtimeId(showtimeId || data.showtimeId);

                // ‚úÖ Validation: Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
                if (!showtimeId || !seatId) {
                    throw new Error('Thi·∫øu th√¥ng tin showtimeId ho·∫∑c seatId');
                }

                // ‚úÖ Validation: Ki·ªÉm tra seatId h·ª£p l·ªá
                if (seatId === 'undefined' || seatId === 'undefinedundefined' || typeof seatId !== 'string' || seatId.trim() === '') {
                    console.error(`‚ùå [WEBSOCKET] seatId kh√¥ng h·ª£p l·ªá t·ª´ client:`, seatId);
                    socket.emit('error', { message: 'ID gh·∫ø kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i.' });
                    return;
                }

                // Ki·ªÉm tra xung ƒë·ªôt v·ªõi database
                try {
                    const hasConflict = await seatSelectionService.checkSeatConflictInDatabase(showtimeId, seatId);
                    if (hasConflict) {
                        socket.emit('seat-conflict', { seatId, message: 'Gh·∫ø n√†y ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t' });
                        
                        // G·ª≠i l·∫°i tr·∫°ng th√°i gh·∫ø m·ªõi nh·∫•t
                        const seats = await seatSelectionService.getShowtimeSeats(showtimeId);
                        const validSeats = Array.isArray(seats) ? seats : [];
                        socket.emit('seats-state', validSeats);
                        return;
                    }
                } catch (conflictError) {
                    console.error(`‚ùå Error checking seat conflict: ${conflictError.message}`);
                    socket.emit('error', { message: `Kh√¥ng th·ªÉ ki·ªÉm tra tr·∫°ng th√°i gh·∫ø: ${conflictError.message}` });
                    return;
                }

                // Th·ª±c hi·ªán ch·ªçn gh·∫ø
                try {
                    const result = await seatSelectionService.selectSeat(showtimeId, seatId, userId, socket.id);
                    
                    if (!result.success) {
                        socket.emit('error', { message: result.message || 'Kh√¥ng th·ªÉ ch·ªçn gh·∫ø' });
                        return;
                    }
                } catch (selectError) {
                    console.error(`‚ùå Error selecting seat: ${selectError.message}`);
                    socket.emit('error', { message: `Kh√¥ng th·ªÉ ch·ªçn gh·∫ø: ${selectError.message}` });
                    return;
                }

                // Broadcast tr·∫°ng th√°i gh·∫ø m·ªõi cho t·∫•t c·∫£ ng∆∞·ªùi d√πng trong room
                try {
                    const roomName = `showtime-${showtimeId}`;

                    // üîß DEBUG: Ki·ªÉm tra s·ªë l∆∞·ª£ng clients trong room
                    const roomClients = io.sockets.adapter.rooms.get(roomName);
                    const clientCount = roomClients ? roomClients.size : 0;
                    console.log(`üì° [BROADCAST] Room ${roomName} c√≥ ${clientCount} clients`);
                    console.log(`üì° [BROADCAST] Clients trong room:`, roomClients ? Array.from(roomClients) : []);

                    const seats = await seatSelectionService.getShowtimeSeats(showtimeId);
                    const validSeats = Array.isArray(seats) ? seats : [];

                    console.log(`üì° [BROADCAST] G·ª≠i seats-state ƒë·∫øn ${clientCount} clients trong room ${roomName}`);
                    io.to(roomName).emit('seats-state', validSeats);

                    // üîÑ QUAN TR·ªåNG: Broadcast seat-selected cho t·∫•t c·∫£ users ƒë·ªÉ cross-tab sync
                    const seatSelectedData = {
                        seatId,
                        userId,
                        status: 'selected',
                        success: true
                    };
                    console.log(`üì° [BROADCAST] G·ª≠i seat-selected ƒë·∫øn ${clientCount} clients:`, seatSelectedData);
                    io.to(roomName).emit('seat-selected', seatSelectedData);
                } catch (broadcastError) {
                    console.error(`‚ùå Error broadcasting seat state: ${broadcastError.message}`);
                    console.error(`‚ùå Full error:`, broadcastError);
                    socket.emit('error', { message: `Gh·∫ø ƒë√£ ƒë∆∞·ª£c ch·ªçn nh∆∞ng kh√¥ng th·ªÉ c·∫≠p nh·∫≠t giao di·ªán: ${broadcastError.message}` });
                }
            } catch (error) {
                console.error(`‚ùå Error handling select-seat:`, error);
                socket.emit('error', { message: `Kh√¥ng th·ªÉ ch·ªçn gh·∫ø: ${error.message}` });
            }
        });

        // B·ªè ch·ªçn gh·∫ø
        socket.on('deselect-seat', async (data) => {
            try {
                let { showtimeId, seatId } = data;

                // Chuy·ªÉn ƒë·ªïi showtimeId th√†nh s·ªë
                showtimeId = ensureNumericShowtimeId(showtimeId || data.showtimeId);

                // ‚úÖ Validation: Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
                if (!showtimeId || !seatId) {
                    throw new Error('Thi·∫øu th√¥ng tin showtimeId ho·∫∑c seatId');
                }

                // ‚úÖ Validation: Ki·ªÉm tra seatId h·ª£p l·ªá
                if (seatId === 'undefined' || seatId === 'undefinedundefined' || typeof seatId !== 'string' || seatId.trim() === '') {
                    console.error(`‚ùå [WEBSOCKET] seatId kh√¥ng h·ª£p l·ªá trong deselect-seat:`, seatId);
                    socket.emit('error', { message: 'ID gh·∫ø kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i.' });
                    return;
                }

                // Th·ª±c hi·ªán b·ªè ch·ªçn gh·∫ø
                try {
                    const result = await seatSelectionService.deselectSeat(showtimeId, seatId, userId);
                    
                    if (!result.success) {
                        socket.emit('error', { message: result.message || 'Kh√¥ng th·ªÉ b·ªè ch·ªçn gh·∫ø' });
                        return;
                    }
                } catch (deselectError) {
                    console.error(`‚ùå Error deselecting seat: ${deselectError.message}`);
                    socket.emit('error', { message: `Kh√¥ng th·ªÉ b·ªè ch·ªçn gh·∫ø: ${deselectError.message}` });
                    return;
                }

                // Broadcast tr·∫°ng th√°i gh·∫ø m·ªõi cho t·∫•t c·∫£ ng∆∞·ªùi d√πng trong room
                try {
                    const roomName = `showtime-${showtimeId}`;
                    const seats = await seatSelectionService.getShowtimeSeats(showtimeId);
                    const validSeats = Array.isArray(seats) ? seats : [];
                    io.to(roomName).emit('seats-state', validSeats);

                    // üîÑ QUAN TR·ªåNG: Broadcast seat-deselected cho t·∫•t c·∫£ users ƒë·ªÉ cross-tab sync
                    io.to(roomName).emit('seat-deselected', {
                        seatId,
                        userId,
                        status: 'available',
                        success: true
                    });
                } catch (broadcastError) {
                    console.error(`‚ùå Error broadcasting seat state: ${broadcastError.message}`);
                    socket.emit('error', { message: `Gh·∫ø ƒë√£ ƒë∆∞·ª£c b·ªè ch·ªçn nh∆∞ng kh√¥ng th·ªÉ c·∫≠p nh·∫≠t giao di·ªán: ${broadcastError.message}` });
                }
            } catch (error) {
                console.error(`‚ùå Error handling deselect-seat:`, error);
                socket.emit('error', { message: `Kh√¥ng th·ªÉ b·ªè ch·ªçn gh·∫ø: ${error.message}` });
            }
        });

        // X√≥a t·∫•t c·∫£ gh·∫ø ƒëang ch·ªçn c·ªßa user
        socket.on('clear-all-seats', async (data) => {
            try {
                // Chuy·ªÉn ƒë·ªïi showtimeId th√†nh s·ªë
                const showtimeId = ensureNumericShowtimeId(data.showtimeId || data);
                
                if (!showtimeId) {
                    throw new Error('ID su·∫•t chi·∫øu kh√¥ng h·ª£p l·ªá');
                }
                
                console.log(`üßπ [CLEAR_ALL_USER_SEATS] Clearing all seats for user ${userId} in showtime ${showtimeId}`);

                // Th·ª±c hi·ªán x√≥a t·∫•t c·∫£ gh·∫ø
                try {
                    const result = await seatSelectionService.clearAllUserSeats(showtimeId, userId);
                    
                    if (!result.success) {
                        socket.emit('error', { message: result.message || 'Kh√¥ng th·ªÉ x√≥a gh·∫ø' });
                        return;
                    }
                    
                    console.log(`‚úÖ All seats cleared for user ${userId} in showtime ${showtimeId}`);
                } catch (clearError) {
                    console.error(`‚ùå Error clearing seats: ${clearError.message}`);
                    socket.emit('error', { message: `Kh√¥ng th·ªÉ x√≥a gh·∫ø: ${clearError.message}` });
                    return;
                }

                // Broadcast tr·∫°ng th√°i gh·∫ø m·ªõi cho t·∫•t c·∫£ ng∆∞·ªùi d√πng trong room
                try {
                const roomName = `showtime-${showtimeId}`;
                    const seats = await seatSelectionService.getShowtimeSeats(showtimeId);
                    const validSeats = Array.isArray(seats) ? seats : [];
                    io.to(roomName).emit('seats-state', validSeats);
                    
                    // G·ª≠i th√¥ng b√°o th√†nh c√¥ng cho ng∆∞·ªùi d√πng
                    socket.emit('seats-cleared', { success: true });
                } catch (broadcastError) {
                    console.error(`‚ùå Error broadcasting seat state: ${broadcastError.message}`);
                    socket.emit('error', { message: `Gh·∫ø ƒë√£ ƒë∆∞·ª£c x√≥a nh∆∞ng kh√¥ng th·ªÉ c·∫≠p nh·∫≠t giao di·ªán: ${broadcastError.message}` });
                }
            } catch (error) {
                console.error(`‚ùå Error handling clear-all-seats:`, error);
                socket.emit('error', { message: `Kh√¥ng th·ªÉ x√≥a gh·∫ø: ${error.message}` });
            }
        });

        // X√°c nh·∫≠n ƒë·∫∑t gh·∫ø
        socket.on('confirm-booking', async (data) => {
            try {
                let { showtimeId, seatIds, totalAmount } = data;

                // Chuy·ªÉn ƒë·ªïi showtimeId th√†nh s·ªë
                showtimeId = ensureNumericShowtimeId(showtimeId || data.showtimeId);
                
                if (!showtimeId || !seatIds || !Array.isArray(seatIds)) {
                    throw new Error('Invalid booking data');
                }

                // Th·ª±c hi·ªán x√°c nh·∫≠n ƒë·∫∑t gh·∫ø
                const result = await seatSelectionService.confirmSeatBooking(showtimeId, seatIds, userId, totalAmount);

                // Broadcast tr·∫°ng th√°i gh·∫ø m·ªõi cho t·∫•t c·∫£ ng∆∞·ªùi d√πng trong room
                    const roomName = `showtime-${showtimeId}`;
                const seats = await seatSelectionService.getShowtimeSeats(showtimeId);
                io.to(roomName).emit('seats-state', seats);

                // G·ª≠i th√¥ng b√°o th√†nh c√¥ng cho ng∆∞·ªùi d√πng
                    socket.emit('booking-confirmed', {
                    success: true,
                    bookingId: result.bookingId,
                    message: `ƒê√£ ƒë·∫∑t ${seatIds.length} gh·∫ø th√†nh c√¥ng`
                });
            } catch (error) {
                console.error(`‚ùå Error handling confirm-booking:`, error);
                socket.emit('error', { message: `Kh√¥ng th·ªÉ x√°c nh·∫≠n ƒë·∫∑t gh·∫ø: ${error.message}` });
            }
        });

        // L·∫•y tr·∫°ng th√°i gh·∫ø hi·ªán t·∫°i
        socket.on('get-seats-state', async (data) => {
            try {
                // Chuy·ªÉn ƒë·ªïi showtimeId th√†nh s·ªë
                const showtimeId = ensureNumericShowtimeId(data.showtimeId || data);
                
                if (!showtimeId) {
                    throw new Error('Invalid showtime ID format');
                }
                
                const seats = await seatSelectionService.getShowtimeSeats(showtimeId);
                socket.emit('seats-state', seats);
            } catch (error) {
                console.error(`‚ùå Error handling get-seats-state:`, error);
                socket.emit('error', { message: `Kh√¥ng th·ªÉ l·∫•y tr·∫°ng th√°i gh·∫ø: ${error.message}` });
            }
        });

        // Gia h·∫°n th·ªùi gian gi·ªØ gh·∫ø
        socket.on('extend-seat-hold', async (data) => {
            try {
                let { showtimeId, seatId } = data;

                // Chuy·ªÉn ƒë·ªïi showtimeId th√†nh s·ªë
                showtimeId = ensureNumericShowtimeId(showtimeId || data.showtimeId);

                if (!showtimeId || !seatId) {
                    throw new Error('Missing or invalid showtimeId or seatId');
                }

                // Th·ª±c hi·ªán gia h·∫°n
                const result = await seatSelectionService.extendSeatHold(showtimeId, seatId, userId);

                // G·ª≠i th√¥ng b√°o th√†nh c√¥ng cho ng∆∞·ªùi d√πng
                socket.emit('seat-hold-extended', {
                    seatId,
                    success: true,
                    newExpiration: result.newExpiration
                });
            } catch (error) {
                console.error(`‚ùå Error handling extend-seat-hold:`, error);
                socket.emit('error', { message: `Kh√¥ng th·ªÉ gia h·∫°n th·ªùi gian gi·ªØ gh·∫ø: ${error.message}` });
            }
        });

        // L·∫•y th·ªëng k√™ gh·∫ø
        socket.on('get-seat-statistics', async () => {
            try {
                const statistics = await seatSelectionService.getSeatStatistics();
                socket.emit('seat-statistics', statistics);
            } catch (error) {
                console.error(`‚ùå Error handling get-seat-statistics:`, error);
                socket.emit('error', { message: `Kh√¥ng th·ªÉ l·∫•y th·ªëng k√™ gh·∫ø: ${error.message}` });
            }
        });
    });
};

// Export getIO function ƒë·ªÉ s·ª≠ d·ª•ng ·ªü n∆°i kh√°c
const getIO = () => {
    if (!io) {
        throw new Error('Socket.IO ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o. H√£y g·ªçi initSocketHandlers tr∆∞·ªõc.');
    }
    return io;
};

module.exports = {
    initSocketHandlers,
    getIO
};