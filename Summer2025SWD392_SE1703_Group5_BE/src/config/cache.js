// File: src/config/cache.js
// M√¥ t·∫£: C·∫•u h√¨nh cache th·ªëng nh·∫•t - h·ªó tr·ª£ c·∫£ Redis v√† Memory Cache

const NodeCache = require('node-cache'); // Import th∆∞ vi·ªán NodeCache.
const { getRedisInstance } = require('./redisCache'); // Import Redis cache

let cacheInstance = null; // Bi·∫øn ƒë·ªÉ l∆∞u tr·ªØ instance cache (Singleton pattern).
let useRedis = false; // Flag ƒë·ªÉ x√°c ƒë·ªãnh s·ª≠ d·ª•ng Redis hay Memory Cache

/**
 * Kh·ªüi t·∫°o cache service - Redis ho·∫∑c Memory Cache
 */
async function initializeCache() {
    const shouldUseRedis = process.env.USE_REDIS === 'true';

    if (shouldUseRedis) {
        console.log('[cache.js] üîÑ ƒêang kh·ªüi t·∫°o Redis cache...');
        const redisInstance = getRedisInstance();
        const connected = await redisInstance.connect();

        if (connected) {
            console.log('[cache.js] ‚úÖ S·ª≠ d·ª•ng Redis cache');
            cacheInstance = redisInstance;
            useRedis = true;
            return cacheInstance;
        } else {
            console.log('[cache.js] ‚ö†Ô∏è Redis k·∫øt n·ªëi th·∫•t b·∫°i, fallback sang Memory cache');
        }
    }

    // Fallback ho·∫∑c s·ª≠ d·ª•ng Memory Cache
    console.log('[cache.js] üîÑ ƒêang kh·ªüi t·∫°o Memory cache...');
    cacheInstance = new NodeCache({
        stdTTL: 86400, // 24 hours
        checkperiod: 600, // Check for expired items every 10 minutes
    });
    useRedis = false;
    console.log('[cache.js] ‚úÖ S·ª≠ d·ª•ng Memory cache (NodeCache)');
    return cacheInstance;
}

/**
 * L·∫•y instance cache (Redis ho·∫∑c Memory)
 */
async function getCacheInstance() {
    if (!cacheInstance) {
        await initializeCache();
    }
    return cacheInstance;
}

/**
 * Wrapper methods ƒë·ªÉ th·ªëng nh·∫•t API gi·ªØa Redis v√† Memory Cache
 */
const CacheService = {
    async get(key) {
        const cache = await getCacheInstance();
        if (useRedis) {
            return await cache.get(key);
        } else {
            return cache.get(key) || null;
        }
    },

    async set(key, value, ttl = 86400) {
        const cache = await getCacheInstance();
        if (useRedis) {
            return await cache.set(key, value, ttl);
        } else {
            return cache.set(key, value, ttl);
        }
    },

    async del(key) {
        const cache = await getCacheInstance();
        if (useRedis) {
            return await cache.del(key);
        } else {
            return cache.del(key);
        }
    },

    async flushAll() {
        const cache = await getCacheInstance();
        if (useRedis) {
            return await cache.flushAll();
        } else {
            cache.flushAll();
            return true;
        }
    },

    async exists(key) {
        const cache = await getCacheInstance();
        if (useRedis) {
            return await cache.exists(key);
        } else {
            return cache.has(key);
        }
    },

    isRedis() {
        return useRedis;
    },

    async getStats() {
        const cache = await getCacheInstance();
        if (useRedis) {
            return await cache.getInfo();
        } else {
            return {
                connected: true,
                type: 'memory',
                keys: cache.keys().length,
                stats: cache.getStats()
            };
        }
    },

    // Th√™m method ƒë·ªÉ l·∫•y cache instance tr·ª±c ti·∫øp
    async getCacheInstance() {
        return await getCacheInstance();
    }
};

// Export c√°c functions v√† CacheService
module.exports = {
    get: getCacheInstance,
    CacheService,
    initializeCache
};