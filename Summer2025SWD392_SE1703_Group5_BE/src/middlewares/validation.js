// src/middlewares/validation.js
const { body, param, query, validationResult } = require('express-validator');

/**
 * Helper function: Ki·ªÉm tra ƒë·ªô m·∫°nh c·ªßa m·∫≠t kh·∫©u
 * @param {string} password - M·∫≠t kh·∫©u c·∫ßn ki·ªÉm tra
 * @returns {Object} - K·∫øt qu·∫£ ki·ªÉm tra password
 */
function checkPasswordStrength(password) {

    const result = {
        isValid: false,
        score: 0,
        errors: [],
        checks: {
            length: false,
            lowercase: false,
            uppercase: false,
            number: false,
            special: false
        }
    };

    if (!password) {
        result.errors.push('M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng');
        return result;
    }

    // Ki·ªÉm tra ƒë·ªô d√†i
    if (password.length >= 8 && password.length <= 50) {
        result.checks.length = true;
        result.score++;
    } else if (password.length < 8) {
        result.errors.push('M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 8 k√Ω t·ª±');
    } else {
        result.errors.push('M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c qu√° 50 k√Ω t·ª±');
    }

    // Ki·ªÉm tra ch·ªØ th∆∞·ªùng
    if (/[a-z]/.test(password)) {
        result.checks.lowercase = true;
        result.score++;
    } else {
        result.errors.push('M·∫≠t kh·∫©u ph·∫£i ch·ª©a √≠t nh·∫•t 1 ch·ªØ c√°i th∆∞·ªùng (a-z)');
    }

    // Ki·ªÉm tra ch·ªØ hoa
    if (/[A-Z]/.test(password)) {
        result.checks.uppercase = true;
        result.score++;
    } else {
        result.errors.push('M·∫≠t kh·∫©u ph·∫£i ch·ª©a √≠t nh·∫•t 1 ch·ªØ c√°i hoa (A-Z)');
    }

    // Ki·ªÉm tra s·ªë
    if (/\d/.test(password)) {
        result.checks.number = true;
        result.score++;
    } else {
        result.errors.push('M·∫≠t kh·∫©u ph·∫£i ch·ª©a √≠t nh·∫•t 1 ch·ªØ s·ªë (0-9)');
    }

    // Ki·ªÉm tra k√Ω t·ª± ƒë·∫∑c bi·ªát
    if (/[!@#$%^&*(),.?":{}|<>]/.test(password)) {
        result.checks.special = true;
        result.score++;
    } else {
        result.errors.push('M·∫≠t kh·∫©u ph·∫£i ch·ª©a √≠t nh·∫•t 1 k√Ω t·ª± ƒë·∫∑c bi·ªát (!@#$%^&*(),.?":{}|<>)');
    }

    // X√°c ƒë·ªãnh m·∫≠t kh·∫©u c√≥ h·ª£p l·ªá kh√¥ng
    result.isValid = result.score === 5;

    return result;
}

/**
 * Helper function: T·∫°o response l·ªói validation chi ti·∫øt
 * @param {Array} errors - Danh s√°ch l·ªói t·ª´ express-validator
 * @returns {Object} - Response object v·ªõi UI c·∫£i thi·ªán
 */
function createDetailedValidationResponse(errors) {
    const errorsByField = {};
    const errorMessages = [];
    let hasPasswordError = false;
    let passwordValidation = null;

    // Chuy·ªÉn ƒë·ªïi t√™n field sang ti·∫øng Vi·ªát
    const fieldTranslations = {
        'newPassword': 'M·∫≠t kh·∫©u m·ªõi',
        'confirmPassword': 'X√°c nh·∫≠n m·∫≠t kh·∫©u',
        'currentPassword': 'M·∫≠t kh·∫©u hi·ªán t·∫°i',
        'Password': 'M·∫≠t kh·∫©u',
        'password': 'M·∫≠t kh·∫©u',
        'Email': 'Email',
        'email': 'Email',
        'FullName': 'H·ªç t√™n',
        'Full_Name': 'H·ªç t√™n',
        'PhoneNumber': 'S·ªë ƒëi·ªán tho·∫°i',
        'Phone_Number': 'S·ªë ƒëi·ªán tho·∫°i',
        'DateOfBirth': 'Ng√†y sinh',
        'Date_Of_Birth': 'Ng√†y sinh'
    };

    errors.forEach(error => {
        const field = error.path || error.param;
        const message = error.msg;
        const friendlyFieldName = fieldTranslations[field] || field;

        if (!errorsByField[field]) {
            errorsByField[field] = [];
        }
        errorsByField[field].push(message);
        errorMessages.push(`${friendlyFieldName}: ${message}`);

        // Ki·ªÉm tra n·∫øu c√≥ l·ªói password ƒë·ªÉ th√™m validation chi ti·∫øt
        if (['newPassword', 'Password', 'password'].includes(field)) {
            hasPasswordError = true;
        }
    });

    const response = {
        success: false,
        message: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i c√°c th√¥ng tin sau:',
        errors: errorMessages,
        errorDetails: errorsByField
    };

    // Th√™m th√¥ng tin chi ti·∫øt cho l·ªói password
    if (hasPasswordError) {
        response.passwordHint = 'V√≠ d·ª• m·∫≠t kh·∫©u h·ª£p l·ªá: "MyPass123@", "SecureP@ssw0rd", "Hello123!"';
        response.passwordRequirements = {
            title: 'M·∫≠t kh·∫©u ph·∫£i ch·ª©a:',
            requirements: [
                { text: 'T·ª´ 8-50 k√Ω t·ª±', icon: 'üìè' },
                { text: '√çt nh·∫•t 1 ch·ªØ th∆∞·ªùng (a-z)', icon: 'üî§' },
                { text: '√çt nh·∫•t 1 ch·ªØ hoa (A-Z)', icon: 'üî†' },
                { text: '√çt nh·∫•t 1 s·ªë (0-9)', icon: 'üî¢' },
                { text: '√çt nh·∫•t 1 k√Ω t·ª± ƒë·∫∑c bi·ªát (!@#$...)', icon: 'üî£' }
            ]
        };
        response.suggestions = [
            'S·ª≠ d·ª•ng c·ª•m t·ª´ d·ªÖ nh·ªõ k·∫øt h·ª£p v·ªõi s·ªë v√† k√Ω t·ª± ƒë·∫∑c bi·ªát',
            'Tr√°nh s·ª≠ d·ª•ng th√¥ng tin c√° nh√¢n nh∆∞ t√™n, ng√†y sinh',
            'Kh√¥ng s·ª≠ d·ª•ng m·∫≠t kh·∫©u gi·ªëng v·ªõi c√°c t√†i kho·∫£n kh√°c'
        ];
    }

    return response;
}

/**
 * Middleware x·ª≠ l√Ω l·ªói validation v·ªõi UI t·ªët h∆°n
 */
const handleValidationErrors = (req, res, next) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        // S·ª≠ d·ª•ng helper function ƒë·ªÉ t·∫°o response chi ti·∫øt
        const detailedResponse = createDetailedValidationResponse(errors.array());
        return res.status(400).json(detailedResponse);
    }
    next();
};

// ==================== CINEMA VALIDATION ====================
const cinemaValidation = {
    create: [
        body('Cinema_Name')
            .notEmpty()
            .withMessage('T√™n r·∫°p phim kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng')
            .isLength({ min: 3, max: 255 })
            .withMessage('T√™n r·∫°p phim ph·∫£i t·ª´ 3-255 k√Ω t·ª±'),

        body('Address')
            .notEmpty()
            .withMessage('ƒê·ªãa ch·ªâ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng')
            .isLength({ min: 10, max: 500 })
            .withMessage('ƒê·ªãa ch·ªâ ph·∫£i t·ª´ 10-500 k√Ω t·ª±'),

        body('City')
            .notEmpty()
            .withMessage('Th√†nh ph·ªë kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng')
            .isLength({ min: 2, max: 100 })
            .withMessage('T√™n th√†nh ph·ªë ph·∫£i t·ª´ 2-100 k√Ω t·ª±'),

        body('Phone_Number')
            .optional()
            .matches(/^[0-9]{10,11}$/)
            .withMessage('S·ªë ƒëi·ªán tho·∫°i ph·∫£i c√≥ 10-11 ch·ªØ s·ªë')
            .custom((value) => {
                const vnPhoneRegex = /^(0[3|5|7|8|9])[0-9]{8}$|^(84[3|5|7|8|9])[0-9]{8}$/;
                if (!vnPhoneRegex.test(value)) {
                    throw new Error('S·ªë ƒëi·ªán tho·∫°i kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng Vi·ªát Nam');
                }
                return true;
            }),

        body('Email')
            .optional()
            .isEmail()
            .withMessage('Email kh√¥ng h·ª£p l·ªá')
            .normalizeEmail()
            .isLength({ max: 255 })
            .withMessage('Email kh√¥ng ƒë∆∞·ª£c qu√° 255 k√Ω t·ª±'),

        body('Description')
            .optional()
            .isLength({ max: 2000 })
            .withMessage('M√¥ t·∫£ kh√¥ng ƒë∆∞·ª£c qu√° 2000 k√Ω t·ª±'),

        body('Status')
            .optional()
            .isIn(['Active', 'Inactive', 'Under Maintenance', 'Closed'])
            .withMessage('Tr·∫°ng th√°i ph·∫£i l√† Active, Inactive, Under Maintenance ho·∫∑c Closed'),

        handleValidationErrors
    ],

    update: [
        param('id')
            .isInt({ min: 1 })
            .withMessage('ID r·∫°p phim ph·∫£i l√† s·ªë nguy√™n d∆∞∆°ng')
            .toInt(),

        // Middleware x√°c ƒë·ªãnh vai tr√≤ v√† √°p d·ª•ng validation ph√π h·ª£p
        (req, res, next) => {
            const role = req.user && req.user.role ? req.user.role : '';

            // L∆∞u vai tr√≤ v√†o request ƒë·ªÉ s·ª≠ d·ª•ng sau
            req.userRole = role;
            next();
        },

        // C√°c field chung cho c·∫£ Admin v√† Manager
        body('Cinema_Name')
            .optional()
            .isLength({ min: 3, max: 255 })
            .withMessage('T√™n r·∫°p phim ph·∫£i t·ª´ 3-255 k√Ω t·ª±'),

        body('Address')
            .optional()
            .isLength({ min: 10, max: 500 })
            .withMessage('ƒê·ªãa ch·ªâ ph·∫£i t·ª´ 10-500 k√Ω t·ª±'),

        body('City')
            .optional()
            .isLength({ min: 2, max: 100 })
            .withMessage('T√™n th√†nh ph·ªë ph·∫£i t·ª´ 2-100 k√Ω t·ª±'),

        body('Phone_Number')
            .optional()
            .matches(/^[0-9]{10,11}$/)
            .withMessage('S·ªë ƒëi·ªán tho·∫°i ph·∫£i c√≥ 10-11 ch·ªØ s·ªë')
            .custom((value) => {
                if (!value) return true;
                const vnPhoneRegex = /^(0[3|5|7|8|9])[0-9]{8}$|^(84[3|5|7|8|9])[0-9]{8}$/;
                if (!vnPhoneRegex.test(value)) {
                    throw new Error('S·ªë ƒëi·ªán tho·∫°i kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng Vi·ªát Nam');
                }
                return true;
            }),

        body('Description')
            .optional()
            .isLength({ max: 2000 })
            .withMessage('M√¥ t·∫£ kh√¥ng ƒë∆∞·ª£c qu√° 2000 k√Ω t·ª±'),

        body('Status')
            .optional()
            .isIn(['Active', 'Inactive', 'Under Maintenance', 'Closed', 'Deleted'])
            .withMessage('Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá'),

        // Ch·ªâ Admin m·ªõi ƒë∆∞·ª£c ph√©p thay ƒë·ªïi email
        body('Email')
            .optional()
            .custom((value, { req }) => {
                // N·∫øu kh√¥ng ph·∫£i Admin m√† c·ªë g·∫Øng thay ƒë·ªïi email
                if (req.userRole !== 'Admin' && value !== undefined) {
                    throw new Error('Ch·ªâ Admin m·ªõi c√≥ quy·ªÅn thay ƒë·ªïi email c·ªßa r·∫°p phim');
                }

                // N·∫øu l√† Admin, ki·ªÉm tra ƒë·ªãnh d·∫°ng email
                if (value !== undefined) {
                    if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(value)) {
                        throw new Error('Email kh√¥ng h·ª£p l·ªá');
                    }
                    if (value.length > 255) {
                        throw new Error('Email kh√¥ng ƒë∆∞·ª£c qu√° 255 k√Ω t·ª±');
                    }
                }

                return true;
            }),

        handleValidationErrors
    ],

    getById: [
        param('id')
            .isInt({ min: 1 })
            .withMessage('ID r·∫°p phim ph·∫£i l√† s·ªë nguy√™n d∆∞∆°ng')
            .toInt(),
        handleValidationErrors
    ],

    getByCity: [
        param('city')
            .notEmpty()
            .withMessage('Th√†nh ph·ªë kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng')
            .isLength({ min: 2, max: 100 })
            .withMessage('T√™n th√†nh ph·ªë ph·∫£i t·ª´ 2-100 k√Ω t·ª±')
            .custom((value) => {
                // Check if city is just numbers
                if (/^\d+$/.test(value)) {
                    throw new Error('T√™n th√†nh ph·ªë kh√¥ng h·ª£p l·ªá');
                }
                return true;
            }),
        handleValidationErrors
    ],

    delete: [
        param('id')
            .isInt({ min: 1 })
            .withMessage('ID r·∫°p phim ph·∫£i l√† s·ªë nguy√™n d∆∞∆°ng')
            .toInt(),
        handleValidationErrors
    ],

    getShowtimes: [
        param('id')
            .isInt({ min: 1 })
            .withMessage('ID r·∫°p phim ph·∫£i l√† s·ªë nguy√™n d∆∞∆°ng')
            .toInt(),
        query('date')
            .optional()
            .matches(/^\d{4}-\d{2}-\d{2}$/)
            .withMessage('Ng√†y ph·∫£i c√≥ ƒë·ªãnh d·∫°ng YYYY-MM-DD')
            .custom((value) => {
                // Check if the date is valid
                const date = new Date(value);
                if (isNaN(date.getTime())) {
                    throw new Error('Ng√†y kh√¥ng h·ª£p l·ªá');
                }
                return true;
            }),
        handleValidationErrors
    ]
};

// ==================== SEAT LAYOUT VALIDATION ====================
const seatLayoutValidation = {
    // Validation cho Room ID trong params
    validateRoomId: [
        param('roomId')
            .isInt({ min: 1 })
            .withMessage('Room ID ph·∫£i l√† s·ªë nguy√™n d∆∞∆°ng')
            .toInt(),
        handleValidationErrors
    ],

    // Validation cho Showtime ID trong params
    validateShowtimeId: [
        param('showtimeId')
            .isInt({ min: 1 })
            .withMessage('Showtime ID ph·∫£i l√† s·ªë nguy√™n d∆∞∆°ng')
            .toInt(),
        handleValidationErrors
    ],

    // Validation cho Seat ID trong params
    validateSeatId: [
        param('seatId')
            .isInt({ min: 1 })
            .withMessage('Seat ID ph·∫£i l√† s·ªë nguy√™n d∆∞∆°ng')
            .toInt(),
        handleValidationErrors
    ],

    // Validation cho c·∫•u h√¨nh layout gh·∫ø
    configureSeatLayout: [
        param('roomId')
            .isInt({ min: 1 })
            .withMessage('Room ID ph·∫£i l√† s·ªë nguy√™n d∆∞∆°ng')
            .toInt(),

        body('ColumnsPerRow')
            .isInt({ min: 5, max: 20 })
            .withMessage('S·ªë c·ªôt m·ªói h√†ng ph·∫£i t·ª´ 5 ƒë·∫øn 20'),

        body('Rows')
            .isArray({ min: 1 })
            .withMessage('Ph·∫£i c√≥ √≠t nh·∫•t 1 h√†ng gh·∫ø')
            .custom((rows) => {
                if (rows.length > 15) {
                    throw new Error('Kh√¥ng ƒë∆∞·ª£c c√≥ qu√° 15 h√†ng gh·∫ø');
                }
                return true;
            }),

        body('Rows.*.RowLabel')
            .notEmpty()
            .withMessage('T√™n h√†ng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng')
            .isLength({ min: 1, max: 5 })
            .withMessage('T√™n h√†ng ph·∫£i t·ª´ 1-5 k√Ω t·ª±')
            .matches(/^[A-Z]+$/)
            .withMessage('T√™n h√†ng ch·ªâ ƒë∆∞·ª£c ch·ª©a ch·ªØ c√°i in hoa'),

        body('Rows.*.SeatType')
            .optional()
            .isIn(['Standard', 'VIP', 'Premium', 'Economy', 'Couple'])
            .withMessage('Lo·∫°i gh·∫ø ph·∫£i l√† Standard, VIP, Premium, Economy ho·∫∑c Couple'),

        body('Rows.*.EmptyColumns')
            .optional()
            .isArray()
            .withMessage('EmptyColumns ph·∫£i l√† m·ªôt m·∫£ng')
            .custom((emptyColumns, { req }) => {
                if (emptyColumns) {
                    const columnsPerRow = req.body.ColumnsPerRow;

                    // Ki·ªÉm tra t·∫•t c·∫£ gi√° tr·ªã trong EmptyColumns
                    for (const col of emptyColumns) {
                        if (!Number.isInteger(col) || col < 1 || col > columnsPerRow) {
                            throw new Error(`C·ªôt tr·ªëng ${col} kh√¥ng h·ª£p l·ªá. Ph·∫£i t·ª´ 1 ƒë·∫øn ${columnsPerRow}`);
                        }
                    }

                    // Ki·ªÉm tra kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng to√†n b·ªô h√†ng
                    if (emptyColumns.length >= columnsPerRow) {
                        throw new Error('Kh√¥ng th·ªÉ ƒë·ªÉ tr·ªëng to√†n b·ªô h√†ng gh·∫ø');
                    }

                    // Ki·ªÉm tra kh√¥ng c√≥ gi√° tr·ªã tr√πng l·∫∑p
                    const uniqueColumns = [...new Set(emptyColumns)];
                    if (uniqueColumns.length !== emptyColumns.length) {
                        throw new Error('EmptyColumns kh√¥ng ƒë∆∞·ª£c ch·ª©a gi√° tr·ªã tr√πng l·∫∑p');
                    }
                }
                return true;
            }),

        // Custom validation cho to√†n b·ªô c·∫•u h√¨nh
        body()
            .custom((body) => {
                const { Rows, ColumnsPerRow } = body;

                // Ki·ªÉm tra t√™n h√†ng kh√¥ng tr√πng l·∫∑p
                const rowLabels = Rows.map(row => row.RowLabel);
                const uniqueRowLabels = [...new Set(rowLabels)];
                if (uniqueRowLabels.length !== rowLabels.length) {
                    throw new Error('T√™n h√†ng kh√¥ng ƒë∆∞·ª£c tr√πng l·∫∑p');
                }

                // T√≠nh t·ªïng s·ªë gh·∫ø
                let totalSeats = 0;
                for (const row of Rows) {
                    const emptyCount = row.EmptyColumns ? row.EmptyColumns.length : 0;
                    totalSeats += ColumnsPerRow - emptyCount;
                }

                // Ki·ªÉm tra gi·ªõi h·∫°n t·ªïng s·ªë gh·∫ø
                if (totalSeats < 20) {
                    throw new Error(`T·ªïng s·ªë gh·∫ø ph·∫£i √≠t nh·∫•t 20 (hi·ªán t·∫°i: ${totalSeats})`);
                }
                if (totalSeats > 150) {
                    throw new Error(`T·ªïng s·ªë gh·∫ø kh√¥ng ƒë∆∞·ª£c qu√° 150 (hi·ªán t·∫°i: ${totalSeats})`);
                }

                return true;
            }),

        handleValidationErrors
    ],

    // Validation cho c·∫≠p nh·∫≠t tr·∫°ng th√°i gh·∫ø
    updateSeatStatus: [
        param('seatId')
            .isInt({ min: 1 })
            .withMessage('Seat ID ph·∫£i l√† s·ªë nguy√™n d∆∞∆°ng')
            .toInt(),

        body('status')
            .notEmpty()
            .withMessage('Tr·∫°ng th√°i kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng')
            .isIn(['Available', 'Maintenance', 'Blocked', 'OutOfOrder'])
            .withMessage('Tr·∫°ng th√°i ph·∫£i l√† Available, Maintenance, Blocked ho·∫∑c OutOfOrder'),

        body('reason')
            .optional()
            .isLength({ max: 500 })
            .withMessage('L√Ω do kh√¥ng ƒë∆∞·ª£c qu√° 500 k√Ω t·ª±'),

        handleValidationErrors
    ]
};

// ==================== MOVIE VALIDATION ====================
const movieValidation = {
    create: [
        body('Movie_Name')
            .notEmpty()
            .withMessage('T√™n phim kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng')
            .isLength({ min: 1, max: 255 })
            .withMessage('T√™n phim ph·∫£i t·ª´ 1-255 k√Ω t·ª±'),

        body('Release_Date')
            .isISO8601()
            .withMessage('Ng√†y ph√°t h√†nh kh√¥ng h·ª£p l·ªá')
            .custom((value) => {
                if (new Date(value) <= new Date()) {
                    throw new Error('Ng√†y ph√°t h√†nh ph·∫£i trong t∆∞∆°ng lai');
                }
                return true;
            }),

        body('Premiere_Date')
            .optional()
            .isISO8601()
            .withMessage('Ng√†y c√¥ng chi·∫øu kh√¥ng h·ª£p l·ªá')
            .custom((value, { req }) => {
                if (!value) return true;
                const releaseDate = req.body.Release_Date;
                if (releaseDate && new Date(value) < new Date(releaseDate)) {
                    throw new Error('Ng√†y c√¥ng chi·∫øu kh√¥ng ƒë∆∞·ª£c tr∆∞·ªõc ng√†y ph√°t h√†nh');
                }
                return true;
            }),

        body('Director')
            .notEmpty()
            .withMessage('ƒê·∫°o di·ªÖn kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'),

        body('Duration')
            .isInt({ min: 60 })
            .withMessage('Th·ªùi l∆∞·ª£ng phim ph·∫£i t·ª´ 60 ph√∫t tr·ªü l√™n'),

        body('Genre')
            .notEmpty()
            .withMessage('Th·ªÉ lo·∫°i kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'),

        body('Rating')
            .isIn(['G', 'PG', 'PG-13', 'R', 'NC-17'])
            .withMessage('X·∫øp h·∫°ng ƒë·ªô tu·ªïi kh√¥ng h·ª£p l·ªá'),

        // Validation cho c√°c field optional
        body('End_Date')
            .optional()
            .isISO8601()
            .withMessage('Ng√†y k·∫øt th√∫c kh√¥ng h·ª£p l·ªá'),

        body('Production_Company')
            .optional()
            .isLength({ max: 255 })
            .withMessage('T√™n c√¥ng ty s·∫£n xu·∫•t kh√¥ng ƒë∆∞·ª£c qu√° 255 k√Ω t·ª±'),

        body('Cast')
            .optional()
            .isLength({ max: 1000 })
            .withMessage('Danh s√°ch di·ªÖn vi√™n kh√¥ng ƒë∆∞·ª£c qu√° 1000 k√Ω t·ª±'),

        body('Language')
            .optional()
            .isLength({ max: 100 })
            .withMessage('Ng√¥n ng·ªØ kh√¥ng ƒë∆∞·ª£c qu√° 100 k√Ω t·ª±'),

        body('Country')
            .optional()
            .isLength({ max: 100 })
            .withMessage('Qu·ªëc gia kh√¥ng ƒë∆∞·ª£c qu√° 100 k√Ω t·ª±'),

        body('Synopsis')
            .optional()
            .isLength({ max: 2000 })
            .withMessage('T√≥m t·∫Øt kh√¥ng ƒë∆∞·ª£c qu√° 2000 k√Ω t·ª±'),

        body('Trailer_Link')
            .optional()
            .custom((value) => {
                // Cho ph√©p null, undefined ho·∫∑c chu·ªói r·ªóng
                if (!value || value === '') return true;

                // N·∫øu kh√¥ng ph·∫£i URL h·ª£p l·ªá, b√°o l·ªói
                try {
                    new URL(value);
                    return true;
                } catch (err) {
                    throw new Error('Link trailer ph·∫£i l√† URL h·ª£p l·ªá ho·∫∑c ƒë·ªÉ tr·ªëng');
                }
            }),

        body('Status')
            .optional()
            .isIn(['Coming Soon', 'Now Showing', 'Ended', 'Cancelled'])
            .withMessage('Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá'),

        handleValidationErrors
    ],

    update: [
        body('Movie_Name')
            .optional()
            .isLength({ min: 1, max: 255 })
            .withMessage('T√™n phim ph·∫£i t·ª´ 1-255 k√Ω t·ª±'),

        body('Release_Date')
            .optional()
            .isISO8601()
            .withMessage('Ng√†y ph√°t h√†nh kh√¥ng h·ª£p l·ªá'),

        body('Premiere_Date')
            .optional()
            .isISO8601()
            .withMessage('Ng√†y c√¥ng chi·∫øu kh√¥ng h·ª£p l·ªá')
            .custom((value, { req }) => {
                if (!value) return true;
                const releaseDate = req.body.Release_Date;
                if (releaseDate && new Date(value) < new Date(releaseDate)) {
                    throw new Error('Ng√†y c√¥ng chi·∫øu kh√¥ng ƒë∆∞·ª£c tr∆∞·ªõc ng√†y ph√°t h√†nh');
                }
                return true;
            }),

        body('Director')
            .optional()
            .notEmpty()
            .withMessage('ƒê·∫°o di·ªÖn kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'),

        body('Duration')
            .optional()
            .isInt({ min: 60 })
            .withMessage('Th·ªùi l∆∞·ª£ng phim ph·∫£i t·ª´ 60 ph√∫t tr·ªü l√™n'),

        body('Genre')
            .optional()
            .notEmpty()
            .withMessage('Th·ªÉ lo·∫°i kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'),

        body('Rating')
            .optional()
            .isIn(['G', 'PG', 'PG-13', 'R', 'NC-17'])
            .withMessage('X·∫øp h·∫°ng ƒë·ªô tu·ªïi kh√¥ng h·ª£p l·ªá'),

        // C√°c field optional kh√°c
        body('End_Date')
            .optional()
            .isISO8601()
            .withMessage('Ng√†y k·∫øt th√∫c kh√¥ng h·ª£p l·ªá'),

        body('Production_Company')
            .optional()
            .isLength({ max: 255 })
            .withMessage('T√™n c√¥ng ty s·∫£n xu·∫•t kh√¥ng ƒë∆∞·ª£c qu√° 255 k√Ω t·ª±'),

        body('Cast')
            .optional()
            .isLength({ max: 1000 })
            .withMessage('Danh s√°ch di·ªÖn vi√™n kh√¥ng ƒë∆∞·ª£c qu√° 1000 k√Ω t·ª±'),

        body('Language')
            .optional()
            .isLength({ max: 100 })
            .withMessage('Ng√¥n ng·ªØ kh√¥ng ƒë∆∞·ª£c qu√° 100 k√Ω t·ª±'),

        body('Country')
            .optional()
            .isLength({ max: 100 })
            .withMessage('Qu·ªëc gia kh√¥ng ƒë∆∞·ª£c qu√° 100 k√Ω t·ª±'),

        body('Synopsis')
            .optional()
            .isLength({ max: 2000 })
            .withMessage('T√≥m t·∫Øt kh√¥ng ƒë∆∞·ª£c qu√° 2000 k√Ω t·ª±'),

        body('Trailer_Link')
            .optional()
            .custom((value) => {
                // Cho ph√©p null, undefined ho·∫∑c chu·ªói r·ªóng
                if (!value || value === '') return true;

                // N·∫øu kh√¥ng ph·∫£i URL h·ª£p l·ªá, b√°o l·ªói
                try {
                    new URL(value);
                    return true;
                } catch (err) {
                    throw new Error('Link trailer ph·∫£i l√† URL h·ª£p l·ªá ho·∫∑c ƒë·ªÉ tr·ªëng');
                }
            }),

        body('Status')
            .optional()
            .isIn(['Coming Soon', 'Now Showing', 'Ended', 'Cancelled'])
            .withMessage('Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá'),

        handleValidationErrors
    ]
};

// ==================== RATING VALIDATION ====================
const ratingValidation = [
    body('Rating')
        .isInt({ min: 1, max: 5 })
        .withMessage('ƒê√°nh gi√° ph·∫£i t·ª´ 1-5 sao'),

    body('Comment')
        .optional()
        .isLength({ max: 500 })
        .withMessage('B√¨nh lu·∫≠n kh√¥ng ƒë∆∞·ª£c qu√° 500 k√Ω t·ª±'),

    handleValidationErrors
];

// ==================== MEMBER VALIDATION ====================
const memberValidation = {
    // Validation cho vi·ªác t√¨m ki·∫øm theo phone
    lookupByPhone: [
        param('phoneNumber')
            .matches(/^[0-9]{10,11}$/)
            .withMessage('S·ªë ƒëi·ªán tho·∫°i ph·∫£i c√≥ 10-11 ch·ªØ s·ªë v√† ch·ªâ ch·ª©a s·ªë')
            .custom((value) => {
                // Ki·ªÉm tra format s·ªë ƒëi·ªán tho·∫°i Vi·ªát Nam
                const vnPhoneRegex = /^(0[3|5|7|8|9])[0-9]{8}$|^(84[3|5|7|8|9])[0-9]{8}$/;
                if (!vnPhoneRegex.test(value)) {
                    throw new Error('S·ªë ƒëi·ªán tho·∫°i kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng Vi·ªát Nam');
                }
                return true;
            }),
        handleValidationErrors
    ],

    // Validation cho vi·ªác t√¨m ki·∫øm theo email
    lookupByEmail: [
        param('email')
            .isEmail()
            .withMessage('Email kh√¥ng h·ª£p l·ªá')
            .normalizeEmail()
            .isLength({ max: 255 })
            .withMessage('Email kh√¥ng ƒë∆∞·ª£c qu√° 255 k√Ω t·ª±'),
        handleValidationErrors
    ],

    // Validation cho User ID trong params
    validateUserId: [
        param('userId')
            .isInt({ min: 1 })
            .withMessage('User ID ph·∫£i l√† s·ªë nguy√™n d∆∞∆°ng')
            .toInt(),
        handleValidationErrors
    ],

    // Validation cho vi·ªác c·∫≠p nh·∫≠t th√¥ng tin member
    updateProfile: [
        // Validation for FullName / Full_Name
        body(['FullName', 'Full_Name'])
            .optional()
            .custom((value, { req }) => {
                const fullName = req.body.FullName || req.body.Full_Name;
                if (fullName === undefined || fullName === null) return true;

                if (typeof fullName !== 'string' || fullName.trim().length < 2 || fullName.trim().length > 100) {
                    throw new Error('H·ªç t√™n ph·∫£i c√≥ t·ª´ 2-100 k√Ω t·ª±.');
                }
                if (!/^[\p{L}\s]+$/u.test(fullName)) {
                    throw new Error('H·ªç t√™n ch·ªâ ƒë∆∞·ª£c ch·ª©a ch·ªØ c√°i v√† kho·∫£ng tr·∫Øng.');
                }
                req.body.Full_Name = fullName.trim();
                req.body.FullName = fullName.trim();
                return true;
            }),

        // Email validation is kept simple as it's less likely to have casing issues
        body('Email')
            .optional()
            .isEmail().withMessage('Email kh√¥ng h·ª£p l·ªá.')
            .normalizeEmail()
            .isLength({ max: 255 }).withMessage('Email kh√¥ng ƒë∆∞·ª£c qu√° 255 k√Ω t·ª±.'),

        // Validation for PhoneNumber / Phone_Number
        body(['PhoneNumber', 'Phone_Number'])
            .optional()
            .custom(async (value, { req }) => {
                const phoneNumber = req.body.PhoneNumber || req.body.Phone_Number;
                if (phoneNumber === undefined || phoneNumber === null) return true;

                const vnPhoneRegex = /^(0[3|5|7|8|9])[0-9]{8}$/;
                if (!vnPhoneRegex.test(phoneNumber)) {
                    throw new Error('S·ªë ƒëi·ªán tho·∫°i kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng Vi·ªát Nam (10 s·ªë, b·∫Øt ƒë·∫ßu b·∫±ng 03, 05, 07, 08, 09).');
                }

                const userId = req.user?.id || req.user?.userId;
                if (!userId) {
                    throw new Error('Kh√¥ng th·ªÉ x√°c th·ª±c ng∆∞·ªùi d√πng ƒë·ªÉ ki·ªÉm tra s·ªë ƒëi·ªán tho·∫°i.');
                }

                const UserRepository = require('../repositories/userRepository');
                const existingUser = await UserRepository.findByPhoneNumber(phoneNumber);
                if (existingUser && existingUser.User_ID !== userId) {
                    throw new Error('S·ªë ƒëi·ªán tho·∫°i ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng b·ªüi t√†i kho·∫£n kh√°c.');
                }
                req.body.Phone_Number = phoneNumber;
                req.body.PhoneNumber = phoneNumber;
                return true;
            }),

        // Validation for DateOfBirth / Date_Of_Birth
        body(['DateOfBirth', 'Date_Of_Birth'])
            .optional()
            .custom((value, { req }) => {
                const dateOfBirth = req.body.DateOfBirth || req.body.Date_Of_Birth;
                if (dateOfBirth === undefined || dateOfBirth === null) return true;

                if (!/^\d{4}-\d{2}-\d{2}$/.test(dateOfBirth)) {
                    throw new Error('Ng√†y sinh ph·∫£i c√≥ ƒë·ªãnh d·∫°ng YYYY-MM-DD.');
                }

                const birthDate = new Date(dateOfBirth);
                if (isNaN(birthDate.getTime())) {
                    throw new Error('Ng√†y sinh kh√¥ng h·ª£p l·ªá.');
                }

                const today = new Date();
                today.setHours(0, 0, 0, 0);

                if (birthDate > today) {
                    throw new Error('Ng√†y sinh kh√¥ng th·ªÉ l√† m·ªôt ng√†y trong t∆∞∆°ng lai.');
                }

                let age = today.getFullYear() - birthDate.getFullYear();
                const m = today.getMonth() - birthDate.getMonth();
                if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {
                    age--;
                }

                if (age < 13) {
                    throw new Error('Ng∆∞·ªùi d√πng ph·∫£i √≠t nh·∫•t 13 tu·ªïi.');
                }
                if (age > 120) {
                    throw new Error('Tu·ªïi kh√¥ng h·ª£p l·ªá (ph·∫£i nh·ªè h∆°n 120).');
                }

                req.body.Date_Of_Birth = dateOfBirth;
                req.body.DateOfBirth = dateOfBirth;
                return true;
            }),

        // Validation for Sex / Gender
        body(['Sex', 'Gender'])
            .optional()
            .isIn(['Male', 'Female', 'Other'])
            .withMessage('Gi·ªõi t√≠nh ph·∫£i l√† Male, Female ho·∫∑c Other.'),

        // Validation for Address
        body('Address')
            .optional()
            .trim()
            .isLength({ max: 500 })
            .withMessage('ƒê·ªãa ch·ªâ kh√¥ng ƒë∆∞·ª£c qu√° 500 k√Ω t·ª±.'),

        handleValidationErrors
    ],

    // Validation cho pagination
    pagination: [
        query('page')
            .optional()
            .isInt({ min: 1 })
            .withMessage('Page ph·∫£i l√† s·ªë nguy√™n d∆∞∆°ng')
            .toInt(),

        query('limit')
            .optional()
            .isInt({ min: 1, max: 100 })
            .withMessage('Limit ph·∫£i l√† s·ªë nguy√™n t·ª´ 1-100')
            .toInt(),

        handleValidationErrors
    ]
};

// ==================== AUTH VALIDATION ====================
const authValidation = {
    register: [
        // Ki·ªÉm tra c·∫£ FullName v√† Full_Name ƒë·ªÉ h·ªó tr·ª£ c·∫£ hai ki·ªÉu g·ªçi API
        body(['FullName', 'Full_Name'])
            .custom((value, { req }) => {
                // L·∫•y gi√° tr·ªã t·ª´ c·∫£ hai tr∆∞·ªùng c√≥ th·ªÉ c√≥
                const fullName = value || req.body.FullName || req.body.Full_Name;
                if (!fullName) {
                    throw new Error('H·ªç t√™n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng');
                }
                if (fullName.length < 2 || fullName.length > 100) {
                    throw new Error('H·ªç t√™n ph·∫£i c√≥ t·ª´ 2-100 k√Ω t·ª±');
                }
                // Cho ph√©p t√™n ti·∫øng Vi·ªát v√† c√°c k√Ω t·ª± Unicode kh√°c
                if (!/^[\p{L}\s]+$/u.test(fullName)) {
                    throw new Error('H·ªç t√™n ch·ªâ ƒë∆∞·ª£c ch·ª©a ch·ªØ c√°i v√† kho·∫£ng tr·∫Øng');
                }

                // L∆∞u gi√° tr·ªã v√†o c·∫£ hai tr∆∞·ªùng ƒë·ªÉ ƒë·∫£m b·∫£o t∆∞∆°ng th√≠ch
                req.body.FullName = fullName;
                req.body.Full_Name = fullName;
                return true;
            }),

        body(['Email'])
            .custom((value, { req }) => {
                const email = value || req.body.Email || req.body.email;
                if (!email) {
                    throw new Error('Email kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng');
                }
                if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
                    throw new Error('Email kh√¥ng h·ª£p l·ªá');
                }
                if (email.length > 255) {
                    throw new Error('Email kh√¥ng ƒë∆∞·ª£c qu√° 255 k√Ω t·ª±');
                }

                // L∆∞u gi√° tr·ªã v√†o c·∫£ hai tr∆∞·ªùng
                req.body.Email = email;
                req.body.email = email;
                return true;
            }),

        body(['Password', 'password'])
            .custom((value, { req }) => {
                const password = value || req.body.Password || req.body.password;
                if (!password) {
                    throw new Error('M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng');
                }
                
                // S·ª≠ d·ª•ng helper function ƒë·ªÉ ki·ªÉm tra password
                const passwordCheck = checkPasswordStrength(password);
                if (!passwordCheck.isValid) {
                    // Tr·∫£ v·ªÅ error ƒë·∫ßu ti√™n ho·∫∑c error t·ªïng h·ª£p
                    throw new Error(passwordCheck.errors[0] || 'M·∫≠t kh·∫©u kh√¥ng ƒë·ªß m·∫°nh');
                }

                // L∆∞u gi√° tr·ªã v√†o c·∫£ hai tr∆∞·ªùng
                req.body.Password = password;
                req.body.password = password;
                return true;
            }),

        body(['ConfirmPassword', 'confirmPassword'])
            .custom((value, { req }) => {
                const confirmPassword = value || req.body.ConfirmPassword || req.body.confirmPassword;
                const password = req.body.Password || req.body.password;

                if (!confirmPassword) {
                    throw new Error('X√°c nh·∫≠n m·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng');
                }
                if (confirmPassword !== password) {
                    throw new Error('M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp v·ªõi m·∫≠t kh·∫©u');
                }

                // L∆∞u gi√° tr·ªã v√†o c·∫£ hai tr∆∞·ªùng
                req.body.ConfirmPassword = confirmPassword;
                req.body.confirmPassword = confirmPassword;
                return true;
            }),

        body(['PhoneNumber', 'Phone_Number'])
            .custom((value, { req }) => {
                const phoneNumber = value || req.body.PhoneNumber || req.body.Phone_Number;

                if (!phoneNumber) {
                    throw new Error('S·ªë ƒëi·ªán tho·∫°i kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng');
                }
                if (!/^[0-9]{10,11}$/.test(phoneNumber)) {
                    throw new Error('S·ªë ƒëi·ªán tho·∫°i ph·∫£i c√≥ 10-11 ch·ªØ s·ªë');
                }

                const vnPhoneRegex = /^(0[3|5|7|8|9])[0-9]{8}$|^(84[3|5|7|8|9])[0-9]{8}$/;
                if (!vnPhoneRegex.test(phoneNumber)) {
                    throw new Error('S·ªë ƒëi·ªán tho·∫°i kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng Vi·ªát Nam');
                }

                // L∆∞u gi√° tr·ªã v√†o c·∫£ hai tr∆∞·ªùng
                req.body.PhoneNumber = phoneNumber;
                req.body.Phone_Number = phoneNumber;
                return true;
            }),

        body(['DateOfBirth', 'Date_Of_Birth'])
            .optional()
            .custom((value, { req }) => {
                const dateOfBirth = value || req.body.DateOfBirth || req.body.Date_Of_Birth;

                if (!dateOfBirth) return true;

                // Ki·ªÉm tra ƒë·ªãnh d·∫°ng ng√†y
                const date = new Date(dateOfBirth);
                if (isNaN(date.getTime())) {
                    throw new Error('Ng√†y sinh kh√¥ng h·ª£p l·ªá');
                }

                // Ki·ªÉm tra tu·ªïi
                const today = new Date();
                const age = today.getFullYear() - date.getFullYear();

                if (age < 13) {
                    throw new Error('Tu·ªïi ph·∫£i t·ª´ 13 tr·ªü l√™n');
                }
                if (age > 120) {
                    throw new Error('Tu·ªïi kh√¥ng ƒë∆∞·ª£c qu√° 120');
                }

                // L∆∞u gi√° tr·ªã v√†o c·∫£ hai tr∆∞·ªùng
                req.body.DateOfBirth = dateOfBirth;
                req.body.Date_Of_Birth = dateOfBirth;
                return true;
            }),

        body(['Sex', 'Gender'])
            .optional()
            .custom((value, { req }) => {
                const sex = value || req.body.Sex || req.body.Gender;

                if (!sex) return true;

                if (!['Male', 'Female', 'Other'].includes(sex)) {
                    throw new Error('Gi·ªõi t√≠nh ph·∫£i l√† Male, Female ho·∫∑c Other');
                }

                // L∆∞u gi√° tr·ªã v√†o c·∫£ hai tr∆∞·ªùng
                req.body.Sex = sex;
                req.body.Gender = sex;
                return true;
            }),

        // Middleware ƒë·ªÉ ƒë·∫£m b·∫£o t·∫•t c·∫£ c√°c tr∆∞·ªùng ƒë·ªÅu ƒë∆∞·ª£c chu·∫©n h√≥a
        (req, res, next) => {
            // ƒê·∫£m b·∫£o t·∫•t c·∫£ c√°c tr∆∞·ªùng ƒë·ªÅu c√≥ c·∫£ d·∫°ng camelCase v√† snake_case
            if (req.body.Address) {
                req.body.address = req.body.Address;
            } else if (req.body.address) {
                req.body.Address = req.body.address;
            }

            next();
        },

        handleValidationErrors
    ],

    login: [
        body('Email')
            .isEmail()
            .withMessage('Email kh√¥ng h·ª£p l·ªá')
            .normalizeEmail(),

        body('Password')
            .notEmpty()
            .withMessage('M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'),

        handleValidationErrors
    ],

    changePassword: [
        body(['currentPassword', 'OldPassword', 'oldPassword'])
            .custom((value, { req }) => {
                const currentPassword = value || req.body.currentPassword || req.body.OldPassword || req.body.oldPassword;
                
                if (!currentPassword) {
                    throw new Error('M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng');
                }
                
                // L∆∞u gi√° tr·ªã v√†o c√°c tr∆∞·ªùng ƒë·ªÉ ƒë·∫£m b·∫£o t∆∞∆°ng th√≠ch
                req.body.currentPassword = currentPassword;
                req.body.OldPassword = currentPassword;
                req.body.oldPassword = currentPassword;
                
                return true;
            }),

        body(['newPassword', 'NewPassword'])
            .custom((value, { req }) => {
                const newPassword = value || req.body.newPassword || req.body.NewPassword;
                
                if (!newPassword) {
                    throw new Error('M·∫≠t kh·∫©u m·ªõi kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng');
                }
                
                // S·ª≠ d·ª•ng helper function ƒë·ªÉ ki·ªÉm tra password
                const passwordCheck = checkPasswordStrength(newPassword);
                if (!passwordCheck.isValid) {
                    throw new Error(passwordCheck.errors[0] || 'M·∫≠t kh·∫©u m·ªõi kh√¥ng ƒë·ªß m·∫°nh');
                }
                
                // L∆∞u gi√° tr·ªã v√†o c√°c tr∆∞·ªùng ƒë·ªÉ ƒë·∫£m b·∫£o t∆∞∆°ng th√≠ch
                req.body.newPassword = newPassword;
                req.body.NewPassword = newPassword;
                
                return true;
            }),

        body(['confirmPassword', 'ConfirmNewPassword', 'confirmNewPassword'])
            .custom((value, { req }) => {
                const confirmPassword = value || req.body.confirmPassword || req.body.ConfirmNewPassword || req.body.confirmNewPassword;
                const newPassword = req.body.newPassword || req.body.NewPassword;
                
                if (!confirmPassword) {
                    throw new Error('X√°c nh·∫≠n m·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng');
                }
                
                if (confirmPassword !== newPassword) {
                    throw new Error('X√°c nh·∫≠n m·∫≠t kh·∫©u kh√¥ng kh·ªõp v·ªõi m·∫≠t kh·∫©u m·ªõi');
                }
                
                // L∆∞u gi√° tr·ªã v√†o c√°c tr∆∞·ªùng ƒë·ªÉ ƒë·∫£m b·∫£o t∆∞∆°ng th√≠ch
                req.body.confirmPassword = confirmPassword;
                req.body.ConfirmNewPassword = confirmPassword;
                req.body.confirmNewPassword = confirmPassword;
                
                return true;
            }),

        handleValidationErrors
    ],

    resetPassword: [
        body('newPassword')
            .custom((value) => {
                if (!value) {
                    throw new Error('M·∫≠t kh·∫©u m·ªõi kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng');
                }
                
                // S·ª≠ d·ª•ng helper function ƒë·ªÉ ki·ªÉm tra password
                const passwordCheck = checkPasswordStrength(value);
                
                if (!passwordCheck.isValid) {
                    throw new Error(passwordCheck.errors[0] || 'M·∫≠t kh·∫©u m·ªõi kh√¥ng ƒë·ªß m·∫°nh');
                }
                
                return true;
            }),

        body('confirmPassword')
            .custom((value, { req }) => {
                if (value !== req.body.newPassword) {
                    throw new Error('X√°c nh·∫≠n m·∫≠t kh·∫©u kh√¥ng kh·ªõp v·ªõi m·∫≠t kh·∫©u m·ªõi');
                }
                
                return true;
            }),

        body('token')
            .notEmpty()
            .withMessage('Token kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'),

        handleValidationErrors
    ]
};

// ==================== BOOKING VALIDATION ====================
const bookingValidation = {
    create: [
        body('showtime_id')
            .isInt({ min: 1 })
            .withMessage('Showtime ID ph·∫£i l√† s·ªë nguy√™n d∆∞∆°ng'),

        body('seats')
            .isArray({ min: 1 })
            .withMessage('Ph·∫£i ch·ªçn √≠t nh·∫•t 1 gh·∫ø')
            .custom((seats) => {
                if (seats.length > 10) {
                    throw new Error('Kh√¥ng th·ªÉ ƒë·∫∑t qu√° 10 gh·∫ø trong 1 l·∫ßn');
                }
                return true;
            }),

        body('seats.*')
            .isString()
            .matches(/^[A-Z][0-9]{1,2}$/)
            .withMessage('M√£ gh·∫ø kh√¥ng h·ª£p l·ªá (v√≠ d·ª•: A1, B12)'),

        body('total_amount')
            .isNumeric()
            .withMessage('T·ªïng ti·ªÅn ph·∫£i l√† s·ªë')
            .custom((value) => {
                if (parseFloat(value) < 0) {
                    throw new Error('T·ªïng ti·ªÅn kh√¥ng th·ªÉ √¢m');
                }
                return true;
            }),

        body('payment_method')
            .optional()
            .isIn(['Cash', 'Card', 'Online', 'Points'])
            .withMessage('Ph∆∞∆°ng th·ª©c thanh to√°n kh√¥ng h·ª£p l·ªá'),

        handleValidationErrors
    ],

    cancel: [
        param('bookingId')
            .isInt({ min: 1 })
            .withMessage('Booking ID ph·∫£i l√† s·ªë nguy√™n d∆∞∆°ng'),

        body('reason')
            .optional()
            .isLength({ max: 500 })
            .withMessage('L√Ω do h·ªßy kh√¥ng ƒë∆∞·ª£c qu√° 500 k√Ω t·ª±'),

        handleValidationErrors
    ]
};

// ==================== SEARCH & FILTER VALIDATION ====================
const searchValidation = {
    movies: [
        query('keyword')
            .optional()
            .trim()
            .isLength({ min: 1, max: 100 })
            .withMessage('T·ª´ kh√≥a t√¨m ki·∫øm ph·∫£i c√≥ t·ª´ 1-100 k√Ω t·ª±'),

        query('genre')
            .optional()
            .trim()
            .isLength({ max: 50 })
            .withMessage('Th·ªÉ lo·∫°i kh√¥ng ƒë∆∞·ª£c qu√° 50 k√Ω t·ª±'),

        query('rating')
            .optional()
            .isIn(['G', 'PG', 'PG-13', 'R', 'NC-17'])
            .withMessage('X·∫øp h·∫°ng ƒë·ªô tu·ªïi kh√¥ng h·ª£p l·ªá'),

        query('status')
            .optional()
            .isIn(['Coming Soon', 'Now Showing', 'Ended', 'Cancelled'])
            .withMessage('Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá'),

        query('sort')
            .optional()
            .isIn(['name', 'release_date', 'rating', 'duration'])
            .withMessage('Tr∆∞·ªùng s·∫Øp x·∫øp kh√¥ng h·ª£p l·ªá'),

        query('order')
            .optional()
            .isIn(['asc', 'desc'])
            .withMessage('Th·ª© t·ª± s·∫Øp x·∫øp ph·∫£i l√† asc ho·∫∑c desc'),

        ...memberValidation.pagination
    ]
};

module.exports = {
    cinemaValidation,
    seatLayoutValidation,  // ‚≠ê TH√äM M·ªöI
    movieValidation,
    ratingValidation,
    memberValidation,
    authValidation,
    bookingValidation,
    searchValidation,
    handleValidationErrors,
    // Helper functions
    checkPasswordStrength,
    createDetailedValidationResponse
};