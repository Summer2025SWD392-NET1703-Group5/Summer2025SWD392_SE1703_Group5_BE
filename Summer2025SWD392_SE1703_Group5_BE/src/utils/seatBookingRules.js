const { SeatLayout, Seat, Ticket, sequelize } = require('../models');
const { Op } = require('sequelize');
const logger = require('./logger');

/**
 * üî¥ PRIORITY 1: SEAT BOOKING RULES HELPER
 * Helper functions ƒë·ªÉ validate c√°c quy t·∫Øc ƒë·∫∑t gh·∫ø
 * 
 * RULES IMPLEMENTED:
 * 1. Adjacent Seat Rule - Gh·∫ø ph·∫£i li·ªÅn k·ªÅ nhau  
 * 2. Gap Prevention Rule - Kh√¥ng ƒë·ªÉ tr·ªëng gh·∫ø l·∫ª
 */

/**
 * üî¥ RULE 1: ADJACENT SEAT VALIDATION
 * Validate gh·∫ø ph·∫£i li·ªÅn k·ªÅ nhau khi ƒë·∫∑t >= 2 gh·∫ø
 */
async function validateAdjacentSeats(seatLayouts, showtimeId, transaction = null) {
  try {
    logger.info(`[ADJACENT RULE] Ki·ªÉm tra gh·∫ø li·ªÅn k·ªÅ cho ${seatLayouts.length} gh·∫ø`);

    // N·∫øu ch·ªâ ƒë·∫∑t 1 gh·∫ø, kh√¥ng c·∫ßn ki·ªÉm tra li·ªÅn k·ªÅ
    if (seatLayouts.length <= 1) {
      logger.info(`[ADJACENT RULE] ‚úÖ Ch·ªâ 1 gh·∫ø - skip validation`);
      return { valid: true, message: 'Ch·ªâ 1 gh·∫ø ƒë∆∞·ª£c ch·ªçn' };
    }

    // Ki·ªÉm tra t·∫•t c·∫£ gh·∫ø c√πng ph√≤ng chi·∫øu
    const roomIds = [...new Set(seatLayouts.map(l => l.Cinema_Room_ID))];
    if (roomIds.length > 1) {
      return {
        valid: false,
        errorCode: 'DIFFERENT_ROOMS',
        message: 'T·∫•t c·∫£ gh·∫ø ph·∫£i trong c√πng m·ªôt ph√≤ng chi·∫øu'
      };
    }

    // Nh√≥m gh·∫ø theo h√†ng
    const seatsByRow = groupSeatsByRow(seatLayouts);
    logger.info(`[ADJACENT RULE] Nh√≥m gh·∫ø: ${Object.keys(seatsByRow).length} h√†ng`);

    // Validate t·ª´ng h√†ng
    for (const [rowLabel, seats] of Object.entries(seatsByRow)) {
      const rowValidation = validateSingleRowAdjacency(seats, rowLabel);
      if (!rowValidation.valid) {
        logger.warn(`[ADJACENT RULE] ‚ùå H√†ng ${rowLabel} kh√¥ng li·ªÅn k·ªÅ`);
        return rowValidation;
      }
    }

    // Ki·ªÉm tra multiple rows (n·∫øu c√≥)
    if (Object.keys(seatsByRow).length > 1) {
      const multiRowValidation = validateMultipleRowsAdjacency(seatsByRow);
      if (!multiRowValidation.valid) {
        logger.warn(`[ADJACENT RULE] ‚ùå Nhi·ªÅu h√†ng kh√¥ng li·ªÅn k·ªÅ`);
        return multiRowValidation;
      }
    }

    logger.info(`[ADJACENT RULE] ‚úÖ T·∫•t c·∫£ gh·∫ø ƒë·ªÅu li·ªÅn k·ªÅ h·ª£p l·ªá`);
    return { valid: true, message: 'T·∫•t c·∫£ gh·∫ø ƒë∆∞·ª£c ch·ªçn ƒë·ªÅu li·ªÅn k·ªÅ nhau' };

  } catch (error) {
    logger.error(`[ADJACENT RULE] L·ªói:`, error);
    throw error;
  }
}

/**
 * üî¥ RULE 2: GAP PREVENTION VALIDATION
 * Validate kh√¥ng ƒë∆∞·ª£c t·∫°o ra gh·∫ø tr·ªëng l·∫ª (orphaned seats)
 */
async function validateGapPrevention(seatLayouts, showtimeId, transaction = null) {
  try {
    logger.info(`[GAP PREVENTION] Ki·ªÉm tra ngƒÉn ch·∫∑n kho·∫£ng tr·ªëng cho showtime ${showtimeId}`);

    if (seatLayouts.length === 0) {
      throw new Error('Kh√¥ng t√¨m th·∫•y gh·∫ø ƒë∆∞·ª£c ch·ªçn');
    }

    const cinemaRoomId = seatLayouts[0].Cinema_Room_ID;
    const selectedLayoutIds = seatLayouts.map(l => l.Layout_ID);

    // L·∫•y t·∫•t c·∫£ gh·∫ø trong ph√≤ng chi·∫øu
    const allLayouts = await SeatLayout.findAll({
      where: {
        Cinema_Room_ID: cinemaRoomId,
        Is_Active: true
      },
      attributes: ['Layout_ID', 'Row_Label', 'Column_Number'],
      order: [['Row_Label', 'ASC'], ['Column_Number', 'ASC']],
      transaction
    });

    // L·∫•y gh·∫ø ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t trong su·∫•t chi·∫øu n√†y
    const bookedLayoutIds = await getBookedLayoutIds(showtimeId, cinemaRoomId, transaction);

    // M√¥ ph·ªèng tr·∫°ng th√°i sau khi ƒë·∫∑t gh·∫ø
    const futureBookedLayouts = new Set([...bookedLayoutIds, ...selectedLayoutIds]);

    // Ki·ªÉm tra gap prevention cho t·ª´ng h√†ng
    const seatsByRow = groupAllSeatsByRow(allLayouts);
    
    for (const [rowLabel, seats] of Object.entries(seatsByRow)) {
      const gapValidation = validateRowGapPrevention(
        seats, 
        futureBookedLayouts, 
        selectedLayoutIds,
        rowLabel
      );
      
      if (!gapValidation.valid) {
        logger.warn(`[GAP PREVENTION] ‚ùå H√†ng ${rowLabel} c√≥ orphaned seat`);
        return gapValidation;
      }
    }

    logger.info(`[GAP PREVENTION] ‚úÖ Kh√¥ng t·∫°o ra kho·∫£ng tr·ªëng kh√¥ng h·ª£p l·ªá`);
    return { valid: true, message: 'Vi·ªác ƒë·∫∑t gh·∫ø kh√¥ng t·∫°o ra kho·∫£ng tr·ªëng kh√¥ng h·ª£p l·ªá' };

  } catch (error) {
    logger.error(`[GAP PREVENTION] L·ªói:`, error);
    throw error;
  }
}

/**
 * MASTER VALIDATION FUNCTION
 * G·ªçi t·∫•t c·∫£ validation rules cho seat booking
 */
async function validateSeatBookingRules(seatLayouts, showtimeId, transaction = null) {
  try {
    logger.info(`[SEAT RULES] üî• B·∫Øt ƒë·∫ßu validate ${seatLayouts.length} gh·∫ø`);

    // Rule 1: Adjacent Seats
    const adjacentResult = await validateAdjacentSeats(seatLayouts, showtimeId, transaction);
    if (!adjacentResult.valid) {
      logger.error(`[SEAT RULES] ‚ùå Adjacent rule failed: ${adjacentResult.message}`);
      return {
        valid: false,
        rule: 'ADJACENT_SEATS',
        ...adjacentResult
      };
    }

    // Rule 2: Gap Prevention
    const gapResult = await validateGapPrevention(seatLayouts, showtimeId, transaction);
    if (!gapResult.valid) {
      logger.error(`[SEAT RULES] ‚ùå Gap prevention failed: ${gapResult.message}`);
      return {
        valid: false,
        rule: 'GAP_PREVENTION',
        ...gapResult
      };
    }

    logger.info(`[SEAT RULES] üéâ T·∫•t c·∫£ rules ƒë·ªÅu PASS!`);
    return {
      valid: true,
      message: 'T·∫•t c·∫£ quy t·∫Øc ƒë·∫∑t gh·∫ø ƒë·ªÅu h·ª£p l·ªá',
      rulesChecked: ['ADJACENT_SEATS', 'GAP_PREVENTION']
    };

  } catch (error) {
    logger.error(`[SEAT RULES] ‚ùå System error:`, error);
    return {
      valid: false,
      rule: 'SYSTEM_ERROR',
      errorCode: 'VALIDATION_ERROR',
      message: `L·ªói h·ªá th·ªëng khi ki·ªÉm tra quy t·∫Øc ƒë·∫∑t gh·∫ø: ${error.message}`
    };
  }
}

// =================== HELPER FUNCTIONS ===================

/**
 * Nh√≥m gh·∫ø theo h√†ng (Row_Label)
 */
function groupSeatsByRow(layouts) {
  const seatsByRow = {};
  layouts.forEach(layout => {
    if (!seatsByRow[layout.Row_Label]) {
      seatsByRow[layout.Row_Label] = [];
    }
    seatsByRow[layout.Row_Label].push(layout);
  });

  // S·∫Øp x·∫øp gh·∫ø trong m·ªói h√†ng theo Column_Number
  Object.keys(seatsByRow).forEach(row => {
    seatsByRow[row].sort((a, b) => a.Column_Number - b.Column_Number);
  });

  return seatsByRow;
}

/**
 * Nh√≥m t·∫•t c·∫£ gh·∫ø theo h√†ng (cho gap prevention)
 */
function groupAllSeatsByRow(allLayouts) {
  const seatsByRow = {};
  allLayouts.forEach(layout => {
    if (!seatsByRow[layout.Row_Label]) {
      seatsByRow[layout.Row_Label] = [];
    }
    seatsByRow[layout.Row_Label].push(layout);
  });

  // S·∫Øp x·∫øp gh·∫ø trong m·ªói h√†ng theo Column_Number
  Object.keys(seatsByRow).forEach(row => {
    seatsByRow[row].sort((a, b) => a.Column_Number - b.Column_Number);
  });

  return seatsByRow;
}

/**
 * Validate gh·∫ø li·ªÅn k·ªÅ trong 1 h√†ng
 */
function validateSingleRowAdjacency(seats, rowLabel) {
  if (seats.length <= 1) return { valid: true };

  const columns = seats.map(s => s.Column_Number).sort((a, b) => a - b);
  
  // Ki·ªÉm tra c√°c gh·∫ø c√≥ li√™n ti·∫øp kh√¥ng
  for (let i = 1; i < columns.length; i++) {
    const gap = columns[i] - columns[i-1];
    if (gap > 1) {
      const missingSeats = [];
      for (let col = columns[i-1] + 1; col < columns[i]; col++) {
        missingSeats.push(`${rowLabel}${col}`);
      }
      
      return {
        valid: false,
        errorCode: 'NOT_ADJACENT',
        message: `Gh·∫ø trong h√†ng ${rowLabel} kh√¥ng li·ªÅn k·ªÅ. Vui l√≤ng ch·ªçn gh·∫ø li·ªÅn k·ªÅ nhau ho·∫∑c th√™m gh·∫ø: ${missingSeats.join(', ')}`,
        suggestedSeats: missingSeats,
        rowLabel
      };
    }
  }

  return { valid: true };
}

/**
 * Validate gh·∫ø li·ªÅn k·ªÅ gi·ªØa nhi·ªÅu h√†ng
 */
function validateMultipleRowsAdjacency(seatsByRow) {
  const rowLabels = Object.keys(seatsByRow).sort();
  
  // Ki·ªÉm tra c√°c h√†ng c√≥ li·ªÅn k·ªÅ nhau kh√¥ng (A, B, C...)
  for (let i = 1; i < rowLabels.length; i++) {
    const currentRow = rowLabels[i];
    const prevRow = rowLabels[i-1];
    
    // Ki·ªÉm tra c√°c h√†ng c√≥ li√™n ti·∫øp trong alphabet kh√¥ng
    if (currentRow.charCodeAt(0) - prevRow.charCodeAt(0) > 1) {
      return {
        valid: false,
        errorCode: 'NON_ADJACENT_ROWS',
        message: `H√†ng ${prevRow} v√† ${currentRow} kh√¥ng li·ªÅn k·ªÅ. Nh√≥m gh·∫ø n√™n ·ªü c√°c h√†ng li·ªÅn k·ªÅ ƒë·ªÉ c√≥ tr·∫£i nghi·ªám xem phim t·ªët nh·∫•t.`,
        suggestion: 'Vui l√≤ng ch·ªçn gh·∫ø trong c√πng m·ªôt h√†ng ho·∫∑c c√°c h√†ng li·ªÅn k·ªÅ'
      };
    }
  }

  // Ki·ªÉm tra s·ªë l∆∞·ª£ng gh·∫ø ·ªü m·ªói h√†ng h·ª£p l√Ω
  for (const [rowLabel, seats] of Object.entries(seatsByRow)) {
    if (seats.length > 8) {
      return {
        valid: false,
        errorCode: 'TOO_MANY_SEATS_PER_ROW',
        message: `H√†ng ${rowLabel} c√≥ ${seats.length} gh·∫ø ƒë∆∞·ª£c ch·ªçn (t·ªëi ƒëa 8 gh·∫ø/h√†ng ƒë·ªÉ ƒë·∫£m b·∫£o tr·∫£i nghi·ªám t·ªët)`,
        suggestion: 'Vui l√≤ng gi·∫£m s·ªë gh·∫ø trong m·ªói h√†ng'
      };
    }
  }

  return { valid: true };
}

/**
 * L·∫•y danh s√°ch Layout_ID ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t
 */
async function getBookedLayoutIds(showtimeId, cinemaRoomId, transaction) {
  try {
    const bookedTickets = await Ticket.findAll({
      where: {
        Showtime_ID: showtimeId,
        Status: { [Op.notIn]: ['Cancelled', 'Expired'] }
      },
      include: [{
        model: Seat,
        as: 'Seat',
        include: [{
          model: SeatLayout,
          as: 'SeatLayout',
          where: {
            Cinema_Room_ID: cinemaRoomId,
            Is_Active: true
          }
        }]
      }],
      transaction
    });

    return bookedTickets
      .filter(ticket => ticket.Seat && ticket.Seat.SeatLayout)
      .map(ticket => ticket.Seat.SeatLayout.Layout_ID);

  } catch (error) {
    logger.error('[getBookedLayoutIds] L·ªói:', error);
    return [];
  }
}

/**
 * Validate gap prevention cho 1 h√†ng
 */
function validateRowGapPrevention(rowSeats, futureBookedLayouts, selectedLayoutIds, rowLabel) {
  // T·∫°o array tr·∫°ng th√°i gh·∫ø trong h√†ng
  const seatStatuses = rowSeats.map(seat => ({
    layoutId: seat.Layout_ID,
    column: seat.Column_Number,
    willBeBooked: futureBookedLayouts.has(seat.Layout_ID),
    isSelected: selectedLayoutIds.includes(seat.Layout_ID)
  }));

  // T√¨m c√°c kho·∫£ng tr·ªëng (gaps)
  const gaps = findGapsInRow(seatStatuses);
  
  // Ki·ªÉm tra c√°c gap c√≥ h·ª£p l·ªá kh√¥ng
  for (const gap of gaps) {
    if (gap.size === 1) {
      // Orphaned seat - kh√¥ng ƒë∆∞·ª£c ph√©p
      return {
        valid: false,
        errorCode: 'ORPHANED_SEAT',
        message: `‚ùå Kh√¥ng th·ªÉ ƒë·ªÉ gh·∫ø ${rowLabel}${gap.columns[0]} tr·ªëng l·∫ª!\n\nüé≠ Trong ng√†nh r·∫°p chi·∫øu phim, gh·∫ø tr·ªëng l·∫ª r·∫•t kh√≥ b√°n v√† ·∫£nh h∆∞·ªüng ƒë·∫øn doanh thu.\n\nüí° G·ª£i √Ω: Vui l√≤ng ch·ªçn th√™m gh·∫ø ${rowLabel}${gap.columns[0]} ho·∫∑c ch·ªçn v·ªã tr√≠ kh√°c.`,
        suggestedSeats: [`${rowLabel}${gap.columns[0]}`],
        rowLabel,
        gapSize: gap.size
      };
    } else if (gap.size === 2) {
      // 2 gh·∫ø tr·ªëng gi·ªØa c√°c nh√≥m - c·∫£nh b√°o nh·∫π nh∆∞ng v·∫´n cho ph√©p
      logger.warn(`[Gap Detection] H√†ng ${rowLabel} c√≥ 2 gh·∫ø tr·ªëng li·ªÅn k·ªÅ: ${gap.columns.map(c => `${rowLabel}${c}`).join(', ')}`);
      // Kh√¥ng block, ch·ªâ log warning cho business analysis
    }
  }

  return { valid: true };
}

/**
 * T√¨m c√°c kho·∫£ng tr·ªëng trong 1 h√†ng
 */
function findGapsInRow(seatStatuses) {
  const gaps = [];
  let currentGap = null;

  for (let i = 0; i < seatStatuses.length; i++) {
    const seat = seatStatuses[i];
    
    if (!seat.willBeBooked) {
      // Gh·∫ø tr·ªëng - b·∫Øt ƒë·∫ßu ho·∫∑c ti·∫øp t·ª•c gap
      if (!currentGap) {
        currentGap = {
          columns: [seat.column],
          size: 1
        };
      } else {
        currentGap.columns.push(seat.column);
        currentGap.size++;
      }
    } else {
      // Gh·∫ø ƒë√£ ƒë·∫∑t - k·∫øt th√∫c gap (n·∫øu c√≥)
      if (currentGap) {
        gaps.push(currentGap);
        currentGap = null;
      }
    }
  }

  // Th√™m gap cu·ªëi c√πng (n·∫øu c√≥)
  if (currentGap) {
    gaps.push(currentGap);
  }

  return gaps;
}

module.exports = {
  validateSeatBookingRules,
  validateAdjacentSeats,
  validateGapPrevention
}; 